#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="randomwallpaper"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 030820211523-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : randomwallpaper --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Monday, Mar 08, 2021 15:23 EST
# @File          : randomwallpaper
# @Description   : Set a random wallpaper
# @TODO          : Refactor the code/Add MacOS support
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# variables
WALLPAPERDIR="${WALLPAPERS:-$HOME/.local/share/wallpapers}"
WALLPAPERS="${WALLPAPERS:-$HOME/.local/share/wallpapers}"
ROTATE_TIME="${ROTATE_TIME:-300}"
KILL_FILE="${KILL_FILE:-${TMPDIR:-/tmp}/randomwallpaper.$USER.kill}"
RUN_FILE="${RUN_FILE:-${TMPDIR:-/tmp}/randomwallpaper.$USER}"
NOTIFICATIONS="${NOTIFICATIONS:-enabled}"
FILE_SEEN="${FILE_SEEN:-$HOME/.cache/randomwallpaper.seen}"
FILE_WALLPAPER="${FILE_WALLPAPER:-$HOME/.cache/randomwallpaper.all}"
FILE_SEEN_TMP="${FILE_SEEN_TMP:-$FILE_SEEN.tmp}"
REFRESH_TIME="$((60 * "${REFRESH_TIME:-12}"))"
MANUAL=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$HOME/.config/randomwallpaper/settings" ] && . "$HOME/.config/randomwallpaper/settings"
if [ "$NOTIFICATIONS" != "enabled" ]; then notifications() { echo "$*" >/dev/null; }; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

__config() {
  printf_green "Generating the config"
  __mkd "$HOME/.config/randomwallpaper"
  echo '# Randomwallpaper Settings
ROTATE_TIME='"${ROTATE_TIME:-300}"'
KILL_FILE="'${TMPDIR:-/tmp}/randomwallpaper.$USER.kill'"
RUN_FILE="'${TMPDIR:-/tmp}/randomwallpaper.$USER'"
NOTIFICATIONS="'${NOTIFICATIONS:-enabled}'"
' >"$HOME/.config/randomwallpaper/settings"
  printf_exit "2" "$?" "config saved to $HOME/.config/randomwallpaper/settings"
}

__startup() {
  printf_green "Adding the randomwallpaper to startup"
  cat <<EOF >"$HOME/.config/autostart/randomwallpaper.desktop"
#!/usr/bin/env xdg-open

[Desktop Entry]
Encoding=UTF-8
Version=0.9.4
Type=Application
Name=Wallpaper Changer
Icon=preferences-desktop-notification
Comment=Random Wallpaper
Exec=randomwallpaper --bg --start
RunHook=0
StartupNotify=false
Terminal=false
Hidden=false

EOF
  [ -f "$HOME/.config/autostart/randomwallpaper.desktop" ] &&
    printf_green "Successfully installed randomwallpaper Daemon" ||
    printf_error "Failed to install randomwallpaper Daemon"
  exit $?
}

__variety() {
  if [ -f "$HOME/.config/variety/variety.conf" ] &&
    grep '^change_enabled' "$HOME/.config/variety/variety.conf" 2>/dev/null | grep -iq True; then
    variety -q &>/dev/null
    sed -i 's#change_enabled =.*#change_enabled = False#g' "$HOME/.config/variety/variety.conf"
    if grep '^change_enabled' "$HOME/.config/variety/variety.conf" 2>/dev/null | grep -iq True; then
      printf_error "Refusing to run: variety is already changing the wallpaper"
      return 1
    fi
    variety &>/dev/null &
  fi
}

__mesg_ok() { notifications "Wallpaper Changer" "Wallpaper has been changed to $SHORTNAME"; }
__mesg_fail() { notifications "Wallpaper Changer" "Failed to change the wallpaper"; }

__kill() {
  if [ -f "$KILL_FILE" ]; then
    __rm_rf "$KILL_FILE" "$RUN_FILE"
    if __get_pid &>/dev/null; then
      notifications "Wallpaper Changer" "Background service is shutting down"
      for f in $(__get_pid); do
        kill -15 "$f" &>/dev/null
      done && exitCode=0 || exitCode=1
    else
      notifications "Wallpaper Changer" "Background service is not running"
      exitCode=1
    fi
    return "$exitCode"
  fi
}

__find_cmd() { find -L "${1:-$WALLPAPERS}" -type f -iname "*.jpg" -or -iname "*.jpeg" -or -iname "*.png" -or -iname "*.tif" -or -iname "*.bmp" -or -iname "*.gif" -not -path "*/.git/*"; }

init() {
  [ -d "$WALLPAPERS/system " ] || __mkd "$WALLPAPERS/system"
  if [ -d /usr/share/backgrounds ]; then
    for l in $(ls /usr/share/backgrounds); do
      [ -e "$WALLPAPERS/system/$l" ] || __ln_sf "/usr/share/backgrounds/$l" "$WALLPAPERS/system/$l"
    done
  fi
  if [ -d /usr/share/wallpapers ]; then
    for l in $(ls /usr/share/wallpapers); do
      [ -e "$WALLPAPERS/system/$l" ] || __ln_sf "/usr/share/wallpapers/$l" "$WALLPAPERS/system/$l"
    done
  fi
  if [ -f "$1" ]; then
    WALLPAPER="$1"
    MANUAL=true
    shift 1
  elif [ -d "$1" ]; then
    WALLPAPER="$(__find_cmd "$1" | sort -R | tail -n 1)"
    MANUAL=true
    shift 1
  else
    RANDOMDIR="$(find -L $WALLPAPERS -maxdepth 1 -type d | sort -R | head -n1)"
    SETRANDOM="$(__find_cmd "$RANDOMDIR" | sort -R | tail -n 1)"
    __make_seen_file
  fi

  RANDOMWALLPAPER="${WALLPAPER:-$SETRANDOM}"
  RAND="${RANDOMWALLPAPER}"
  SHORTNAME="$(echo "${RAND/$WALLPAPERS/}" | sed 's#^/##g')"
}

__background_job() {
  __rm_rf "$RUN_FILE"
  local ROTATE_TIME="${1:-$ROTATE_TIME}"
  [ -f "$HOME/.config/randomwallpaper/settings" ] && . "$HOME/.config/randomwallpaper/settings"
  randomwallpaper --bg --new && touch "$RUN_FILE" || __rm_rf "$RUN_FILE"
  sleep ${ROTATE_TIME:-300}
  __kill && __background_job || return 1
}

__start() {
  __getstatus && return 1
  notifications "Wallpaper Changer" "Enabling randomwallpaper background job: Changing every $ROTATE_TIME seconds"
  __rm_rf "$KILL_FILE" "$RUN_FILE"
  sleep 60 && sh -c "$PROG --bg --run &>/dev/null &" &
  disown
}

__get_pid() { ps -ux | grep 'randomwallpaper' | grep 'run' | grep -v 'grep' | awk '{print $2}' | grep '^' || return 1; }

__getstatus() {
  MAINPID="$(__get_pid | head -n1)"
  GETTPID=$(__get_pid || return 1)
  PSPID="$(__get_pid | head -n1 || ps -ux | grep "$PROG" | grep -v 'grep' | grep "run" 2>/dev/null || return 1)"
  if [ -n "$GETTPID" ]; then
    [ -f "$KILL_FILE" ] && START_STOP_MESG="Stop is pending" || export START_STOP_MESG="Stop randomwallpaper"
    __get_status_pid "$GETTPID" && exitCode=0 || exitCode=1
  else
    export START_STOP_MESG="Start randomwallpaper"
    exitCode=1
  fi
  return $exitCode
}
notify_running() { notifications "Randomwallpaper" "Already running: $MAINPID" && return 1; }
__make_seen_file() {
  [ -f "$FILE_SEEN" ] || touch "$FILE_SEEN"
  [ -f "$FILE_WALLPAPER" ] || __find_cmd | sort -u >"$FILE_WALLPAPER"
  COUNT_SEEN="$(grep -c "$WALLPAPERDIR" "$FILE_SEEN")"
  COUNT_ALL="$(grep -c "$WALLPAPERDIR" "$FILE_WALLPAPER")"
  [ "$COUNT_SEEN" = "$COUNT_ALL" ] && __rm_rf "$FILE_SEEN"
}
__find_random() {
  __find_mtime "$FILE_WALLPAPER" "${REFRESH_TIME:-720}" && __find_cmd | sort -u >"$FILE_WALLPAPER"
  if [ "$MANUAL" != "true" ] && grep -qv "$RAND" "$FILE_SEEN" &>/dev/null; then
    while :; do
      RANDOMDIR="$(find -L $WALLPAPERS -maxdepth 1 -type d | sort -R | head -n1)"
      SETRANDOM="$(__find_cmd "$RANDOMDIR" | grep -vf "$SEEN_FILE" | sort -R | tail -n 1)"
      RANDOMWALLPAPER="$SETRANDOM"
      RAND="$RANDOMWALLPAPER"
      SHORTNAME="$(echo "${RAND/$WALLPAPERS/}" | sed 's#^/##g')"
      grep "$RAND" "$FILE_SEEN" &>/dev/null || break
    done
  fi
  __seen_file
}

__seen_file() {
  echo "$RAND" >>"$FILE_SEEN"
  __cp_rf "$FILE_SEEN" "$FILE_SEEN_TMP" && cat "$FILE_SEEN_TMP" | sort -u >"$FILE_SEEN"
  __rm_rf "$FILE_SEEN_TMP"
}

__randomwallpaper() {
  local exitCode=0
  xfce_change_wp() {
    xfconf-query --channel xfce4-desktop --list | grep last-image | while read path; do
      xfconf-query --channel xfce4-desktop --property "$path" --set "$1"
    done
  }

  [ -n "$RAND" ] || exit 1
  if [[ "$DESKTOP_SESSION" =~ "xfce" ]] && __cmd_exists xfconf-query; then
    xfce_change_wp "$RAND" &>/dev/null &
  elif __cmd_exists variety; then
    variety --set="$RAND" &>/dev/null &
  elif __cmd_exists feh; then
    feh --bg-fill "$RAND" &>/dev/null &
  elif __cmd_exists xwallpaper; then
    xwallpaper --maximize "$RAND" &>/dev/null &
  else
    return 1
  fi
  return $?
}

__term() {
  local main sleeptime
  while :; do
    # show menu
    clear
    shift 1
    printf_newline "\n\n\n\n"
    printf_head "Random Wall Paper Menu"
    printf_newline
    __getstatus && printf_green "randomwallpapers is running" || printf_red "randomwallpapers is not running"
    printf_newline
    printf_green "c. change the wallpaper"
    printf_green "r. Change the wallpaper every x minutes"
    printf_green "s. ${START_STOP_MESG:-Start randomwallpaper}"
    printf_green "z. or escape to Exit"
    printf_green "---------------------------------"
    printf_read_question_nt "6" "Enter your choice [y-z] : " "1" "main" "-se"
    case "$main" in
    c)
      __randomwallpaper
      ;;
    k)
      sh -c "randomwallpaper --bg --kill"
      sleep 3
      ;;
    r)
      if __getstatus; then
        notify_running
      else
        printf_read_question_nt "6" "How often do you want it to change? [minutes]: " "3" "sleeptime" "-e"
        counter=$(echo $((60 * $sleeptime)))
        ROTATE_TIME="$counter"
        randomwallpaper --bg --start
        printf_green "Started randomwallpaper in the background"
        printf_counter "5" "4" "exiting menu in"
        break
      fi
      ;;
    s)
      if __getstatus; then
        sh -c "randomwallpaper --bg --kill"
      else
        randomwallpaper --bg --start
      fi
      ;;
    $'\E' | $'\e' | z | x | n)
      clear
      break
      ;;
    *) ;;
    esac
    printf_counter "5" "3" "Re-loading menu in"
  done
  clear
}
main() {
  init "$@"
  __find_random "$@"
  __variety
  __getstatus
  case $1 in
  *config)
    shift 1
    __config
    ;;
  *startup | *enable)
    shift 1
    __startup
    ;;
  *disable)
    __rm_rf "$HOME/.config/autostart/randomwallpaper.desktop"
    notifications "Wallpaper Changer" "Deleted the autostart service"
    ;;
  *term)
    shift 1
    __term "$@"
    ;;
  *bg) # background
    shift 1
    case $1 in
    *run)
      shift $#
      run_count="$(__start_count 'randomwallpaper' 'run')"
      if [ "$run_count" -gt 2 ]; then
        notify_running
      else
        __background_job "$@"
      fi
      exit
      ;;
    *new)
      shift $#
      __randomwallpaper && __mesg_ok || __mesg_fail
      exit $?
      ;;
    *start)
      shift $#
      start_count="$(__start_count 'randomwallpaper' 'start')"
      if [ "$start_count" -gt 2 ]; then
        notify_running
        printf_exit "More than one instance seems to be runnng"
      fi
      if __getstatus; then
        notify_running
      else
        __start
        exit $?
      fi
      ;;
    *status)
      shift $#
      if __getstatus; then
        if [ -n "$GETTPID" ]; then
          notify_running
          printf_exit 2 0 "randomwallpapers is running with PID: $GETTPID"
        else
          notifications "RandomWallPapers" "randomwallpapers appears to be stop"
          printf_exit 1 1 "randomwallpapers appears to be stop"
        fi
      else
        notifications "RandomWallPapers" "randomwallpapers appears to be stop"
        printf_exit 1 1 "randomwallpapers appears to be stop"
      fi
      exit $?
      ;;
    *stop | *kill)
      shift $#
      printf_green "Killing background service" && touch "$KILL_FILE" && __kill
      exit
      ;;
    *)
      __start "$@"
      exit $?
      ;;
    esac
    ;;
  *)
    __randomwallpaper "$@" && __mesg_ok || __mesg_fail
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
main "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
