#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103201731-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : myshell --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 17:31 EDT
# @File          : myshell
# @Description   : Change the default user shell
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check for needed applications
__requires chsh
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# functions
__passwd() {
  password=""
  printf_read_question "6" "Please enter your password: " "120" "password" "-s"
  if [ -z "$password" ]; then
    printf_exit 1 1 "Password is required"
  fi
}
__vars() {
  local PATH="/usr/local/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/games"
  newshell="$(grep $shell /etc/shells | head -n 1 2>/dev/null)"
  newshellname="$(basename $newshell 2>/dev/null)"
  if [ -z "$newshell" ] && [ -z "$newshellname" ]; then
    printf_exit "$shell doesn't exist in /etc/shells"
  fi
}

__list_shells() {
  [ -f "/etc/shells" ] && cat /etc/shells | sed '/^\#/d;/^$/d' | sort -u | printf_readline "3"
}

__success() {
  printf_green "shell has been changed to $newshell"
  printf_custom "3" "You will need to logout for the changes to take effect"
}

__failure() {
  printf_exit "Failed to change the shell to $newshell"
}

__del() {
  if [ $# = 0 ]; then
    printf_help "Usage: myshell --del shellname | myshell --del zsh"
  else
    __requiresudo true
    local tmpshell="/tmp/shells"
    if grep -q $1 /etc/shells; then
      grep -Fv "$1" /etc/shells >"$tmpshell"
      sudo mv -f "$tmpshell" /etc/shells
      printf_exit 2 0 "$1 has been removed from /etc/shells"
    else
      printf_exit 1 1 "$1 isn't in /etc/shells"
    fi
  fi
}

__add() {
  local PATH="/usr/local/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/games"
  local tmpshell="/tmp/shells"
  __requiresudo true
  if [ $# = 0 ]; then
    for f in bash fish zsh; do
      cmd="$(command -v $f)"
      if [ -f "$cmd" ]; then
        if ! grep -q "$f" /etc/shells; then
          echo "$(command -v $f)" | sudo tee -a /etc/shells &>/dev/null &&
            printf_green "Successfuly added $cmd to /etc/shells"
        else
          printf_yellow "$cmd is already in /etc/shells"
        fi
      else
        printf_red "The command $f does not exist"
      fi
    done
    exit $?
  else
    if __cmd_exists "$1"; then
      local cmd="$(command -v $1)"
      if ! grep -q "$1" /etc/shells; then
        if [ "$(command -v $1 | grep -q '/' || echo 0)" = 0 ]; then
          printf_red "/etc/shells requires full path to the shell, however,"
          printf_exit "I couldn't determine the full path for $cmd"
        else
          echo "$cmd" | sudo tee -a /etc/shells &>/dev/null &&
            printf_exit "2" "0" "$cmd has been added to /etc/shells" ||
            printf_red "Something went wrong"
        fi
      else
        printf_exit "$cmd already exists in /etc/shells"
      fi
    else
      printf_exit "The command $1 doesn't exist"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
case "$1" in
--help)
  shift 1
  __help
  ;;

--list)
  shift 1
  printf_custom "2" "Available shells:"
  __list_shells
  exit
  ;;

*add)
  shift 1
  __add "$@"
  ;;

*del)
  shift 1
  __del "$@"
  ;;

*set)
  shift 1
  myshell "$*"
  exit $?
  ;;

*)
  PATH="/usr/local/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/games"
  [ -n "$1" ] && shell="$(command -v $1)"
  [ -n "$shell" ] && __vars "$shell"
  case "$(uname -s)" in
  Linux)
    if [ -z "$1" ]; then
      printf_green "Your default shell is $(__getuser_cur_shell)"
      printf_blue "to change your default shell"
      printf_exit 4 0 "run myshell shellname | myshell fish"
    fi
    if __getuser_shell "$newshell"; then
      printf_custom "The old and new shell are both $newshellname"
    else
      if [ -f "$newshell" ]; then
        __passwd
        echo -n "$(echo $password | chsh -s "$newshell" "$USER" &>/dev/null)" &&
          __getuser_shell "$newshell" && __success || __failure
      else
        printf_red "Invalid shell"
      fi
    fi
    ;;

  Darwin)
    if [ -z "$1" ]; then
      printf_green "Your default shell is $SHELL"
      printf_blue "to change your default shell"
      printf_exit 4 0 "run myshell shellname | myshell fish"
    fi
    if [ -f "$newshell" ]; then
      __passwd
      echo -n "$(echo $password | chsh -u "$USER" -s "$newshell" | printf_readline "3" | grep -vq "chsh")" && __success || __failure
    else
      printf_red "Invalid shell"
    fi
    ;;

  *) printf_exit "Unsupported OS" ;;
  esac
  ;;

esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
