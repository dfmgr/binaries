#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="mytorrent"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 021520211402-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : mytorrent --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Monday, Feb 15, 2021 14:02 EST
# @File          : mytorrent
# @Description   : Open torrent client
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$HOME/.config/mytorrent/settings" ] && . "$HOME/.config/mytorrent/settings"
MYTORRENT_NOTIFICATIONS="${MYTORRENT_NOTIFICATIONS:-yes}"
MYTERMINAL_NOTIFICATIONS="no"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__config() {
  printf_green "Generating config file"
  __mkd "$HOME/.config/mytorrent"
  echo -e '# Settings for mytorrent
MYTORRENT="config"
TORRENT="'$TORRENT'"
MYTORRENT_NOTIFICATIONS="'$MYTORRENT_NOTIFICATIONS'"
  ' >"$HOME/.config/mytorrent/settings"
  if [ -f "$HOME/.config/mytorrent/settings" ]; then
    printf_green "File saved to: $HOME/.config/mytorrent/settings"
    [ -n "$MYTORRENT_NOTIFICATIONS" ] && notifications "MyTorrent" "Config file saved to:\n$HOME/.config/mytorrent/settings"
  fi
  exit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_link() {
  case "$1" in
  *)
    if [ -n "$2" ]; then
      shift 1
      if cmd_exists "$1"; then
        printf_green "Linking $HOME/.local/bin/mytorrent to $1"
        __ln_sf "$(command -v $1)" "$HOME/.local/bin/mytorrent"
        exit 0
      else
        printf_green "Linking $HOME/.local/bin/mytorrent to $TORRENT"
        __ln_sf "$TORRENT" "$HOME/.local/bin/mytorrent"
        exit 0
      fi
    fi
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$MYTORRENT" != "config" ]; then
  if [ -n "$(command -v transmission-remote-gtk 2>/dev/null)" ]; then
    export TORRENT="transmission-remote-gtk"
  elif [ -n "$(command -v transmission-remote 2>/dev/null)" ]; then
    export TORRENT="transmission-remote"
  elif [ -n "$(command -v transmission-gtk 2>/dev/null)" ]; then
    export TORRENT="transmission-gtk"
  elif [ -n "$(command -v transmission-qt 2>/dev/null)" ]; then
    export TORRENT="transmission-qt"
  elif [ -n "$(command -v deluge 2>/dev/null)" ]; then
    export TORRENT="deluge"
  elif [ -n "$(command -v vuze 2>/dev/null)" ]; then
    export TORRENT="vuze"
  elif [ -n "$(command -v qbittorrent)" ]; then
    export TORRENT="qbittorrent"
  elif [ -n "$(command -v ktorrent 2>/dev/null)" ]; then
    export TORRENT="ktorrent"
  elif [ -n "$(command -v ctorrent 2>/dev/null)" ]; then
    export TORRENT="ctorrent"
  elif [ -n "$(command -v unworkable 2>/dev/null)" ]; then
    export TORRENT="unworkable"
  elif [ -n "$(command -v rtorrent 2>/dev/null)" ]; then
    export TORRENT="rtorrent"
  elif [ -n "$(command -v bitstormlite 2>/dev/null)" ]; then
    export TORRENT="bitstormlite"
  elif [ -f "/Applications/Transmission.app/Contents/MacOS/Transmission" ]; then
    export TORRENT="/Applications/Transmission.app/Contents/MacOS/Transmission"
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -z "$TORRENT" ]; then
  [ "$MYTORRENT_NOTIFICATIONS" = "yes" ] && notifications "MyTorrent" "No bittorrent clients are installed"
  printf_exit 1 1 "No bittorrent clients are installed"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case $TORRENT in
  transmission-remote*)
    shift 1
    [ "$TORRENT" = "transmission-remote" ] && TORRENT="myterminal -e bash -c "$TORRENT $*;bash""
    transmission_daemon="$(ps -aux | grep transmission-da | grep -v 'grep ' 2>/dev/null)"
    if [ -z "$transmission_daemon" ] && [ -z "$TORRENT_SERVER" ]; then
      transmission-daemon & disown && [ "$MYTORRENT_NOTIFICATIONS" = "yes" ] && \
        notifications "MyTorrent" "Transmission server has been started"
    fi
    ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case $1 in
*config)
  shift 1
  __config
  ;;

*create | *link)
  shift 1
  __create_link "$@"
  ;;

*)
  if [[ "$1" =~ .*.torrent ]] && [[ "$TORRENT" =~ transmission ]]; then
    __cmd_exists transadd && transadd "$*" || exec "$TORRENT" -a "$*"
    exit
  fi
  if [ $# -ne ]; then
    exec $TORRENT "$*"
    exit
  else
    [ "$MYTORRENT_NOTIFICATIONS" = "yes" ] && notifications "MyTorrent" "Attempting to launch $TORRENT"
    if [ -f "$HOME/.local/bin/mytorrent" ]; then
      exec ~/.local/bin/mytorrent "$*" 2>/dev/null & disown
    else
      exec $TORRENT "$*" 2>/dev/null & disown
    fi
  fi
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
