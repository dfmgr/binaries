#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202104130302-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap 'exitCode=${exitCode:-$?};[ -f "$LOGOUT_MENU_TEMP_FILE" ] && rm -Rf "$LOGOUT_MENU_TEMP_FILE" &>/dev/null' EXIT

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202104130302-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : LICENSE.md
# @ReadME        : logout-menu --help
# @Copyright     : Copyright: (c) 2021 Jason, CasjaysDev
# @Created       : Tuesday, Apr 13, 2021 03:05 EDT
# @File          : logout-menu
# @Description   : Logout, shutdown, reboot or lock screen
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$LOGOUT_MENU_CONFIG_DIR/$LOGOUT_MENU_CONFIG_FILE"
  [ -d "$LOGOUT_MENU_CONFIG_DIR" ] || mkdir -p "$LOGOUT_MENU_CONFIG_DIR"
  [ -d "$LOGOUT_MENU_CONFIG_BACKUP_DIR" ] || mkdir -p "$LOGOUT_MENU_CONFIG_BACKUP_DIR"
  [ -f "$LOGOUT_MENU_CONFIG_DIR/$LOGOUT_MENU_CONFIG_FILE" ] &&
    cp -Rf "$LOGOUT_MENU_CONFIG_DIR/$LOGOUT_MENU_CONFIG_FILE" "$LOGOUT_MENU_CONFIG_BACKUP_DIR/$LOGOUT_MENU_CONFIG_FILE.$$"
  cat <<EOF >"$LOGOUT_MENU_CONFIG_DIR/$LOGOUT_MENU_CONFIG_FILE"
# Settings for logout-menu
LOGOUT_MENU_LOCKER_APP="${LOCKER:=slock}"
LOGOUT_MENU_TEMP_FILE="${TMPDIR:-/tmp}/logout-menu"
LOGOUT_MENU_NOTIFY_ENABLED="yes"
LOGOUT_MENU_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
LOGOUT_MENU_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$LOGOUT_MENU_NOTIFY_CLIENT_ICON}"

EOF
  if [ -f "$LOGOUT_MENU_CONFIG_DIR/$LOGOUT_MENU_CONFIG_FILE" ]; then
    printf_green "Your config file for logout-menu has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
output() {
  ${OUTPUT} "dmlogout" "$@"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
LOGOUT_MENU_CONFIG_FILE="settings.conf"
LOGOUT_MENU_CONFIG_DIR="$HOME/.config/myscripts/logout-menu"
LOGOUT_MENU_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/logout-menu/backups"
LOGOUT_MENU_OPTIONS_DIR="$HOME/.local/share/myscripts/logout-menu/options"
LOGOUT_MENU_TEMP_FILE="${TMPDIR:-/tmp}/logout-menu"
LOGOUT_MENU_NOTIFY_ENABLED="yes"
LOGOUT_MENU_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
LOGOUT_MENU_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$LOGOUT_MENU_NOTIFY_CLIENT_ICON}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="$*"
SHORTOPTS="c,v,h"
LONGOPTS="options,config,version,help"
ARRAY=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$LOGOUT_MENU_CONFIG_DIR/$LOGOUT_MENU_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$LOGOUT_MENU_OPTIONS_DIR/options" ] || __list_options "$LOGOUT_MENU_OPTIONS_DIR" &>/dev/null
[ -f "$LOGOUT_MENU_OPTIONS_DIR/array" ] || __list_array "$LOGOUT_MENU_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$LOGOUT_MENU_CONFIG_DIR/$LOGOUT_MENU_CONFIG_FILE" ]; then
  . "$LOGOUT_MENU_CONFIG_DIR/$LOGOUT_MENU_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$LOGOUT_MENU_OPTIONS_DIR" "$ARRAY"
    __list_options "$LOGOUT_MENU_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${LOGOUT_MENU_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${LOGOUT_MENU_NOTIFY_CLIENT_ICON}"
if [ "$LOGOUT_MENU_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash dmenu systemd slock notify-send || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
declare -a MANAGERS
while IFS= read -r manager; do
  MANAGERS+=("${manager,,}")
done < <(grep 'Name' /usr/share/xsessions/*.desktop | awk -F"=" '{print $2}')

declare -a options=(
  "Lock screen"
  "Logout"
  "Reboot"
  "Shutdown"
  "Suspend"
  "Quit"
)

OUTPUT="echo"
if [[ ${TERM} == 'dumb' ]]; then
  OUTPUT="notify-send"
fi
export OUTPUT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
choice=$(printf '%s\n' "${options[@]}" | dmenu -i -p 'Shutdown menu:' "${@}")
case $choice in
'Logout')
  if [[ "$(echo -e "No\nYes" | dmenu -i -p "${choice}?" "${@}")" == "Yes" ]]; then
    for manager in "${MANAGERS[@]}"; do
      killall "${manager}" || output "Process ${manager} was not running."
    done
  else
    output "User chose not to logout." && exit 1
  fi
  ;;
'Lock screen')
  ${LOCKER}
  ;;
'Reboot')
  if [[ "$(echo -e "No\nYes" | dmenu -i -p "${choice}?" "${@}")" == "Yes" ]]; then
    systemctl reboot
  else
    output "User chose not to reboot." && exit 0
  fi
  ;;
'Shutdown')
  if [[ "$(echo -e "No\nYes" | dmenu -i -p "${choice}?" "${@}")" == "Yes" ]]; then
    systemctl poweroff
  else
    output "User chose not to shutdown." && exit 0
  fi
  ;;
'Suspend')
  if [[ "$(echo -e "No\nYes" | dmenu -i -p "${choice}?" "${@}")" == "Yes" ]]; then
    systemctl suspend
  else
    output "User chose not to suspend." && exit 0
  fi
  ;;
'Quit')
  output "Program terminated." && exit 0
  ;;
  # It is a common practice to use the wildcard asterisk symbol (*) as a final
# pattern to define the default case. This pattern will always match.
*)
  false
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
