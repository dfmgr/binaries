#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 011320210115-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : backupapp
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : backup files and folders
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Set functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check for needed applications

__require_app tar

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application

declare filename count backupdir rmpre4vbackup _APPNAME _APPDIRS
if [ -n "$1" ]; then _APPNAME="$1" && shift 1; else printf_green "Needs a name" && __help; fi
if [ -n "$*" ]; then _APPDIRS="$*" && shift; else printf_green "Needs a directory" && __help; fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

main() {
  local appname="$_APPNAME"
  local appdir="$_APPDIRS"
  local logdir="$HOME/.local/log/backups"
  local curdate="$(date +%Y-%m-%d-%H-%M-%S)"
  local filename="$appname-$curdate.tar.gz"
  local backupdir="${MY_BACKUP_DIR:-$HOME/.local/backups}/apps"
  mkdir -p "$backupdir" "$logdir"

  printf_green "Starting backup"
  echo -e " ##################################################################" >>"$logdir/$appname.log"
  echo -e "# Started on $(date +'%A, %B %d, %Y %H:%M:%S')" >>"$logdir/$appname.log"
  echo -e "# Backing up $appdir" >>"$logdir/$appname.log"
  echo -e "##################################################################\n" >>"$logdir/$appname.log"

  tar cfzv "$backupdir/$filename" $appdir >>"$logdir/$appname.log" 2>>"$logdir/$appname.log" || return 1
  exitCode=$?

  echo -e "\n##################################################################" >>"$logdir/$appname.log"
  echo -e "#Ended on $(date +'%A, %B %d, %Y %H:%M:%S')" >>"$logdir/$appname.log"
  echo -e "##################################################################\n\n" >>"$logdir/$appname.log"
  if [ "$exitCode" = 0 ]; then
    printf_green "The backup has completed successfully."
    printf_green "Saved to: $backupdir/$filename"
  else
    printf_red "The backup has failed to complete."
    printf_red "More information can be found in the log file:"
    printf_exit "$logdir/$appname.log"
  fi

  leaveCount=5
  fileCount=$(ls $backupdir/$appname*.tar.gz 2>/dev/null | wc -l 2>/dev/null)
  removeoldbackups=$(ls $backupdir/$appname*.tar.gz 2>/dev/null)

  tailCount=$((fileCount - leaveCount))
  ls -t $removeoldbackups | tail -$tailCount 2>/dev/null | xargs rm -f

}

if [ -n "$_APPNAME" ] && [ -n "$_APPDIRS" ]; then
  main "$*"
else
  printf_red "Nothing to back up" && __help
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
