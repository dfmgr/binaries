#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202103271625-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
shopt -s extglob
trap '' SIGINT
trap '' SIGQUIT
trap '' SIGTSTP

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103271625-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : calc --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 27, 2021 16:25 EDT
# @File          : calc
# @Description   : wrapper for qalc/bc
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$CALC_CONFIG_DIR/$CALC_CONFIG_FILE"
  [ -d "$CALC_CONFIG_DIR" ] || mkdir -p "$CALC_CONFIG_DIR"
  [ -d "$CALC_CONFIG_BACKUP_DIR" ] || mkdir -p "$CALC_CONFIG_BACKUP_DIR"
  [ -f "$CALC_CONFIG_DIR/$CALC_CONFIG_FILE" ] &&
    cp -Rf "$CALC_CONFIG_DIR/$CALC_CONFIG_FILE" "$CALC_CONFIG_BACKUP_DIR/$CALC_CONFIG_FILE.$$"
  cat <<EOF >"$CALC_CONFIG_DIR/$CALC_CONFIG_FILE"
# Settings for calc
CALC_NOTIFY_ENABLED="yes"
CALC_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
CALC_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$CALC_NOTIFY_CLIENT_ICON}"

EOF
  if [ -f "$CALC_CONFIG_DIR/$CALC_CONFIG_FILE" ]; then
    printf_green "Your config file for calc has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__usage() {
  printf_cyan 'Usage: "20 * 4/2 + 23 - 14"'
  printf_red "press q to exit"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
calc_app() {
  if cmd_exists qalc; then
    local answer="$(qalc "$CALC_OUTPUT")"
  elif cmd_exists bc; then
    local answer="$(echo "$CALC_INPUT = $(echo "$CALC_OUTPUT" | bc -q)")"
  else
    printf_exit "Can't find a calculator app!"
  fi
  echo "$answer"
  if [ "$CALC_NOTIFY_ENABLED" = yes ]; then __notifications "Calc" "Answer is $answer"; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
CALC_CONFIG_FILE="settings.conf"
CALC_CONFIG_DIR="$HOME/.config/myscripts/calc"
CALC_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/calc/backups"
CALC_OPTIONS_DIR="$HOME/.local/share/myscripts/calc/options"
CALC_NOTIFY_ENABLED="yes"
CALC_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
CALC_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$CALC_NOTIFY_CLIENT_ICON}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="${*}"
SHORTOPTS="c,v,h,t"
LONGOPTS="options,config,version,help,term"
ARRAY="{00.99}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$CALC_CONFIG_DIR/$CALC_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$CALC_OPTIONS_DIR/options" ] || __list_options "$CALC_OPTIONS_DIR" &>/dev/null
[ -f "$CALC_OPTIONS_DIR/array" ] || __list_array "$CALC_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$CALC_CONFIG_DIR/$CALC_CONFIG_FILE" ]; then
  . "$CALC_CONFIG_DIR/$CALC_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$PROG" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$CALC_OPTIONS_DIR" "$ARRAY"
    __list_options "$CALC_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  -t | --term)
    shift 1
    TERMINAL_APP="yes"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications
cmd_exists --error bash || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
[ -n "$TERMINAL_APP" ] || [ -n "$1" ] || __help
#[ $# -ne 1 ] && printf_exit 'You must quote your params IE: calc "2 + 4" or "2*2"'
if [ "$CALC_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    export NOTIFY_CLIENT_NAME="${CALC_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_ICON="${CALC_NOTIFY_CLIENT_ICON}"
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
CALC_INPUT="$*"
CALC_OUTPUT="$(echo "$CALC_INPUT" | sed '/^$/d;s/[[:blank:]]//g')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
echo $TERMINAL_APP
if [ -n "$TERMINAL_APP" ]; then
  clear
  printf_newline "\n\n"
  __usage
  while :; do
    printf_read_input "2" "What is it you would like to solve?" "200" "CALC_INPUT" "-e"
    if [ "$CALC_INPUT" = "q" ] || [ -z "$CALC_INPUT" ]; then
      printf_newline "\n"
      break
    else
      clear
      printf_newline "\n\n\n"
      if [ "$CALC_INPUT" = "h" ] || [ "$CALC_INPUT" = "?" ]; then
        __usage
      else
        CALC_OUTPUT="$(echo "$CALC_INPUT" | sed '/^$/d;s/[[:blank:]]//g')"
        calc_app "$CALC_OUTPUT" | printf_readline "5"
      fi
      printf_newline
    fi
  done
  printf_newline
else
  calc_app | printf_readline "2"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit "${exitCode:-$?}"
