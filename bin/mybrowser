#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202104040050-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap 'exitCode=$?;[ -f "$MYBROWSER_TEMP_FILE" ] && rm -Rf "$MYBROWSER_TEMP_FILE" &>/dev/null' EXIT

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202104040050-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : mybrowser --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Sunday, Apr 04, 2021 00:50 EDT
# @File          : mybrowser
# @Description   : Open up the web browser
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$MYBROWSER_CONFIG_DIR/$MYBROWSER_CONFIG_FILE"
  [ -d "$MYBROWSER_CONFIG_DIR" ] || mkdir -p "$MYBROWSER_CONFIG_DIR"
  [ -d "$MYBROWSER_CONFIG_BACKUP_DIR" ] || mkdir -p "$MYBROWSER_CONFIG_BACKUP_DIR"
  [ -f "$MYBROWSER_CONFIG_DIR/$MYBROWSER_CONFIG_FILE" ] &&
    cp -Rf "$MYBROWSER_CONFIG_DIR/$MYBROWSER_CONFIG_FILE" "$MYBROWSER_CONFIG_BACKUP_DIR/$MYBROWSER_CONFIG_FILE.$$"
  cat <<EOF >"$MYBROWSER_CONFIG_DIR/$MYBROWSER_CONFIG_FILE"
# Settings for mybrowser
MYBROWSER_NAME="config"
MYBROWSER="$MYBROWSER"
MYBROWSER_OPTIONS=""
MYBROWSER_STARTPAGE=""
MYBROWSER_CONSOLE="$MYBROWSER_CONSOLE"
MYBROWSER_TEMP_FILE="${TMPDIR:-/tmp}/mybrowser"
MYBROWSER_NOTIFY_ENABLED="yes"
MYBROWSER_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
MYBROWSER_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$MYBROWSER_NOTIFY_CLIENT_ICON}"

EOF
  if [ -f "$MYBROWSER_CONFIG_DIR/$MYBROWSER_CONFIG_FILE" ]; then
    printf_green "Your config file for mybrowser has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_term() {
  cat <<EOF | tee
  #!/usr/bin/env sh
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202104040050-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : mybrowser --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Sunday, Apr 04, 2021 00:50 EDT
# @File          : mybrowser
# @Description   : Setup $BROWSER
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ ! -t 0 ]; then
  myterminal -e "$BROWSER \$MYBROWSER_OPTIONS \$*"
else
  $BROWSER \$MYBROWSER_OPTIONS \$*
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}

EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_link() {
  if [ -n "$2" ]; then
    shift 1
    if cmd_exists "$1"; then
      if [ "$MYBROWSER_CONSOLE" = "yes" ]; then
        printf_green "Generating the script for $BROWSER"
        __create_term >"$HOME/.local/bin/mybrowser"
      fi
      printf_green "Linking $HOME/.local/bin/mybrowser to $1"
      __ln_sf "$(command -v $1)" "$HOME/.local/bin/mybrowser"
    else
      printf_green "Linking $HOME/.local/bin/mybrowser to $BROWSER"
      __ln_sf "$BROWSER" "$HOME/.local/bin/mybrowser"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
MYBROWSER_CONFIG_FILE="settings.conf"
MYBROWSER_CONFIG_DIR="$HOME/.config/myscripts/mybrowser"
MYBROWSER_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/mybrowser/backups"
MYBROWSER_OPTIONS_DIR="$HOME/.local/share/myscripts/mybrowser/options"
MYBROWSER_TEMP_FILE="${TMPDIR:-/tmp}/mybrowser"
MYBROWSER_NOTIFY_ENABLED="yes"
MYBROWSER_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
MYBROWSER_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$MYBROWSER_NOTIFY_CLIENT_ICON}"
MYBROWSER_CONSOLE="${MYBROWSER_CONSOLE}"
MYBROWSER="${MYBROWSER}"
MYBROWSER_OPTIONS="${MYBROWSER_OPTIONS}"
MYBROWSER_STARTPAGE=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="${*}"
SHORTOPTS="c,v,h,l:"
LONGOPTS="options,config,version,help,link:"
ARRAY=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$MYBROWSER_CONFIG_DIR/$MYBROWSER_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$MYBROWSER_OPTIONS_DIR/options" ] || __list_options "$MYBROWSER_OPTIONS_DIR" &>/dev/null
[ -f "$MYBROWSER_OPTIONS_DIR/array" ] || __list_array "$MYBROWSER_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$MYBROWSER_CONFIG_DIR/$MYBROWSER_CONFIG_FILE" ]; then
  . "$MYBROWSER_CONFIG_DIR/$MYBROWSER_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Locate an editor
[ "$MYBROWSER" != "mybrowser" ] || unset MYBROWSER
if [ "$MYBROWSER_NAME" != "config" ] || [ -z "$MYBROWSER" ]; then
  if [ -f "$(command -v garcon-url-handler 2>/dev/null)" ]; then
    MYBROWSER="$(command -v garcon-url-handler 2>/dev/null) --url"
  elif [ -f "$(command -v firefox 2>/dev/null)" ]; then
    MYBROWSER="$(command -v firefox 2>/dev/null)"
  elif [ -f "$(command -v chromium 2>/dev/null)" ]; then
    MYBROWSER="$(command -v chromium 2>/dev/null)"
  elif [ -f "$(command -v google-chrome 2>/dev/null)" ]; then
    MYBROWSER="$(command -v google-chrome 2>/dev/null)"
  elif [ -f "$(command -v opera 2>/dev/null)" ]; then
    MYBROWSER="$(command -v opera 2>/dev/null)"
  elif [ -f "$(command -v epiphany-browser 2>/dev/null)" ]; then
    MYBROWSER="$(command -v epiphany-browser 2>/dev/null)"
  elif [ -f "$(command -v falkon 2>/dev/null)" ]; then
    MYBROWSER="$(command -v falkon 2>/dev/null)"
  elif [ -f "$(command -v midori 2>/dev/null)" ]; then
    MYBROWSER="$(command -v midori 2>/dev/null)"
  elif [ -f "$(command -v netsurf 2>/dev/null)" ]; then
    MYBROWSER="$(command -v netsurf 2>/dev/null)"
  elif [ -f "$(command -v surf 2>/dev/null)" ]; then
    MYBROWSER="$(command -v surf 2>/dev/null)"
  elif [ -f "$(command -v arora 2>/dev/null)" ]; then
    MYBROWSER="$(command -v arora 2>/dev/null)"
  elif [ -f '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome' ]; then
    MYBROWSER='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
  elif [ -f '/Applications/Firefox.app/Contents/MacOS/firefox-bin' ]; then
    MYBROWSER='/Applications/Firefox.app/Contents/MacOS/firefox-bin'
  elif [ -f '/Applications/Opera.app/Contents/MacOS/Opera' ]; then
    MYBROWSER='/Applications/Opera.app/Contents/MacOS/Opera'
  elif [ -f '/Applications/Brave Browser.app/Contents/MacOS/Brave Browser' ]; then
    MYBROWSER='/Applications/Brave Browser.app/Contents/MacOS/Brave Browser'
  elif [ -f '/Applications/Tor Browser.app/Contents/MacOS/firefox' ]; then
    MYBROWSER='/Applications/Tor Browser.app/Contents/MacOS/firefox'
  elif [ -f "$(command -v lynx 2>/dev/null)" ]; then
    MYBROWSER="$(command -v lynx 2>/dev/null)"
  elif [ -f "$(command -v links 2>/dev/null)" ]; then
    MYBROWSER="$(command -v links 2>/dev/null)"
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MYBROWSER_NAME="$(basename "$MYBROWSER" 2>/dev/null)"
export BROWSER="$MYBROWSER"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case $MYBROWSER_NAME in
links | lynx)
  MYBROWSER_CONSOLE="yes"
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$MYBROWSER_OPTIONS_DIR" "$ARRAY"
    __list_options "$MYBROWSER_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  -l | --link)
    shift 1
    __create_link "${1:-$BROWSER}"
    shift 1
    exit $?
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${MYBROWSER_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${MYBROWSER_NOTIFY_CLIENT_ICON}"
if [ "$MYBROWSER_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
if [ -z "$MYBROWSER" ]; then
  __notifications "No email clients are installed"
  printf_newline "\n\n\n"
  printf_red "No email clients are installed"
  printf_pause 1 "Press any key to exit this window"
  exit
fi
if [ -f "$STARTPAGE" ]; then OPEN="${OPEN:-$STARTPAGE}"; else OPEN="${OPEN:-About:blank}"; fi
STARTPAGE="${OPEN:-$STARTPAGE}"
OPEN="$MYBROWSER_OPTIONS ${*:-$STARTPAGE}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
__notifications "Attempting to launch $MYBROWSER_NAME"
if [ -f "$HOME/.local/bin/mybrowser" ]; then
  __exec "$HOME/.local/bin/mybrowser" "$ARGS"
elif [ "$MYBROWSER_CONSOLE" = "yes" ]; then
  if [ ! -t 0 ]; then
    myterminal -e "$BROWSER $OPEN"
  else
    $BROWSER $OPEN
  fi
else
  __exec $BROWSER $OPEN
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
