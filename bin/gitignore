#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103200807-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : gitignore --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 08:07 EDT
# @File          : gitignore
# @Description   : Generate a .gitignore file
# @TODO          : Make this work locally
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Required apps
__check_app git
__check_app curl
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# I'm sure there is a better way to do this
if [ -d "$1" ]; then
  gitdir="$1"
  shift 1
elif [ "$1" = "-d" ] || [ "$1" = "-dir" ] || [ "$1" = "--dir" ]; then
  gitdir="$2"
  __mkd "$gitdir"
  shift 2
  [ -d "$gitdir" ] || printf_exit "$gitdir doesn't seem to be a directory"
else
  gitdir="$PWD"
fi
if [ "$gitdir" = "." ]; then gitdir="$(__basedir ".")"; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GITDIR="$(__git_top_dir "$gitdir" 2>/dev/null || echo "$gitdir")"
GITIGNOREURL="${GITIGNOREURL:-https://www.toptal.com/developers/gitignore/api}"
GITIGNOREDIR="$HOME/.config/gitignore/templates"
IGNORELIST="$(echo "$@" | tr ' ' ',')"
IGNOREFILES=""${IGNORELIST//,/ }""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -n "$1" ] || __help
#[[ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" == "true" ]] || printf_exit 2 0 "This is not a git repo"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__mkd "$GITIGNOREDIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
setup_custom() {
  case $1 in
  dirignore)
    custom_cmd='# Disable reminder in prompt\nignoredirmessage'
    if [ -f "$GITDIR/.gitignore" ]; then
      if ! grep -qF "$dirignore" "$GITDIR/.gitignore" 2>/dev/null; then
        mv -f "$GITDIR/.gitignore" "$GITDIR/.gitignore.tmp" &&
          printf "$custom_cmd\n\n" >"$GITDIR/.gitignore" &&
          cat "$GITDIR/.gitignore.tmp" >>"$GITDIR/.gitignore" &&
          rm -Rf "$GITDIR/.gitignore.tmp" && return 0 || return 1
      fi
    else
      printf "$custom_cmd\n\n" >>"$GITDIR/.gitignore" && return 0 || return 1
    fi
    ;;
  *)
    return 1
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fetch_file() {
  gi_args=()
  for arg; do
    if [[ $arg = -- ]]; then
      curl_args=("${gi_args[@]}")
        gi_args=()
    else
        gi_args+=("$arg")
    fi
  done
  IFS=,
  curl -q -LSs "${curl_args[@]}" https://www.toptal.com/developers/gitignore/api/"${gi_args[*]}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fetch_ignore() {
  if [ -d "$GITIGNOREDIR" ]; then
    local IGNOREFILES="$IGNOREFILES"
    for file in $IGNOREFILES; do
      ls "$GITIGNOREDIR/$file"
      if grep -sEvq '#.*|^$' "$GITIGNOREDIR/$file"; then
        cat "$GITIGNOREDIR/$file"
      else
        fetch_file "$file"
      fi
    done
  else
    fetch_file "$@"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ignore_overwrite() {
  if [[ $* = "--automated" ]]; then
    shift 1
    overwrite=Y
  fi
  if [ -f "$GITDIR/.gitignore" ] && [ -z "$overwrite" ]; then
    printf_read_question "2" "Should I overwrite your git ignore? [y/n]" "1" "overwrite" "-s"
    if printf_answer_yes "$overwrite"; then
      __rm_rf "$GITDIR/.gitignore"
    else
      printf_red "User aborted, not overwriting your .gitignore"
      exit 1
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
create_gitignore() {
  fetch_ignore "$@" #>>"$GITDIR/.gitignore"
  printf_green "Added $IGNORELIST to your .gitignore"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

case $* in
--help)
  __help
  exit
  ;;

--list)
  cat "${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/helpers/gitignore/array" | printf_column
  exit
  ;;

--console)
  shift 1
  printf_green "$(fetch_ignore "$@")"
  exit
  ;;

--update)
  shift 1
  dir="${1:-$GITIGNOREDIR}"
  curl -q -LSs https://www.toptal.com/developers/gitignore/api/list | tr ',' ' ' | tr ' ' '\n' > /tmp/ignorelist
  arrayfile="/tmp/ignorelist"
  mkdir -p "$dir"
  printf_cyan "Retrieving the files from gitignore.io and saving"
  printf_cyan "them to $dir"
  cat "$arrayfile" | while read line || [[ -n $line ]]; do
    fetch_file "$line" | grep -v -E '(^# .*$)|(^$)' > "$dir/$line" && \
      printf '\n' >> "$dir/$line" && printf_green "Created $line" || \
      printf_red "Failed to create $dir/$line"
  done
  printf "# Disable reminder in prompt\nignoredirmessage\n\n" > "$dir/dirignore"
  rm /tmp/ignorelist
  exit
  ;;

dirignore)
  if [ $# = 1 ]; then
    setup_custom && printf_green "Added dirignore to your .gitignore" || \
      printf_error "Failed to add dirignore to gitignore"
  fi
  ;;
*)
  ignore_overwrite "$@" $ignoredir
  [ $# -ne 0 ] && create_gitignore "$@" && true || false
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end

