#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202103271625-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103271625-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : backupapp --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 27, 2021 16:25 EDT
# @File          : backupapp
# @Description   : Backup files and folders
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  local BACKUPAPP_CONFIG_FILE="${1:-$BACKUPAPP_CONFIG_FILE}"
  local NAME="{BACKUPAPP_CONFIG_FILE%.*}"
  printf_green "Generating the config file in"
  printf_green "$BACKUPAPP_CONFIG_DIR/$BACKUPAPP_CONFIG_FILE"
  [ -d "$BACKUPAPP_CONFIG_DIR" ] || mkdir -p "$BACKUPAPP_CONFIG_DIR"
  [ -d "$BACKUPAPP_CONFIG_BACKUP_DIR" ] || mkdir -p "$BACKUPAPP_CONFIG_BACKUP_DIR"
  [ -f "$BACKUPAPP_CONFIG_DIR/$BACKUPAPP_CONFIG_FILE" ] &&
    cp -Rf "$BACKUPAPP_CONFIG_DIR/$BACKUPAPP_CONFIG_FILE" "$BACKUPAPP_CONFIG_BACKUP_DIR/$BACKUPAPP_CONFIG_FILE.$$"
  cat <<EOF >"$BACKUPAPP_CONFIG_DIR/$BACKUPAPP_CONFIG_FILE"
# Settings for backupapp
BACKUPAPP_CONFIGNAME="$BACKUPAPP_CONFIGNAME"
BACKUPAPP_PROJECTNAME="${BACKUPAPP_PROJECTNAME%.*}"
BACKUPAPP_PROJECTDIRS="$BACKUPAPP_PROJECTDIRS"
BACKUPAPP_CONFIG_FILE="$BACKUPAPP_CONFIGNAME.conf"
BACKUPAPP_LOG_DIR="\$HOME/.local/log/backups/apps"
BACKUPAPP_BACKUPAPPS_DIR="\$HOME/.local/backups/apps"
BACKUPAPP_KEEP_AMOUNT="14"
BACKUPAPP_NOTIFY_ENABLED="yes"
BACKUPAPP_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-Backups}"
BACKUPAPP_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-$BACKUPAPP_NOTIFY_CLIENT_ICON}"
BACKUPAPP_LOGFILE_EXTENSION="log"
BACKUPAPP_DATE_FORMAT="%Y-%m-%d-%H-%M_%S"
BACKUPAPP_FILENAME_FORMAT="$(date +"$DATEFORMAT")"
BACKUPAPP_LOGNAME_FORMAT="$(date +"$DATEFORMAT")"
BACKUPAPP_BICON_GOOD="üÜó"
BACKUPAPP_BICON_WARN="‚ö†Ô∏è"
BACKUPAPP_BICON_ERROR="‚úñ"

EOF
  if [ -f "$BACKUPAPP_CONFIG_DIR/$BACKUPAPP_CONFIG_FILE" ]; then
    printf_green "Your config file for ${NAME:-backupapp} has been created"
    true
  else
    printf_red "Failed to create the config file for ${NAME:-backupapp}"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_name() {
  printf_read_input "2" "Enter backupname or existing project name: " "120" "_APPNAME" "-e"
  if [ -f "$BACKUPAPP_CONFIG_DIR/$_APPNAME.conf" ]; then
    . "$BACKUPAPP_CONFIG_DIR/$_APPNAME.conf"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__save_config() {
  #[ -z "$BACKUPAPP_PROJECTNAME" ] && [ -z "$BACKUPAPP_PROJECTDIRS" ] && [ -z "$BACKUPAPP_PROJECTDIRS" ] && [ -z "$BACKUPAPP_CONFIGNAME" ]
  if [ -f "$BACKUPAPP_CONFIG_DIR/$BACKUPAPP_PROJECTNAME.conf" ]; then
    printf_pause "$BACKUPAPP_CONFIG_DIR/$BACKUPAPP_PROJECTNAME.conf already exists"
    printf_read_question_nt "57" "Do you want to overwrite existing config" "1" "OR" "-s"
    printf_answer_yes "$OR" || return
  fi
  printf_read_input "2" "Enter project name: " "120" "_APPNAME" "-e"
  printf_read_input "2" "Enter directories:" "140" "_APPDIRS" "-e -i $HOME/"
  printf_read_input "2" "Enter config Name: " "120" "_CONFIGNAME" "-e -i $_APPNAME"
  BACKUPAPP_CONFIGNAME="$_CONFIGNAME"
  BACKUPAPP_PROJECTNAME="$_APPNAME"
  BACKUPAPP_PROJECTDIRS="$_APPDIRS"
  __gen_config "$_APPNAME.conf"
  [ -f "$BACKUPAPP_CONFIG_DIR/$_APPNAME.conf" ] && . "$BACKUPAPP_CONFIG_DIR/$_APPNAME.conf" ||
    printf_error "Failed to save $BACKUPAPP_CONFIG_DIR/$_APPNAME.conf"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__term() {
  local _APPDIRS="" _APPNAME="" cont="" save="" main=""
  clear
  printf_newline '\n\n\n\n\n'
  __get_name
  while :; do
    clear
    printf_newline "\n\n\n\n"
    printf_head "Backup Menu"
    printf_custom "6" "Welcome to the backup menu: type quit to exit"
    printf_green "c. import config"
    printf_green "s. save config"
    printf_green "e. Show config"
    printf_green "b. Backup files"
    printf_green "r. Restore files"
    printf_green "z. or escape to Exit"
    printf_read_question_nt "6" "Enter your choice [b,r,z] : " "1" "main" "-s"
    clear
    printf_newline "\n\n\n"

    case $main in
    c) __get_name ;;
    e)
      printf_yellow "Showing $BACKUPAPP_CONFIG_DIR/$BACKUPAPP_CONFIG_FILE"
      printf_readline "6" <"$BACKUPAPP_CONFIG_DIR/$BACKUPAPP_CONFIG_FILE"
      printf_pause
      ;;
    r) __restore ;;
    s) __save_config ;;
    $'\E' | $'\e' | z)
      shift 1
      clear
      break
      ;;
    *)
      [ -n "$BACKUPAPP_PROJECTNAME" ] || printf_read_input "2" "Enter directories:" "140" "_APPDIRS" "-e -i $HOME/"
      printf_newline
      if [ -n "${_APPNAME:-$BACKUPAPP_PROJECTNAME}" ] && [ -n "${_APPDIRS:-$BACKUPAPP_PROJECTDIRS}" ]; then
        __backup "${_APPNAME:-$BACKUPAPP_PROJECTNAME}" "${_APPDIRS:-$BACKUPAPP_PROJECTDIRS}" || printf_pause
      else
        [ -n "${_APPNAME:-$BACKUPAPP_PROJECTNAME}" ] || printf_pause "Needs an name"
        [ -n "${_APPDIRS:-$BACKUPAPP_PROJECTDIRS}" ] || printf_pause "Needs a directory"
      fi
      printf_newline
      if [ -z "$BACKUPAPP_PROJECTNAME" ]; then
        printf_read_question_nt "6" "Should I save this for future use? [y/N]" "1" save "-s"
        if printf_answer_yes "$save"; then
          __save_config
        fi
      fi
      printf_newline
      if [ "$main" != "s" ]; then
        printf_read_question_nt "6" "Would you like to keep this window open? [y/N]" "1" cont "-s"
        printf_answer_yes "$cont" && continue || break
        printf_counter "5" "3" "Re-loading menu in"
      fi
      ;;
    esac
  done
  clear
  printf_newline "\n\n"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__restore() {
  #__get_name
  local restore=""
  local _APPNAME="$BACKUPAPP_PROJECTNAME"
  local _APPDIRS="$BACKUPAPP_PROJECTDIRS"
  local _BACKUPDIR="$BACKUPAPP_BACKUPAPPS_DIR"
  local logdir="${BACKUPAPP_LOG_DIR:-$HOME/.local/log/backups/apps}"
  local datefmt="%Y-%m-%d-%H-%M_%S"
  local curdate="$(date +"${BACKUPAPP_DATE_FORMAT:-$datefmt}")"
  local logfilenameformat="${BACKUPAPP_LOGNAME_FORMAT:-$curdate}"
  local logfilenameextension="${BACKUPAPP_LOGFILE_EXTENSION:-log}"
  local logname="$appname-$logfilenameformat.restore.$logfilenameextension"
  local latest_backup="$(__find "$_BACKUPDIR" "$_APPNAME*")"
  local latest_backup_short="${latest_backup/$_BACKUPDIR\//}"
  if [ -f "$latest_backup" ]; then
    printf_read_question_nt "6" "Found $latest_backup_short should i restore that [y/N]" "1" "restore" "-s"
    if printf_answer_yes "$restore"; then
      if __restorecmd; then
        printf_pause 2 "Restore of $latest_backup_short was successful"
      else
        printf_pause 1 "Failed to restore $latest_backup_short"
        false
      fi
    else
      printf_blue "Found the folowing files:"
      __find "$_BACKUPDIR" "$_APPNAME*" "head -n100" | printf_readline "2"
      printf_read_question_nt "6" "Would you like to restore one of those [y/N]" "1" "restore" "-s"
      if printf_answer_yes "$restore"; then
        printf_read_input "2" "Enter backupname:" "200" "latest_backup" "-e "
        latest_backup_short="${latest_backup/$_BACKUPDIR\//}"
        if __restorecmd; then
          printf_pause 2 "Restore of $latest_backup_short was successful"
        else
          printf_pause 1 "Failed to restore $latest_backup_short"
          false
        fi
      fi
    fi
  else
    printf_pause "Couldn't find any backups in $_BACKUPDIR/$_APPNAME"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__backup() {
  local e err appname appdir
  local _APPNAME="${_APPNAME:-$BACKUPAPP_PROJECTNAME}"
  local _APPDIRS="${_APPDIRS:-$BACKUPAPP_PROJECTDIRS}"
  local appname="${1:-$_APPNAME}"
  shift 1
  local appdir="${*:-$_APPDIRS}"
  shift $#
  local logdir="${BACKUPAPP_LOG_DIR:-$HOME/.local/log/backups/apps}"
  local datefmt="%Y-%m-%d-%H-%M_%S"
  local curdate="$(date +"${BACKUPAPP_DATE_FORMAT:-$datefmt}")"
  local filenameformate="${BACKUPAPP_FILENAME_FORMAT:-$curdate}"
  local logfilenameformat="${BACKUPAPP_LOGNAME_FORMAT:-$curdate}"
  local logfilenameextension="${BACKUPAPP_LOGFILE_EXTENSION:-log}"
  local backupdir="${BACKUPAPP_BACKUPAPPS_DIR:-$HOME/.local/backups/apps}"
  local notifyEnabled="${BACKUPAPP_NOTIFY_ENABLED:-yes}"
  local leaveCount="${BACKUPAPP_KEEP_AMOUNT:-14}"
  local icon_good="${BACKUPAPP_BICON_GOOD:-üÜó}"
  local icon_warn="${BACKUPAPP_BICON_WARN:-‚ö†Ô∏è}"
  local icon_error="${BACKUPAPP_BICON_ERROR:-‚úñ}"
  local filename="$appname-$filenameformate.tar.gz"
  local logname="$appname-$logfilenameformat.$logfilenameextension"
  local logname_err="$appname-$logfilenameformat.err"
  [ "$notifyEnabled" = "yes" ] && __notifications "$icon_warn" "Initializing backup of $appname"
  __execute "sleep 3" "Initializing"
  __mkd "$backupdir" "$logdir"
  for e in $appdir; do [ -e "$e" ] || err="$e"; done
  if [ -n "$err" ]; then
    [ "$notifyEnabled" = "yes" ] && __notifications "$icon_error" "Can't back up: $err doesn't exists"
    printf_error "Can't back up: $err doesn't exists"
    return 1
  fi
  shift
  printf_header " # Started on $(date +'%A, %B %d, %Y %H:%M:%S')" "# Backing up $appdir" >>"$logdir/$logname" >>"$logdir/$logname"
  if [ -t 0 ]; then
    __execute "__backupcmd" "Backing up $appname to $backupdir"
    exitCode=$?
  else
    __backupcmd
    exitCode=$?
  fi
  printf_header " #Ended on $(date +'%A, %B %d, %Y %H:%M:%S')" >>"$logdir/$logname"
  printf_newline "\n\n" >>"$logdir/$logname"
  if [ "$exitCode" = 0 ]; then
    printf_green "$icon_good The backup has completed successfuly and Saved to:"
    printf_green "$icon_good $backupdir/$filename"
    [ "$notifyEnabled" = "yes" ] && __notifications "$icon_good" "Backup of $appname has completed"
  else
    printf_red "$icon_error The backup has failed to complete."
    printf_red "$icon_error More information can be found in the log file:"
    printf_exit "$icon_warn $logdir/$logname"
    [ "$notifyEnabled" = "yes" ] && __notifications "$icon_error" "Backup of $appname has failed"
  fi
  logfileCount=$(ls $logdir/$appname*.$logfilenameextension 2>/dev/null | wc -l 2>/dev/null)
  logremoveoldbackups=$(ls $logdir/$appname*.$logfilenameextension 2>/dev/null)
  fileCount=$(ls $backupdir/$appname*.tar.gz 2>/dev/null | wc -l 2>/dev/null)
  removeoldbackups=$(ls $backupdir/$appname*.tar.gz 2>/dev/null)
  tailCount=$((fileCount - leaveCount))
  if [ "$fileCount" -gt "$leaveCount" ] && [ $leaveCount -ne 0 ]; then
    [ -z "$leaveCount" ] || ls -t $removeoldbackups | tail -$tailCount 2>/dev/null | xargs rm -f
    [ -z "$leaveCount" ] || ls -t $logremoveoldbackups | tail -$tailCount 2>/dev/null | xargs rm -f
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__find() { find "${1:-$_BACKUPDIR}" -iname "${2:-2_APPNAME}*" 2>/dev/null | ${3:-tail -n1} | grep '^' || false; }
__restorecmd() { tar xfvz $latest_backup -C $_APPDIRS >>"$logdir/$logname" 2>>"$logdir/$logname.err" || return 1; }
__backupcmd() { tar cfzv "$backupdir/$filename" $appdir >>"$logdir/$logname" 2>>"$logdir/$logname_err" || return 1; }
__local_cron_add() { __setupcrontab "${3:-0 0 * * *}" "backupapp --yes $1 $2 >/dev/null 2>&1"; }
__local_cron_del() { __removecrontab "backupapp --yes $1 "; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
BACKUPAPP_DEFAULT_CONFIG_FILE="settings.conf"
BACKUPAPP_CONFIG_DIR="$HOME/.config/myscripts/backupapp"
BACKUPAPP_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/backupapp/backups"
BACKUPAPP_OPTIONS_DIR="$HOME/.local/share/myscripts/backupapp/options"
BACKUPAPP_CONFIG_FILE="${BACKUPAPP_CONFIG_FILE:-$BACKUPAPP_DEFAULT_CONFIG_FILE}"
BACKUPAPP_NOTIFY_ENABLED="yes"
BACKUPAPP_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
BACKUPAPP_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$BACKUPAPP_NOTIFY_CLIENT_ICON}"
BACKUPAPP_LOG_DIR="$HOME/.local/log/backups/apps"
BACKUPAPP_BACKUPAPPS_DIR="$HOME/.local/backups/apps"
BACKUPAPP_KEEP_AMOUNT="14"
BACKUPAPP_LOGFILE_EXTENSION="log"
BACKUPAPP_DATE_FORMAT="%Y-%m-%d-%H-%M_%S"
BACKUPAPP_FILENAME_FORMAT="$(date +"$DATEFORMAT")"
BACKUPAPP_LOGNAME_FORMAT="$(date +"$DATEFORMAT")"
BACKUPAPP_BICON_GOOD="üÜó"
BACKUPAPP_BICON_WARN="‚ö†Ô∏è"
BACKUPAPP_BICON_ERROR="‚úñ"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="${*}"
SHORTOPTS="c,v,h,t"
LONGOPTS="options,config,version,help,term,cron:"
ARRAY=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$BACKUPAPP_CONFIG_DIR/$BACKUPAPP_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$BACKUPAPP_OPTIONS_DIR/options" ] || __list_options "$BACKUPAPP_OPTIONS_DIR" &>/dev/null
[ -f "$BACKUPAPP_OPTIONS_DIR/array" ] || __list_array "$BACKUPAPP_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
name="${1:-}.conf"
if [ -f "$BACKUPAPP_CONFIG_DIR/${name:-$BACKUPAPP_CONFIG_FILE}" ]; then
  BACKUPAPP_CONFIG_FILE="$name"
  . "$BACKUPAPP_CONFIG_DIR/${name:-$BACKUPAPP_CONFIG_FILE}"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$PROG" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$BACKUPAPP_OPTIONS_DIR" "$ARRAY"
    __list_options "$BACKUPAPP_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config "${BACKUPAPP_CONFIG_FILE}"
    exit $?
    ;;
  -t | --term)
    shift 1
    TERMAIL_APP="true"
    ;;
  *-cron)
    shift 1
    CRON_OPTS="$1"
    shift 1
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${BACKUPAPP_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${BACKUPAPP_NOTIFY_CLIENT_ICON}"
if [ "$BACKUPAPP_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
mkdir -p "$BACKUPAPP_LOG_DIR" "$BACKUPAPP_BACKUPAPPS_DIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications
cmd_exists --error bash tar || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
if [ -n "$TERMAIL_APP" ]; then __term; fi
case $1 in
cron)
  __mkd "$BACKUPAPP_CONFIG_DIR/cron"
  #cron case 2
  case "${2:-$CRON_OPTS}" in
  all)
    shift 1
    if [ "$(__count_files "$BACKUPAPP_CONFIG_DIR/cron/")" -ne 0 ]; then
      for cronjob in $(ls "$BACKUPAPP_CONFIG_DIR/cron/"); do
        . "$BACKUPAPP_CONFIG_DIR/cron/$cronjob"
        if [ -n "${_APPNAME:-$BACKUPAPP_PROJECTNAME}" ] && [ -n "${_APPNAME:-$BACKUPAPP_PROJECTNAME}" ]; then
          echo "Backup up $cronjob"
          __backup "${_APPNAME:-$BACKUPAPP_PROJECTNAME}" "${_APPDIRS:-$BACKUPAPP_PROJECTDIRS}" >/dev/null 2>&1
          exitCode=$?
          sleep 3
          if [ "$exitCode" = 0 ]; then echo "Backup up of $cronjob has completed"; else echo "Backup up of $cronjob has failed"; fi
        fi
        unset _APPNAME _APPDIRS BACKUPAPP_PROJECTNAME BACKUPAPP_PROJECTDIRS
      done
    else
      printf_exit 0 1 "No files were found"
    fi
    ;;
  list)
    shift 1
    if crontab -l | grep -qF "backupapp "; then
      printf_red "You don't have any jobs enabled"
    else
      printf_green "current cron jobs for backupapp"
      crontab -l | grep -F "backupapp " | printf_readline "4"
    fi
    exit
    ;;
  add)
    shift 1
    if [ $# -gt 1 ]; then
      __local_cron_add "$1" "$2" "$3"
      #if [ "$(crontab -l | grep -q "$*" 2>/dev/null)" ]; then
      printf_green "$1 $2 has been added to your cron jobs"
      #else
      #  printf_red "failed to add $1 $2"
      #fi
    else
      printf_custom "4" 'Usage: backupapp cron --add "Backupname" "BackupDir" "Frequency" | default nightly at midnight'
      printf_custom "4" 'Example: backupapp cron --add "Documents" "$HOME/Documents" "0 0 * * *"'
    fi
    exit $?
    ;;
  del)
    shift 1
    if [ $# -lt 2 ]; then
      __local_cron_del "$1" "$2"
      #if [ "$(crontab -l | grep -qv "$*" 2>/dev/null)" ]; then
      printf_green "$1 $2 has been removed from your cron jobs"
      #else
      #  printf_red "failed to delete $1 $2"
      #fi
    else
      printf_help 'Usage: backupapp cron --del "Backupname" "BackupDir"'
    fi
    exit $?
    ;;
  *)
    printf_custom "4" 'Usage: backupapp cron --add "Backupname" "BackupDir"'
    printf_custom "4" 'Usage: backupapp cron --del "Backupname" "BackupDir"'
    exit
    ;;
  esac
  ;;
  # end cron
*)
  if [ -f "$BACKUPAPP_CONFIG_DIR/${1}.conf" ] && [ "$#" -lt 2 ] &&
    [ "$BACKUPAPP_CONFIG_FILE" != "$BACKUPAPP_DEFAULT_CONFIG_FILE" ]; then
    [ "$YN" = "Y" ] || printf_read_question_nt "6" "I found a settings file for $1: Should I use that?" "1" YN "-s"
    if printf_answer_yes "$YN"; then
      . "$BACKUPAPP_CONFIG_DIR/${1}.conf"
      if [ -n "${_APPNAME:-$BACKUPAPP_PROJECTNAME}" ] && [ -n "${_APPDIRS:-$BACKUPAPP_PROJECTDIRS}" ]; then
        __backup "${_APPNAME:-$BACKUPAPP_PROJECTNAME}" "${_APPDIRS:-$BACKUPAPP_PROJECTDIRS}"
      else
        [ -n "${_APPNAME:-$BACKUPAPP_PROJECTNAME}" ] || printf_return 1 1 "Could get the settings for _APPNAME/PROJECTNAME"
        [ -n "${_APPDIRS:-$BACKUPAPP_PROJECTNAME}" ] || printf_return 1 1 "Could get the settings for _APPDIRS/PROJECTDIRS"
        exit $?
      fi
    elif [ "$#" -gt 1 ]; then
      _APPNAME="$1" && shift 1
      _APPDIRS="$*" && shift
      __backup "${_APPNAME:-$BACKUPAPP_PROJECTNAME}" "${_APPDIRS:-$BACKUPAPP_PROJECTDIRS}"
    else
      __help
    fi
  elif [ "$#" -gt 1 ]; then
    _APPNAME="$1" && shift 1
    _APPDIRS="$*" && shift
    __backup "${_APPNAME:-$BACKUPAPP_PROJECTNAME}" "${_APPDIRS:-$BACKUPAPP_PROJECTDIRS}"
  else
    __help
  fi
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit "${exitCode:-$?}"
