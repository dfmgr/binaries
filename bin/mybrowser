#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 010920210727-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : mybrowser
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : setup browser
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Set functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

create_link() {
  case "$1" in
  *)
    if [ ! -z "$2" ]; then
      shift 1
      if __cmd_exists "$1"; then
        printf_green "Linking $HOME/.local/bin/mybrowser to $1"
        __ln_sf "$(command -v $1)" "$HOME/.local/bin/mybrowser"
        exit 0
      else
        printf_green "Linking $HOME/.local/bin/mybrowser to $BROWSER"
        __ln_sf "$BROWSER" "$HOME/.local/bin/mybrowser"
        exit 0
      fi
    fi
    ;;
  esac
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#if [ -z "$BROWSER" ]; then
if [ -f "$(command -v garcon-url-handler 2>/dev/null)" ]; then
  export BROWSER="garcon-url-handler --url"
elif [ -f "$(command -v firefox 2>/dev/null)" ]; then
  export BROWSER="firefox"
elif [ -f "$(command -v chromium 2>/dev/null)" ]; then
  export BROWSER="chromium"
elif [ -f "$(command -v google-chrome 2>/dev/null)" ]; then
  export BROWSER="google-chrome"
elif [ -f "$(command -v opera 2>/dev/null)" ]; then
  export BROWSER="opera"
elif [ -f "$(command -v epiphany-browser 2>/dev/null)" ]; then
  export BROWSER="epiphany-browser"
elif [ -f "$(command -v falkon 2>/dev/null)" ]; then
  export BROWSER="falkon"
elif [ -f "$(command -v midori 2>/dev/null)" ]; then
  export BROWSER="midori"
elif [ -f "$(command -v netsurf 2>/dev/null)" ]; then
  export BROWSER="netsurf"
elif [ -f "$(command -v surf 2>/dev/null)" ]; then
  export BROWSER="surf"
elif [ -f "$(command -v arora 2>/dev/null)" ]; then
  export BROWSER="arora"
elif [ -f "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" ]; then
  export BROWSER="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
elif [ -f "/Applications/Firefox.app/Contents/MacOS/firefox-bin" ]; then
  export BROWSER="/Applications/Firefox.app/Contents/MacOS/firefox-bin"
elif [ -f "$(command -v lynx 2>/dev/null)" ]; then
  export BROWSER="lynx"
elif [ -f "$(command -v links 2>/dev/null)" ]; then
  export BROWSER="links"
fi
#fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

[ -n "$BROWSER" ] || printf_help "No browsers are installed"
[ "$1" = "--create" ] && create_link "$@"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$HOME/.local/bin/mybrowser" ]; then
  __devnull2 ~/.local/bin/mybrowser "$@"
else
  __devnull2 $BROWSER "$@"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
