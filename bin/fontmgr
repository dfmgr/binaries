#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202103310710-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap '[ -f "$FONTMGR_TMP_FILE" ] && rm -Rf "$FONTMGR_TMP_FILE" &>/dev/null' EXIT

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103310710-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : fontmgr --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Wednesday, Mar 31, 2021 07:10 EDT
# @File          : fontmgr
# @Description   : Install system fonts
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
fontmgr_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$FONTMGR_CONFIG_DIR/$FONTMGR_CONFIG_FILE"
  [ -d "$FONTMGR_CONFIG_DIR" ] || mkdir -p "$FONTMGR_CONFIG_DIR"
  [ -d "$FONTMGR_CONFIG_BACKUP_DIR" ] || mkdir -p "$FONTMGR_CONFIG_BACKUP_DIR"
  [ -f "$FONTMGR_CONFIG_DIR/$FONTMGR_CONFIG_FILE" ] &&
    cp -Rf "$FONTMGR_CONFIG_DIR/$FONTMGR_CONFIG_FILE" "$FONTMGR_CONFIG_DIR/$FONTMGR_CONFIG_FILE.$$"
  cat <<EOF >"$FONTMGR_CONFIG_DIR/$FONTMGR_CONFIG_FILE"
# Settings for fontmgr
FONTMGR_FORCE_INSTALL="false"
FONTMGR_TEMP_FILE="${TMPDIR:-/tmp}/fontmgr"
FONTMGR_NOTIFY_ENABLED="yes"
FONTMGR_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
FONTMGR_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$FONTMGR_NOTIFY_CLIENT_ICON}"

EOF
  if [ -f "$FONTMGR_CONFIG_DIR/$FONTMGR_CONFIG_FILE" ]; then
    printf_green "Your config file for fontmgr has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
FONTMGR_CONFIG_FILE="settings.conf"
FONTMGR_CONFIG_DIR="$HOME/.config/myscripts/fontmgr"
FONTMGR_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/fontmgr/backups"
FONTMGR_OPTIONS_DIR="$HOME/.local/share/myscripts/fontmgr/options"
FONTMGR_TEMP_FILE="${TMPDIR:-/tmp}/fontmgr"
FONTMGR_NOTIFY_ENABLED="yes"
FONTMGR_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
FONTMGR_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$FONTMGR_NOTIFY_CLIENT_ICON}"
FONTMGR_FORCE_INSTALL="false"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="${*}"
SHORTOPTS="c,v,h,f"
LONGOPTS="options,config,version,help,force"
ARRAY=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$FONTMGR_CONFIG_DIR/$FONTMGR_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$FONTMGR_OPTIONS_DIR/options" ] || __list_options "$FONTMGR_OPTIONS_DIR" &>/dev/null
[ -f "$FONTMGR_OPTIONS_DIR/array" ] || __list_array "$FONTMGR_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$FONTMGR_CONFIG_DIR/$FONTMGR_CONFIG_FILE" ]; then
  . "$FONTMGR_CONFIG_DIR/$FONTMGR_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$PROG" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$FONTMGR_OPTIONS_DIR" "$ARRAY"
    __list_options "$FONTMGR_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  -f | --force)
    shift 1
    export FORCE_INSTALL="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${FONTMGR_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${FONTMGR_NOTIFY_CLIENT_ICON}"
if [ "$FONTMGR_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
FORCE_INSTALL="${FORCE_INSTALL:-$FONTMGR_FORCE_INSTALL}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
help | -*)
  __help
  ;;
makecache)
  generate_font_index "$@"
  ;;
list)
  __listfonts
  ;;
search)
  shift 1
  run_install_search "$@"
  ;;
available)
  shift 1
  run_install_available
  ;;
remove)
  shift 1
  printf_green "Removing the fonts from $APPDIR"
  unset APPNAME
  declare -a LISTARRAY="$*"
  for rmf in ${LISTARRAY[*]}; do
    APPNAME="$rmf"
    installer_delete "$APPNAME"
    echo ""
  done
  __ln_rm "$FONTDIR/"
  ;;
update)
  shift 1
  unset APPNAME
  if [ $# -ne 0 ]; then
    if [ "$1" = "--all" ]; then shift 1 && declare -a LISTARRAY="$LIST"; else declare -a LISTARRAY="$*"; fi
    for ins in ${LISTARRAY[*]}; do
      run_install_update "$ins"
    done
  elif [[ -d "$USRUPDATEDIR" && -n "$(ls -A $USRUPDATEDIR 2>/dev/null)" ]]; then
    for upd in $(ls $USRUPDATEDIR 2>/dev/null); do
      run_install_update "$upd"
    done
  else
    printf_yellow "There doesn't seem to be any packages installed"
  fi
  exit $?
  ;;
install)
  shift 1
  unset APPNAME
  if [ $# -eq 0 ]; then
    fontmgr update
  else
    [ "$1" = "--all" ] && shift 1 && declare -a LISTARRAY="$LIST" || declare -a LISTARRAY="$*"
    for ins in ${LISTARRAY[*]}; do
      run_install_init "$ins"
    done
  fi
  exit $?
  ;;
cron)
  shift 1
  cron_updater "$@"
  ;;
version)
  shift 1
  run_install_version "$@"
  ;;
*)
  __help
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit "${exitCode:-$?}"
