#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103201925-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : tasks --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 19:25 EDT
# @File          : tasks
# @Description   : wrapper for tash
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__requires tash sqlite3 #|| printf_exit "1" "1" "This requires sqlite3"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tash() { tash "$@" | printf_readline "3"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case "$1" in

add)
  shift 1
  if [ $# -ne 0 ]; then
    __tash add "$*"
  else
    printf_read_question "4" "What is the name of your Project?" "120" "PROJECT"
    printf_read_question "4" 'What is your projects description?' "120" "PARAM"
    __tash add "@$PROJECT" "$PARAM"
  fi
  ;;

delete | remove | rm)
  shift 1
  if [ $# -ne 0 ]; then
    __tash delete "$*"
  else
    printf_read_question "4" "What task would you like to delete?" "120" "TASK_NUM"
    echo y | __tash delete "$TASK_NUM $PARAM"
  fi
  ;;

start)
  shift 1
  if [ $# -ne 0 ]; then
    __tash start "$*"
  else
    printf_read_question "4" "What task would you like to start?" "120" "TASK_NUM"
    __tash start "$TASK_NUM"
  fi
  ;;

stop)
  shift 1
  if [ $# -ne 0 ]; then
    __tash stop "$*"
  else
    printf_read_question "4" "What task would you like to stop?" "120" "TASK_NUM"
    __tash stop "$TASK_NUM" "$PARAM"
  fi
  ;;

switch | sw)
  shift 1
  if [ $# -ne 0 ]; then
    __tash switch "$*"
  else
    printf_read_question "4" "What task would you like to switch to?" "120" "TASK_NUM"
    __tash switch "$TASK_NUM" "$PARAM"
  fi
  ;;

session)
  shift 1
  if [ $# -ne 0 ]; then
    __tash session "$*"
  else
    printf_read_question "4" "What is the duration?" "120" "PARAM"
    printf_read_question "4" "What task would you like to set?" "120" "TASK_NUM"
    __tash session "$TASK_NUM" "$PARAM"
  fi
  ;;

done)
  shift 1
  if [ $# -ne 0 ]; then
    __tash done "$*"
  else
    printf_read_question "4" "What task would you like to mark as done?" "120" "TASK_NUM"
    __tash done "$TASK_NUM" "$PARAM"
  fi
  ;;

info)
  shift 1
  if [ $# -ne 0 ]; then
    __tash info "$*"
  else
    printf_read_question "4" "What task number would you like info on?" "120" "TASK_NUM"
    __tash info "$TASK_NUM"
  fi
  ;;

report)
  shift 1
  if [ $# -ne 0 ]; then
    __tash report "$*"
  else
    printf_read_question "4" "What task woul you like the report on?" "120" "PARAM"
    __tash report "$PARAM"
  fi
  ;;

list)
  shift 1
  if [ $# -ne 0 ]; then
    __tash list "$*"
  else
    __tash list "$PARAM"
  fi
  ;;

clean | cleanup)
  shift 1
  __tash clean
  ;;

help | "-?" | -h)
  shift 1
  __help
  ;;

*)
  __tash
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End
