#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="notes"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 020720210101-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : notes --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Sunday, Feb 07, 2021 01:01 EST
# @File          : notes
# @Description   : Take notes using bash
# @TODO          : Refactor code
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Default variables
NOTES_NOTIFY="yes"
NOTES_TMPDIR="${TMP:-/tmp}"
NOTES_FOLDER="$(date +%Y)"
NOTES_FILE="$(date +%m).txt"
NOTES_PREV_MONTH="$(date --date="1 Month Ago" +%m).txt"
NOTES_DIRECTORY="${NOTES_DIRECTORY:-"$HOME/.local/share/editors/notes"}"
NOTES_EDITOR="${NOTES_EDITOR:-vim}"
NOTES_SERVER_NAME="${NOTES_SERVER_NAME:-localhost}"
NOTES_SERVER_PORT="${NOTES_SERVER_PORT:-65000}"
NOTES_SERVER_DIRECTORY="$NOTES_DIRECTORY"
NOTES_LOG_FILE="${NOTES_TMPDIR}/notes_server.log"
NOTES_TMP_FILE="$(mktemp $NOTES_TMPDIR/notes.XXXXXX.txt 2>/dev/null)"
NOTES_PATH="$NOTES_DIRECTORY/$NOTES_FOLDER/$NOTES_FILE"
NOTES_SERVER_PATH="$NOTES_SERVER_DIRECTORY/$NOTES_FOLDER/$NOTES_FILE"
NOTES_PREV_FILE="$NOTES_SERVER_DIRECTORY/$NOTES_FOLDER/$NOTES_PREV_MONTH"
NOTES_NOTIFY="${NOTES_NOTIFY:-yes}"

# Import settings
[ -f "$HOME/.config/notes/config" ] && . "$HOME/.config/notes/config"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Tmux config
if [ ! -f "$NOTES_DIRECTORY/tmux.conf" ]; then
  __mkd "$NOTES_DIRECTORY"
  cat <<EOF >"$NOTES_DIRECTORY/tmux.conf"
# Very basic tmux config
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
setw -g monitor-activity off
set -g bell-action none
setw -g clock-mode-colour colour5
setw -g mode-style 'fg=colour1 bg=colour18 bold'
set -g pane-border-style 'fg=colour19 bg=colour0'
set -g pane-active-border-style 'bg=colour0 fg=colour9'
set -g status-position bottom
set -g status-justify left
set -g status-style 'bg=colour18 fg=colour137 dim'
set -g status-left ''
set -g status-right '#[fg=colour233,bg=colour19] %m/%d #[fg=colour233,bg=colour8] %H:%M:%S '
set -g status-right-length 50
set -g status-left-length 20
setw -g window-status-current-style 'fg=colour1 bg=colour19 bold'
setw -g window-status-current-format ' #I#[fg=colour249]:#[fg=colour255]#W#[fg=colour249]#F '
setw -g window-status-style 'fg=colour9 bg=colour18'
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
setw -g window-status-bell-style 'fg=colour255 bg=colour1 bold'
set -g message-style 'fg=colour232 bg=colour16 bold'
EOF
fi

_notifications() { [ "$NOTES_NOTIFY" = "yes" ] && notifications "$@"; }

# Generate config file
gen_config() {
  __mkd "$HOME/.config/notes"
  echo 'NOTES_FOLDER="$(date +%Y)"
NOTES_FILE="$(date +%m).txt"
NOTES_TMPDIR="'${TMP:-/tmp}'"
NOTES_DIRECTORY="'${NOTES_DIRECTORY:-"$HOME/.local/share/editors/notes"}'"
NOTES_EDITOR="'${NOTES_EDITOR:-vim}'"
NOTES_SERVER_NAME="'${NOTES_SERVER_NAME:-localhost}'"
NOTES_SERVER_PORT="'${NOTES_SERVER_PORT:-65000}'"
NOTES_SERVER_DIRECTORY="'${NOTES_DIRECTORY}'"
NOTES_LOG_FILE="'${NOTES_TMPDIR}/notes_server.log'"
NOTES_TMP_FILE="$(mktemp ${NOTES_TMPDIR}/notes.XXXXXX.txt 2>/dev/null)"
NOTES_PATH="${NOTES_DIRECTORY}/${NOTES_FOLDER}/${NOTES_FILE}"
NOTES_SERVER_PATH="${NOTES_SERVER_DIRECTORY}/${NOTES_FOLDER}/${NOTES_FILE}"
NOTES_NOTIFY="${NOTES_NOTIFY:-yes}"
' >"$HOME/.config/notes/config"
}

# SystemD service file
systemd_service() {
  if [ -f "$HOME/.config/autostart/notes-server.desktop" ]; then
    printf_exit 1 1 "User autostart is enabled"
  fi
  [ -f "$1" ] && sudo rm -Rf "$1"
  echo '
[Unit]
Description=Notes Server
After=network.target

[Service]
#Type=simple
Type=dbus
Restart=always
RestartSec=5
KillMode=mixed
User='${USER:-daemon}'
Group='${USER:-daemon}'

Environment=HOME='${HOME}'
Environment=TERM='${TERM:-linux}'
Environment=NOTES_TMPDIR='${TMP:-/tmp/notes_server}'
Environment=NOTES_DIRECTORY='${HOME}/.local/share/editors/notes'
Environment=NOTES_LOG_FILE='${NOTES_TMPDIR}/notes_server.log'
Environment=NOTES_SERVER_NAME="$(hostname -f)"
Environment=NOTES_SERVER_PORT=65000
Environment=NOTES_TMP_FILE="$(mktemp $NOTES_TMPDIR/notes.XXXXXX.txt 2>/dev/null)"
Environment=NOTES_NOTIFY="'${NOTES_NOTIFY:-yes}'"

ExecStartPre=/usr/local/bin/notes server systemd run vars
ExecStopPost=/usr/bin/rm -Rf "$NOTES_TMPDIR $NOTES_LOG_FILE"
ExecStop=/usr/local/bin/notes server systemd run stop
ExecStart=/usr/local/bin/notes server systemd run start
ExecReload=/usr/local/bin/notes server systemd run restart
TimeoutSec=20
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
' | sudo tee "$1" &>/dev/null
}

# Enable user autostart
__server_enable() {
  if __system_service_exists notes_server.service; then
    printf_exit 1 1 "$ICON_WARN systemd service already exists"
  fi
  printf_green "Enabling the Notes Server on port $NOTES_SERVER_PORT"
  cat <<EOF >"$HOME/.config/autostart/notes-server.desktop"
#!/usr/bin/env xdg-open

[Desktop Entry]
Version=1.1
Type=Application
Name=Notes Server
GenericName=NotesServer
Comment=Start Notes Server.
Icon=geany
Exec=notes server start &
Path=~
Terminal=false
Actions=
Categories=System;Development;GTK;X-XFCE;GNOME;
Keywords=notes;server;
StartupNotify=true
EOF
  notes server start
  [ $? = 0 ] && printf_green "notes server has been installed for $USER" ||
    printf_error 1 1 "$ICON_WARN Failed to install the notes server for $USER"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Netcat fix
netcat="$(command -v nc 2>/dev/null || command -v netcat 2>/dev/null)"
__netcat_test() { __cmd_exists $netcat || printf_exit "The program netcat is not installed"; }
__nc_send() { $netcat -c $1 $2 2>>"$NOTES_LOG_FILE" && true || $netcat -w 1 $1 $2 2>>"$NOTES_LOG_FILE" || return 1; }
__local() { if [ "$NOTES_SERVER_NAME" = "$(hostname -f)" ] || [ "$NOTES_SERVER_NAME" = "localhost" ]; then return 1; else return 0; fi; }
__notes() { eval tmux -f "${NOTES_DIRECTORY}/tmux.conf" new-session -D -A -s notes "vim ${1:-$NOTES_PATH}" &>/dev/null || return 1; }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sync_tmp() {
  local _NOTESP="${1:-$NOTES_PATH}"
  local _TPATH="${2:-$_PATH}"
  shift
  if [ -n "$_TPATH" ]; then cat "$_NOTESP" "$_TPATH" >"$NOTES_TMPDIR/notes_cli.tmp" && __mv_f "$NOTES_TMPDIR/notes_cli.tmp" "$_NOTESP"; fi
  [ -f "$NOTES_DIRECTORY/all.txt" ] && __sync_all && echo synced >>"$NOTES_LOG_FILE"
}

__sync_all() {
  local exitCode=0
  local _NOTESP=${1:-$NOTES_PATH}
  local _NOTESA="${2:-$NOTES_DIRECTORY/all.txt}"
  local _NOTES_TMPFILE="${NOTES_TMPDIR:-/tmp}/notes.$$.tmp"
  local _ARCHIVE="$NOTES_DIRECTORY/archive/$(date +"%y-%m-%d")"
  [ -f "$_NOTESA" ] || touch "$_NOTESP"
  [ -f "$_NOTESA" ] || cat "$_NOTESP" | tee "$_NOTESA" &>/dev/null
  #cat "$_NOTESP" "$_NOTESA" | sort -u | sed '/^\#/d;/^$/d' >"$_NOTES_TMPFILE" || local exitCode=1
  if [ "$all" = "true" ]; then
    [ "$show" = "true" ] && printf_green "Archiving ${_NOTESA/$NOTES_DIRECTORY\//} to ${_ARCHIVE/$NOTES_DIRECTORY\//}"
    __mkd "$NOTES_DIRECTORY/archive"
    __cp_rf $_NOTESA "$_ARCHIVE"
    __cp_rf "$_NOTESA" "$_NOTESA.tmp"
    [ "$show" = "true" ] && printf_green "Syncing */*.txt to ${_NOTESA/$NOTES_DIRECTORY\//}"
    cat "$NOTES_DIRECTORY"/*/*.txt "$_NOTESA.tmp" | sed '/^\#/d;/^$/d' | sort -u | tee "$_NOTES_TMPFILE" &>/dev/null || local exitCode=1
  else
    [ "$show" = "true" ] && printf_green "Syncing ${_NOTESP/$NOTES_DIRECTORY\//} notes to ${_NOTESA/$NOTES_DIRECTORY\//}"
    cat "$_NOTESP" "$_NOTESA" | sed '/^\#/d;/^$/d' | sort -u | tee "$_NOTES_TMPFILE" &>/dev/null || local exitCode=1
  fi
  if [ -f "$_NOTES_TMPFILE" ]; then
    echo "### All Active notes as of $(date)" >"$_NOTESA" && cat "$_NOTES_TMPFILE" >>"$_NOTESA" || local exitCode=1
  fi
  __rm_rf "$_NOTES_TMPFILE" "$_NOTESA.tmp"
  if [ "$show" = "true" ]; then [ "$exitCode" = 0 ] && printf_green "Sync completed" || printf_error 1 "Sync failed"; fi
  return "$exitCode"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Server function for user autostart
__server() {
  echo ""
  local _PORT="${NOTES_SERVER_PORT}"
  local _KILL="$NOTES_TMPDIR/kill_notes"
  local _TMPFILE="$(mktemp $NOTES_TMPDIR/notes.server.XXXXXXX.tmp 2>/dev/null)"
  __rm_rf "$_KILL" "$NOTES_LOG_FILE" "$NOTES_TMPDIR"
  __mkd "$NOTES_TMPDIR"
  __netcat_test
  netstatg "$_PORT" &>/dev/null && printf_exit "Already Running" || printf_green "Launching server on port $_PORT"
  _notifications "Notes Server" "Launching server on port $_PORT"
  echo "Starting notes server on port $_PORT" >"$NOTES_LOG_FILE"
  while :; do
    rm -Rf "$_TMPFILE"
    $netcat -l -p $_PORT >"$_TMPFILE"
    cat "$_TMPFILE" >>"${NOTES_PATH}" 2>>"$NOTES_LOG_FILE" || _notifications "Failed to commit the note"
    message="$(<"$_TMPFILE")"
    [ -z "$message" ] || echo "New note: $message" >>"$NOTES_LOG_FILE"
    [ -z "$message" ] || _notifications "New note" "$message\nPosted to: ${NOTES_PATH}"
    if [ -f "$_KILL" ]; then
      rm -Rf "$_KILL"
      echo "Notes server is shutting down" >>"$NOTES_LOG_FILE"
      _notifications "Notes Server" "Notes server is shutting down"
      break
    fi
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Server function for SystemD
__run_service() {
  local _PORT="${NOTES_SERVER_PORT}"
  local _PATH="${NOTES_TMP_FILE}"
  local NOTES_NOTIFY=${NOTES_NOTIFY:-yes}
  local DISPLAY="${DISPLAY:-:0.0}"
  kill -s KILL "$(netstatg $_PORT | awk '{print $7}' | head -n 1 | sed 's#/.*##g')" || true
  echo "Launching server on port $_PORT"
  echo "Starting notes server on port $_PORT" >"$NOTES_LOG_FILE"
  rm -Rf "$NOTES_TMPDIR/kill_notes"
  while :; do
    rm -Rf "$_PATH"
    $netcat -l -p "$_PORT" >"$_PATH"
    cat "$_PATH" >>"${NOTES_PATH}" 2>>"$NOTES_LOG_FILE" || echo "Failed to commit the note"
    echo "New note: $(cat $_PATH) in ${NOTES_PATH}"
    rm -Rf "$_PATH"
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Client function
__client() {
  __failed() {
    printf_red "failed to send message"
    return 1
  }
  local _SERVER="${NOTES_SERVER_NAME}"
  local _PORT=${NOTES_SERVER_PORT}
  local _PATH="$NOTES_TMP_FILE"
  __netcat_test
  printf_green "Attempting to send message to $_SERVER on $_PORT"
  printf "%s\n" "$*" >"${_PATH}" 2>>$NOTES_TMPDIR/notes_client
  cat "$_PATH" 2>>$NOTES_TMPDIR/notes_client | __nc_send "$_SERVER" "$_PORT" 2>>$NOTES_TMPDIR/notes_client || __failed
  if [ "$NOTES_NOTIFY" = "yes" ]; then
    [ $? = 0 ] && _notifications "New note" "$(cat $_PATH)\nPosted to: ${NOTES_PATH}" || _notifications "NotesCLI" "Sending of note failed"
  fi
  __local && __sync_tmp "$NOTES_PATH" "$_PATH"
  rm -Rf "$_PATH"
  return "$?"
}

# Import previous month notes
__import() {
  [ -f "$NOTES_PREV_FILE" ] && cat "$NOTES_PREV_FILE" | sed '/^\#/d;/^$/d' >>"${NOTES_PATH}" || return 1
  printf_green "Notes have been imported"
}

# sync to all.txt
__run_sync() {
  shift $#
  if __find_mtime "${NOTES_PATH}" "1"; then
    __sync_all "$NOTES_PATH" "$NOTES_DIRECTORY/all.txt" 2>/dev/null
    [ $? = 0 ] && _notifications "New note" "Posted to: ${NOTES_PATH}"
  fi
}

# list all notes
__list_all() {
  printf_custom "6" "all.txt"
  find ${NOTES_DIRECTORY}/*/* -type f -iname "*.txt" -not -path "${NOTES_DIRECTORY}/archive/*" | sed 's#'$NOTES_DIRECTORY/'##g' | sort -u | printf_readline "6"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup
mkdir -p "${NOTES_DIRECTORY}/$NOTES_FOLDER"
if [ ! -f "$NOTES_PREV_FILE" ]; then
  echo -e "## Notes for $(date --date="1 Month Ago" +%B) created on $(date --date="1 Month Ago" +"%D at %H:%M") ##\n" >"$NOTES_PREV_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Previous month
if [ ! -f "$NOTES_PATH" ]; then
  if [ -s "$NOTES_PATH" ]; then
    printf_red "Refusing to import old notes into an none empty file"
    printf_green "You can do it manually by running $APPNAME --import"
  else
    printf_green "Assuming its a new month or new install"
    echo -e "## Notes for $(date +%B) created on $(date +"%D at %H:%M") ##\n" >"${NOTES_PATH}"
    __import && sleep 3
  fi
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Manual import
case $1 in
--import)
  shift 1
  __import
  exit $?
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
case "$1" in
*server | *service)
  if [ "$2" = "--help" ]; then shift 1 && printf_help 'Usage: notes server  |  Start the server'; fi
  if [ "$2" = "--status" ]; then
    shift 1
    if netstatg "$NOTES_SERVER_PORT"; then
      netstatg "$NOTES_SERVER_PORT" 2>/dev/null | printf_readline
    else printf_exit 1 1 "$ICON_ERROR The notes server is not running"; fi
    exit $?
  fi
  if [ "$2" = "--kill" ]; then
    printf_red "Starting shutdown"
    shift 1
    touch "$NOTES_TMPDIR/kill_notes"
    __netcat_kill_server "$NOTES_SERVER_PORT" "printf_green" "printf_red"
    #kill -s 9 "$(netstatg $NOTES_SERVER_PORT | awk '{print $7}' | head -n 1 | sed 's#/.*##g')" || true
    exit $?
  fi

  # begin systemd 2 deep
  case "$2" in
  *systemd)
    shift 1
    case $2 in
    *install)
      shift 2
      NOTES_DIRECTORY="$NOTES_SERVER_DIRECTORY"
      systemd_service "/etc/systemd/system/notes_server.service" &&
        __devnull sudo systemctl daemon-reload &&
        __devnull sudo systemctl start notes_server &&
        __devnull sudo systemctl enable -f notes_server && printf_green "Service has been created" || printf_red "Failed to create service"
      ;;
    *remove)
      shift 2
      __system_service_exists notes_server.service || printf_exit 1 0 "Notes server is not installed"
      __devnull sudo systemctl disable -f notes_server &&
        __devnull sudo systemctl daemon-reload &&
        __rm_rf /etc/systemd/system/notes_server.service && printf_green "Service has been deleted" || printf_red "Failed to delete service"
      ;;
    *-start)
      shift 2
      __system_service_exists notes_server.service || printf_exit 2 0 "Notes server is not installed"
      __devnull sudo systemctl start notes_server && printf_green "Service has been started" || printf_red "Failed to start service"
      ;;
    *stop)
      shift 2
      __system_service_exists notes_server.service || printf_exit 2 0 "Notes server is not installed"
      __devnull sudo systemctl stop notes_server && printf_green "Service has been stopped" || printf_red "Failed to stop service"
      ;;
    *restart)
      shift 2
      __system_service_exists notes_server.service || printf_exit 2 0 "Notes server is not installed"
      __devnull sudo systemctl restart notes_server && printf_green "Service has been restarted" || printf_red "Failed to restart service"
      ;;
    *run) # SystemD run
      case $3 in
      *vars)
        shift 3
        __system_service_exists notes_server.service && printf_exit 2 0 "Notes server is not installed"
        export NOTES_NOTIFY NOTES_FOLDER NOTES_FILE NOTES_TMPDIR NOTES_DIRECTORY NOTES_EDITOR NOTES_PATH
        export NOTES_SERVER_NAME NOTES_SERVER_PORT NOTES_SERVER_DIRECTORY NOTES_LOG_FILE NOTES_TMP_FILE NOTES_SERVER_PATH
        ;;
      *stop)
        __system_service_exists notes_server.service && printf_exit 2 0 "Notes server is not installed"
        shift 3
        touch "$NOTES_TMPDIR/kill_notes"
        __netcat_kill_server "$NOTES_SERVER_PORT"
        ;;
      *-start)
        __system_service_exists notes_server.service && printf_exit 2 0 "Notes server is not installed"
        shift 3
        opts="$*"
        __run_service "$opts" 2>>"$NOTES_LOG_FILE"
        ;;
      *restart)
        __system_service_exists notes_server.service && printf_exit 2 0 "Notes server is not installed"
        shift 3
        opts="$*"
        touch "$NOTES_TMPDIR/kill_notes"
        __netcat_kill_server "$NOTES_SERVER_PORT"
        __run_service "$opts" 2>>"$NOTES_LOG_FILE"
        ;;
      *)
        __system_service_exists notes_server.service && printf_exit 2 0 "Notes server is not installed"
        shift 2
        opts="$*"
        __run_service "$opts" 2>>"$NOTES_LOG_FILE"
        ;;
      esac
      ;;
    status | *)
      shift 2
      __system_service_exists notes_server.service || printf_exit 2 0 "Notes server is not installed"
      sudo systemctl status notes_server | printf_readline "255"
      ;;
    esac
    ;;
  # End Systemd

  *start)
    shift 1
    printf_green "Starting notes server for $USER"
    __server &>/dev/null
    sleep 3
    ;;

  *enable)
    __server_enable
    ;;

  *edit)
    shift 1
    if [ "$2" = prev ]; then
      ssh -qt "$NOTES_SERVER_NAME" notes open "$NOTES_PREV_FILE"
    elif [ "$2" = "all" ]; then
      ssh -qt "$NOTES_SERVER_NAME" notes all
    else ssh -qt "$NOTES_SERVER_NAME" notes; fi
    __run_sync
    ;;

  *)
    shift 1
    opts="$*"
    __server "$opts" 2>>"$NOTES_LOG_FILE"
    ;;
  esac
  ;;

*client)
  shift 1
  [ "$1" = "--help" ] && printf_help 'Usage: notes client "my message"  |  Send your notes to the server'
  [ -n "$NOTES_SERVER_NAME" ] || printf_help "Please set NOTES_SERVER_NAME variable to your server"
  if [ ${#} -eq 0 ]; then
    if [ -p "/dev/stdin" ]; then
      message="$(cat </dev/stdin)"
    fi
  else
    message="$*"
  fi
  __client "$message" 2>/dev/null
  ;;

*open)
  shift 1
  if [ "$1" = list ] || [ $# = 0 ]; then
    __list_all
  else
    if [ $1 = $NOTES_DIRECTORY/all.txt ] || [[ "$1" = */all* ]] || [[ "$1" = all ]]; then
      filename="$NOTES_DIRECTORY/all.txt"
    elif [[ "$1" = prev ]]; then
      filename="$NOTES_PREV_FILE"
    elif [[ "$1" = cur ]]; then
      filename="$NOTES_PATH"
    else
      filepath="$(__get_full_file "$1")"
      filename="$NOTES_DIRECTORY/${1//$NOTES_DIRECTORY/$filename}"
    fi
    __notes "$filename" 2>/dev/null
  fi
  __run_sync
  ;;

*all)
  shift 1
  __sync_all "${NOTES_PATH}" "${NOTES_DIRECTORY}/all.txt"
  __notes "${NOTES_DIRECTORY}/all.txt"
  ;;

*sync)
  shift 1
  [ "$1" = show ] && show=true && shift 1 || show=""
  [ "$1" = all ] && all=true && shift 1 || all=""
  __sync_all "${NOTES_PATH}" "${NOTES_DIRECTORY}/all.txt"
  ;;

*config)
  shift 1
  gen_config && printf_green "config file was created in ~/.config/notes/config"
  ;;

*show)
  shift 1
  [ -f "$NOTES_PATH" ] && cat "$NOTES_PATH" 2>/dev/null | printf_readline "7" || printf_exit ""
  ;;

*list)
  shift 1
  __list_all
  ;;

search)
  shift 1
  printf_green "Search results: "
  cat "$NOTES_DIRECTORY/all.txt" "$NOTES_PREV_FILE" "$NOTES_PATH" | grep -i "$1" 2>/dev/null | printf_readline "7" || printf_red "No results found"
  ;;

-)
  shift 1
  echo "Type your note, hit control-d when done"
  printf "%s\n" "$(</dev/stdin)" >>"${NOTES_PATH}"
  ;;

*)
  if [ ${#} -eq 0 ]; then
    if [ -p "/dev/stdin" ]; then
      (
        cat -
      ) >>"${NOTES_PATH}"
    else
      __notes
    fi
  else
    printf "%s\n" "${*}" >>"${NOTES_PATH}"
  fi
  __run_sync
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
