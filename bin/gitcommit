#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 010920210727-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : gitcommit
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : commit changes to current git repo
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check for needed applications
__check_app git
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# I'm sure there is a better way to do this
if [ -d "$1" ]; then
  MYCURRDIR="$1"
  shift 1
elif [ "$1" = "-d" ] || [ "$1" = "-dir" ] || [ "$1" = "--dir" ]; then
  MYCURRDIR="$2"
  shift 2
  [ -d "$MYCURRDIR" ] || printf_exit "$MYCURRDIR doesn't seem to be a directory"
else
  MYCURRDIR="$PWD"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$1" = "-m" ] || [ "$1" = "--m" ] || [ "$1" = "--mess" ] || [ "$1" = "--message" ]; then
  shift 1
  MESSAGE="$1"
  if [ -n "$2" ]; then
    newmess="$*"
  fi
else
  MESSAGE="$1"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
topdir="$(__git_top_dir $MYCURRDIR 2>/dev/null)"
gitdir="${topdir:-$MYCURRDIR}"
versionfile="$topdir/version.txt"
repo="$(__git_remote_fetch $MYCURRDIR)"

[ -n "$repo" ] || repo="localdir"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Functions
__git_push() {
  local push
  if [ "$repo" != "localdir" ]; then
    if [[ "$*" =~ --automated ]]; then
      printf_green "Pushing the changes to $repo"
      git -C "$gitdir" push -q >/dev/null 2>&1 && exitCode=0 || exitCode=1
      __getexitcode $exitCode "Successfully pushed the changes for commit ID: $(git -C "$gitdir" rev-parse --short HEAD)" "Failed to push the changes"
    else
      printf_read_question "3" "Should I push to $repo? [y/n]" "1" "push"
      if printf_answer_yes "$push"; then
        printf_green "Pushing the changes to $repo"
        git -C "$gitdir" push -q >/dev/null 2>&1 && exitCode=0 || exitCode=1
        __getexitcode $exitCode "Successfully pushed the changes for commit ID: $(git -C "$gitdir" rev-parse --short HEAD)" "Failed to push the changes"
      fi
    fi
  fi
  return $?
}
__version() {
  date +"%m%d%Y%H%M-git" >"$versionfile"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$(git -C "$gitdir" rev-parse --is-inside-work-tree 2>/dev/null)" == "" ]; then
  printf_error "You are not in a git repo"
  printf_read_question "4" "Would you like to turn $gitdir into a git repo? y/N" "1" "makerepo"
  if printf_answer_yes "$makerepo"; then
    gitadmin "$gitdir" setup
    exit $?
  else
    exit
  fi
fi

if [ ! -d "$gitdir" ]; then
  printf_exit "$gitdir doesn't seem to be a git repo"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
case "$MESSAGE" in
s | status)
  shift 1
  __git_status "$gitdir"
  exit $?
  ;;

l | log)
  shift 1
  __git_log "$gitdir"
  exit $?
  ;;

push)
  shift 1
  __git_push "$@"
  exit $?
  ;;

version)
  shift 1
  # if __git_porcelain "$gitdir"; then
  #   printf_red "There are no changes to commit"
  #   exit
  # fi
  __version
  versionbump="🚀 Version Bump: $(cat "$versionfile") 🚀 "
  printf_cyan "$versionbump"
  git -C "$gitdir" add "$gitdir/version.txt" >/dev/null 2>&1
  if ! __git_porcelain "$gitdir"; then
    git -C "$gitdir" commit -q -S -m "$versionbump" "$gitdir/version.txt" 2>/dev/null && exitCode=0 || exitCode=1
  fi
  __getexitcode $exitCode "Successfully committed the new version to $(__git_repobase "$gitdir")" "Failed to commit the version change in $gitdir"
  exit $?
  ;;

files)
  shift 1
  files="$(git -C "$gitdir" status -b -s | sed '/^\#/d;s,^ ,,g;s,??,A,g' | tr '\n' '|')"
  mess="➕ $files ➕ "
  ;;

modified)
  shift 1
  if git -C "$gitdir" status -s -b | grep -F 'M ' >/dev/null 2>&1; then
    files="$(git -C "$gitdir" status -s -b | grep -F 'M ' | awk '{print $2}' | tr '\n' ' ')"
    mess="🗃 $files 🗃 "
    git -C "$gitdir" add $files >/dev/null 2>&1
  else
    printf_exit 1 0 "Nothing has been modified"
  fi
  ;;

deleted)
  shift 1
  if git -C "$gitdir" status -s -b | grep -F 'D ' >/dev/null 2>&1; then
    files="$(git -C "$gitdir" status -s -b | grep -F 'D ' | awk '{print $2}' | tr '\n' ' ')"
    mess=":heavy_minus_sign: $files :heavy_minus_sign: "
    git -C "$gitdir" add $files >/dev/null 2>&1
  else
    printf_exit 1 0 "Nothing has been deleted"
  fi
  ;;

added)
  shift 1
  if git -C "$gitdir" status -s -b | grep -F '?? ' >/dev/null 2>&1; then
    files="$(git -C "$gitdir" status -s -b | grep -F '?? ' | awk '{print $2}' | tr '\n' ' ')"
    mess="❓ $files ❓"
    git -C "$gitdir" add $files >/dev/null 2>&1
  else
    printf_exit 1 0 "Nothing has been added"
  fi
  ;;

changed)
  shift 1
  mess="✔️🐛 Changed $1 🐛✔️"
  ;;

new)
  shift 1
  ARGS="$*"
  mess="🆕📦 NEW: $ARGS 📦🆕 "
  ;;

improve)
  shift 1
  ARGS="$*"
  mess="👌 IMPROVE: $ARGS 👌 "
  ;;

fixed)
  shift 1
  ARGS="$*"
  mess="🐛 FIXED: $ARGS 🐛 "
  ;;

release)
  shift 1
  ARGS="$*"
  mess="🚀 RELEASE: $ARGS 🚀 "
  ;;

docs)
  shift 1
  ARGS="$*"
  mess="📖 DOCS: $ARGS 📖 "
  ;;

test)
  shift 1
  ARGS="$*"
  mess="🤖 TEST: $ARGS 🤖 "
  ;;

breaking)
  shift 1
  ARGS="$*"
  mess="⚒️ BREAKING: $ARGS ⚒️ "
  ;;

refactor)
  shift 1
  mess="✔️ 〰️ Refactor Code 〰️ ✔️  "
  ;;

permission | permissions)
  shift 1
  mess="🏠🔥❗ Fixed Permissions ❗🔥🏠 "
  ;;

bug | bugs)
  shift 1
  mess="🐛🦈🏠❗ Bug Fixes ❗🏠🦈🐛 "
  ;;

alot | fixes)
  shift 1
  mess="🦈🏠🐜❗ Fixes and Updates ❗🐜🦈🏠 "
  ;;

docker)
  shift 1
  mess="🐜❇🦈🏠❗ Added Docker Workflow ❗🏠🦈❇🐜 "
  ;;

node)
  shift 1
  mess="🐜❇🦈🏠❗ Added nodejs Workflow ❗🏠🦈❇🐜 "
  ;;

ruby)
  shift 1
  mess="🐜❇🦈🏠❗ Added ruby Workflow ❗🏠🦈❇🐜 "
  ;;

php)
  shift 1
  mess="🐜❇🦈🏠❗ Added php Workflow ❗🏠🦈❇🐜 "
  ;;

perl)
  shift 1
  mess="🐜❇🦈🏠❗ Added perl Workflow ❗🏠🦈❇🐜 "
  ;;

python)
  shift 1
  mess="🐜❇🦈🏠❗ Added python Workflow ❗🏠🦈❇🐜 "
  ;;

scratchpad)
  shift 1
  mess="🐜📓❇📓 ${1:-Modified my scratchpad} 📓❇📓🐜 "
  ;;

todo)
  shift 1
  mess="🐜📓❇📓 ${1:-Modified my todo list} 📓❇📓🐜 "
  ;;

notes)
  shift 1
  mess="🐜📓❇📓 ${1:-Modified my notes} 📓❇📓🐜 "
  ;;

blog)
  shift 1
  mess="🐜📓❇📓 ${1:-New blog post} 📓❇📓🐜 "
  ;;

init)
  shift 1
  mess="🦈🏠🐜❗ Initial Commit 📍🐜🦈🏠 "
  ;;

emj | emojy | emojify)
  shift 1
  mess="🦈🏠🐜❗ ${1:-Well I did some things} ❗🐜🦈🏠 "
  ;;

random)
  shift 1
  mess="🐜:arrow_right: Random: $(curl -s https://commitment.herokuapp.com/index.txt) :arrow_left:🐜"
  ;;

custom)
  shift 1
  if [ -n "$1" ]; then
    mess="$1"
  else
    printf_exit "You must specify your commit message"
  fi
  ;;

setup)
  shift 1
  gitadmin "$gitdir" setup "$@"
  exit
  ;;

*)
  if [ -n "$1" ]; then
    [ ! "$(echo "$@" | wc -m)" -lt "4" ] || printf_exit "Message must be longer than 4 characters"
    mess="${newmess:-$@}"
  else
    mess="🦈🏠❗ Well I did things - Hopefully nothing breaks ❗🏠🦈 "
  fi
  ;;
esac
shift

if __git_porcelain "$gitdir"; then
  printf_red "There are no changes to commit"
  exit
else
  printf_newline
  printf_cyan "Commiting Changes with the following message:"
  printf_yellow "$mess"
  [ -f "$versionfile" ] && __version
  if [ -f "$gitdir/gitmasterconfig" ] && [ -d "$gitdir/.git" ]; then
    cp -Rf "$gitdir/gitmasterconfig" "$gitdir/git/config"
  fi
  if [ -z "$files" ]; then git -C "$gitdir" add . >/dev/null 2>&1; fi
  if [ -z "$mess" ]; then
    git -C "$gitdir" commit -q -S -m " 🦈🏠🐜 Fixes and Updates 🐜🦈🏠 " 2>/dev/null && exitCode=0 || exitCode=1
  else
    git -C "$gitdir" commit -q -S -m "$mess" 2>/dev/null && exitCode=0 || exitCode=1
  fi
  __getexitcode $exitCode "Successfully committed the changes to $(__git_repobase "$gitdir")" "Failed to commit the changes" &&
    printf_green "commit ID: $(git -C "$gitdir" rev-parse --short HEAD)" || exit 1

  if __am_i_online_err "No internet connection. Skipping push"; then
    __git_push "$@"
  fi
  printf_newline
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
