#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="gen-readme"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 020720211332-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : gen-readme --help
# @Copyright     : Copyright: (c) 2021 CasjaysDev
# @Created       : Sunday, Feb 07, 2021 13:32 EST
# @File          : gen-readme
# @Description   : Create a readme from template
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# I'm sure there is a better way to do this
if [ -d "$1" ]; then
  curDir="$1"
  shift 1
elif [ "$1" = "-d" ] || [ "$1" = "-dir" ] || [ "$1" = "--dir" ]; then
  curDir="$2"
  shift 2
  [ -d "$curDir" ] || printf_exit "$curDir doesn't seem to be a directory"
else
  curDir="$PWD"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$HOME/.config/gen-readme/settings" ] && . "$HOME/.config/gen-readme/settings"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
readmeFile="$1"
readmeDefault="${readmeDefault:-default.md}"
readmeDir="${readmeDir:-$HOME/.config/gen-readme/files}"
gitconfig_user="${gitconfig_user:-$(__git_globaluser)}"
gitconfig_email="${gitconfig_email:-$(__git_globalemail)}"
__mkd "$readmeDir"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__file_failed() { printf_exit "Failed to get the readme file: $readmeFile"; }
create_local_file() {
  cat "$1" >"$curDir/README.md" 2>/dev/null
  if [ -f "$curDir/README.md" ]; then
    printf_green "Your README file has been created"
  else
    __file_failed "$1"
  fi
}

get_remote_file() {
  __curl "$1" >"$curDir/README.md" 2>/dev/null
  if [ -f "$curDir/README.md" ]; then
    printf_green "Your README file has been created"
  else
    __file_failed "$1"
  fi
}

generate_readme() {
  local readmeFile="${1:-$readmeDefault}"
  local whichreadme="$(__strip_ext $readmeFile || exit 1)"
  local author="$gitconfig_user"
  local curDir="$(dirname $curDir/README.md)"
  local BaseDir="${curDir##*/}"

  if [ -f "$readmeDir/$readmeFile" ]; then
    printf_green "Using the $whichreadme README for $curDir"
    create_local_file "$readmeDir/$readmeFile"
    [ -f ${curDir}/README.md ] && sed -i "s#AuthorName#${author}#g" "${curDir}/README.md"
    [ -f ${curDir}/README.md ] && sed -i "s#ProjectName#${BaseDir}#g" "${curDir}/README.md"
    [ -f ${curDir}/README.md ] && sed -i "s#REPLACE_APPNAME#${BaseDir}#g" "${curDir}/README.md"
  else
    printf_exit 1 1 "$readmeDir/$readmeFile does not exist"
  fi
}

gen_config() {
  cat <<EOF
# Settings for $APPNAME
readmeDir="$readmeDir"
readmeDefault="$readmeDefault"
gitconfig_user="$gitconfig_user"
gitconfig_email="$gitconfig_email"

EOF
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Init
if [ "$(__count_files $readmeDir)" -eq 0 ]; then
  __mkd "$readmeDir"
  if [ "$(__count_files "$CASJAYSDEVDIR/templates/readmes")" -ne 0 ]; then
    printf_green "Setting up the README directory"
    __cp_rf "$CASJAYSDEVDIR/templates/readmes/." "$readmeDir/"
  else
    printf_exit "1" "1" "No readme files exist"
  fi
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Find the readme
__find_file() {
  if [ -f "$(ls -A $readmeDir/$1/$2)" ]; then
    template="$(ls -A $readmeDir/$1/$2)"
    shift 2
  elif [ -f "$(ls -A $readmeDir/$readmeFile)" ]; then
    template="$(ls -A $readmeDir/$readmeFile)"
    shift 1
  elif [ -f "$readmeDir/$*" ]; then
    template="$readmeDir/$*"
    shift 1
  elif [ -f "$readmeDir/default" ]; then
    template="$readmeDir/default"
    dest="$curDir/README.md"
  else
    printf_exit 1 1 "Can not find any readmes matching $1 $2"
  fi
  template="${template//$readmeDir\//}"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

case "$readmeFile" in

*list)
  shift 1
  find ${readmeDir}/ -type f -not -path "${readmeDir}/*/.git/*" | sed 's#'$readmeDir/'##g' | sort -u | printf_readline "2"
  ;;

*config)
  shift 1
  printf_green "Generating the config file $HOME/.config/gen-readme/settings"
  gen_config >"$HOME/.config/gen-readme/settings"
  printf_green "Installing the readme files"
  if [ -d "${CASJAYSDEVDIR}/templates/readmes" ]; then
    __cp_rf "${CASJAYSDEVDIR}/templates/readmes/." "$HOME/.config/gen-readme/files/"
  else
    printf_exit 1 1 "Can not get readme files"
  fi
  exit
  ;;

*download)
  shift 1
  printf_green "Cloning the repo to $readmeDir/"
  __git_clone "$1 " "$readmeDir/"
  exit
  ;;

*custom)
  shift 1
  if [ -f "$readmeFile" ]; then
    generate_readme "$readmeFile"
  else
    get_remote_file "$1"
  fi
  ;;

*pro | *proj | project*)
  shift 1
  __find_file "$@"
  generate_readme "$template"
  ;;

*install*)
  shift 1
  __find_file "$@"
  generate_readme "$template"
  ;;

*)
  __find_file "$@"
  generate_readme "$template"
  ;;

esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
