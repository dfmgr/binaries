#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103200627-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : devenv --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 06:27 EDT
# @File          : devenv
# @Description   : Setup a development environment
# @TODO          : Create user config
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# I'm sure there is a better way to do this
if [ -d "$1" ]; then
  sitedir="$(__basedir "$1/showcurdir")"
  shift 1
elif [ "$1" = "-d" ] || [ "$1" = "-dir" ] || [ "$1" = "--dir" ]; then
  sitedir="$(__dirname "$2")"
  shift 2
  [ -d "$sitedir" ] || printf_exit "$sitedir doesn't seem to be a directory"
else
  sitedir="$(__basedir "$PWD/.")"
fi
if [ "$sitedir" = "." ]; then sitedir="$(__basedir ".")"; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DEVENV_COMAND="${DEVENV_COMAND:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# What to do after creating project
__start_new_project() {
  if [ -n "$DEVENV_COMAND" ] && [ -f "$(type -P "$(basename "$DEVENV_COMAND")")" ]; then
    eval "$DEVENV_COMAND"
  elif [ "$1" = "screen" ]; then
    if [ -f "$2" ]; then
      eval "$1" -c "$2"
    elif [ -f "$HOME/.config/screen/dev/singlerc" ]; then
      eval screen -c "$HOME/.config/screen/dev/singlerc"
    fi
  elif [ "$1" = "tmux" ]; then
    if [ -f "$2" ]; then
      tmux -f "$2"
    elif [ -f "$HOME/.config/tmux/dev/tmux.conf" ]; then
      eval tmux -f "$HOME/.config/tmux/dev/tmux.conf"
    fi
  else
    ${SHELL:-bash}
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check for sample files
if_sample() {
  if [ -f .env.sample ] || [ -f .env ]; then cp -Rf .env.sample .env; fi
  if [ -f .config.sample ] || [ -f .config ]; then cp -Rf .config.sample .config; fi
  if [ -f config.example.js ] || [ -f config.js ]; then cp -Rf config.example.js config.js; fi
  if [ -f .config.json.sample ] || [ -f .config.json ]; then cp -Rf .config.json.sample .config.json; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Start a static server
__run_static_site() {
  run_server "${1:-20000}"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import new site from git
__run_import_site() {
  local import=""
  local cursite="$sitedir"
  printf_green "Enter the full path for your imported project!"
  printf_read_input "3" "Enter location for your new site:" "120" "sitedir" "-i $cursite"
  printf_read_input "3" "Enter the url to your git repo:" "120" "import"
  [ -n "$sitedir" ] || [ -n "$import" ] || printf_exit "Something went wrong"
  [ -d "$sitedir" ] || __mkd "$sitedir"
  if git clone "$import" "$sitedir" -q &>/dev/null; then
    printf_green "Import from $import completed"
  else
    printf_red "Something went wrong with the import"
    printf_exit "git clone $import $sitedir -q"
  fi
  cd "$sitedir" || printf_exit 1 1 "$sitedir doesn't exist"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create a new site dir
__run_new_site() {
  local cursite="$sitedir"
  printf_green "Enter the full path for your new project!"
  printf_read_input "3" "Enter location for your new site - enter . for current:" "120" "sitedir" "-i $sitedir"
  [ -n "$sitedir" ] || printf_exit "Something went wrong"
  [ -d "$sitedir" ] || __mkd "$sitedir"
  cd "$sitedir" || printf_exit 1 1 "$sitedir doesn't exist"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run jekyll server
__run_jekyll() {
  local appname=jekyll
  local project=jekyll
  __requires "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  __start_new_project screen "$HOME/.config/screen/dev/$project"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run hugo server
__run_hugo() {
  local appname=hugo
  local project=hugo
  __requires "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  __start_new_project screen "$HOME/.config/screen/dev/$project"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create a ruby project
__run_ruby() {
  local appname=ruby
  local project=ruby
  __requires "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  __start_new_project screen "$HOME/.config/screen/dev/$project"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Start a new python project
__run_python() {
  local appname=python
  local project=python
  __requires "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  __start_new_project screen "$HOME/.config/screen/dev/$project"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Start a new perl project
__run_perl() {
  local appname=perl
  local project=perl
  __requires "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  __start_new_project screen "$HOME/.config/screen/dev/$project"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Start a new PHP Project
__run_php() {
  local appname=php
  local project=php
  __requires "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  __start_new_project screen "$HOME/.config/screen/dev/$project"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Start a new node project
__run_node() {
  local appname=node || appname=node || appname=npm
  local project=node
  __requires "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  [ -f package.json ] || npm init
  npm init
  __start_new_project screen "$HOME/.config/screen/dev/$project"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Start a new VueJS project
__run_vuecli() {
  local appname=vue
  local project=node
  __requires "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  [ -f package.json ] || printf_red "The package.json file already exits" && exit 1
  "$appname" create
  __start_new_project screen "$HOME/.config/screen/dev/$project"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Start a new ReactJS project
__run_reactcli() {
  local appname=create-react-app
  local project=javascript
  __requires "$appname" || printf_exit "node is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  [ -f package.json ] || printf_red "The package.json file already exits" && exit 1
  $appname
  __start_new_project screen "$HOME/.config/screen/dev/$project"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Start a new ExpressJS project
__run_expresscli() {
  local appname=express-generator
  local project=javascript
  __requires "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  [ -f package.json ] || printf_red "The package.json file already exits" && exit 1
  $appname
  __start_new_project screen "$HOME/.config/screen/dev/$project"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create a new javascript project
__run_create-project() {
  local appname=create-project
  local project=javascript
  __requires "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$project" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  [ -f package.json ] || printf_red "The package.json file already exits" && exit 1
  "$appname"
  __start_new_project screen "$HOME/.config/screen/dev/$project"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Start a new mevn project
__run_mevn() {
  local appname=mevn
  local project=javascript
  __requires "git" || printf_exit "git is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$project" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  [ -f package.json ] || printf_red "The package.json file already exits" && exit 1
  git clone -q https://github.com/icebob/vue-express-mongo-boilerplate ./
  __start_new_project screen "$HOME/.config/screen/dev/$project"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create a shellcheckrc file
__gen_shellcheck() {
  printf_green "Generating .shellcheckrc"
  __cp_rf "$CASJAYSDEVDIR/templates/shellcheckrc" "$sitedir/.shellcheckrc"
  [ -f "$sitedir/.shellcheckrc" ] &&
    printf_green ".shellcheckrc has been generated" ||
    printf_exit 1 1 "Failed to create .shellcheckrc"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create a editorconfig file
__gen_editorconfig() {
  printf_green "Generating .editorconfig"
  __cp_rf "$CASJAYSDEVDIR/templates/editorconfig" "$sitedir/.editorconfig"
  [ -f "$sitedir/.editorconfig" ] &&
    printf_green ".editorconfig has been generated" ||
    printf_exit 1 1 "Failed to create .editorconfig"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$1" = "--start" ]; then
  shift 1
  START="$1"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  case "$START" in
  jekyll)
    __requires jekyll || printf_exit 1 1 "jekyll can't be found"
    if [ -f "$sitedir/_config.yml" ]; then
      if __requires watchy; then
        watchy -w "$sitedir/_config.yml" -- jekyll serve --host=0.0.0.0
      elif __requires jekyll; then
        jekyll serve --host=0.0.0.0
      else printf_exit "There was a problem staring - no config found"; fi
    else
      printf_exit "There was a problem starting - no config found"
    fi
    ;;
  *)
    printf_red "No parameters specified"
    exit
    ;;
  esac
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case "$1" in
import)
  __run_import_site
  ;;
static)
  shift 1
  __run_new_site && __run_static_site "$@"
  ;;
jekyll)
  shift 1
  __run_new_site && __run_jekyll "$@"
  ;;
hugo)
  shift 1
  __run_new_site && __run_hugo "$@"
  ;;
ruby)
  shift 1
  __run_new_site && __run_ruby "$@"
  ;;
python)
  shift 1
  __run_new_site && __run_python "$@"
  ;;
perl)
  shift 1
  __run_new_site && __run_perl "$@"
  ;;
php)
  shift 1
  __run_new_site && __run_php "$@"
  ;;
node)
  shift 1
  __run_new_site && __run_node "$@"
  ;;
vue)
  shift 1
  __run_new_site && __run_vuecli "$@"
  ;;
react)
  shift 1
  __run_new_site && __run_reactcli "$@"
  ;;
express)
  shift 1
  __run_new_site && __run_expresscli "$@"
  ;;
create-project)
  shift 1
  __run_new_site && __run_create-project "$@"
  ;;
mevn)
  shift 1
  __run_new_site && __run_mevn "$@"
  ;;
shellcheck)
  shift 1
  __run_new_site && __gen_shellcheck "$@"
  ;;
editorconfig)
  shift 1
  __run_new_site && __gen_editorconfig "$@"
  ;;
*)
  shift --
  __help "$@"
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit "${exitCode:-$?}"
