#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202104121918-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap 'exitCode=${exitCode:-$?};[ -f "$SCREENSHOT_MENU_TEMP_FILE" ] && rm -Rf "$SCREENSHOT_MENU_TEMP_FILE" &>/dev/null' EXIT
set -Eo pipefail

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202104121918-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : LICENSE.md
# @ReadME        : screenshot-menu --help
# @Copyright     : Copyright: (c) 2021 Jason, CasjaysDev
# @Created       : Tuesday, Apr 13, 2021 02:54 EDT
# @File          : screenshot-menu
# @Description   : Choose type of screenshot
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE"
  [ -d "$SCREENSHOT_MENU_CONFIG_DIR" ] || mkdir -p "$SCREENSHOT_MENU_CONFIG_DIR"
  [ -d "$SCREENSHOT_MENU_CONFIG_BACKUP_DIR" ] || mkdir -p "$SCREENSHOT_MENU_CONFIG_BACKUP_DIR"
  [ -f "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE" ] &&
    cp -Rf "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE" "$SCREENSHOT_MENU_CONFIG_BACKUP_DIR/$SCREENSHOT_MENU_CONFIG_FILE.$$"
  cat <<EOF >"$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE"
# Settings for screenshot-menu
SCREENSHOT_MENU_SAVE_DIR="${SCREENSHOT_MENU_SAVE_DIR:-${HOME}/Pictures/Screenshots}"
SCREENSHOT_MENU_TEMP_FILE="${TMPDIR:-/tmp}/screenshot-menu"
SCREENSHOT_MENU_NOTIFY_ENABLED="yes"
SCREENSHOT_MENU_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
SCREENSHOT_MENU_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$SCREENSHOT_MENU_NOTIFY_CLIENT_ICON}"

EOF
  if [ -f "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE" ]; then
    printf_green "Your config file for screenshot-menu has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
getStamp() {
  date '+%Y%m%d-%H%M%S'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
SCREENSHOT_MENU_CONFIG_FILE="settings.conf"
SCREENSHOT_MENU_CONFIG_DIR="$HOME/.config/myscripts/screenshot-menu"
SCREENSHOT_MENU_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/screenshot-menu/backups"
SCREENSHOT_MENU_OPTIONS_DIR="$HOME/.local/share/myscripts/screenshot-menu/options"
SCREENSHOT_MENU_TEMP_FILE="${TMPDIR:-/tmp}/screenshot-menu"
SCREENSHOT_MENU_NOTIFY_ENABLED="yes"
SCREENSHOT_MENU_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
SCREENSHOT_MENU_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$SCREENSHOT_MENU_NOTIFY_CLIENT_ICON}"
SCREENSHOT_MENU_SAVE_DIR="${SCREENSHOT_MENU_SAVE_DIR:-${HOME}/Pictures/Screenshots}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="$*"
SHORTOPTS="c,v,h"
LONGOPTS="options,config,version,help"
ARRAY=""
MAIM_ARGS=""
FILE_TYPE=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$SCREENSHOT_MENU_OPTIONS_DIR/options" ] || __list_options "$SCREENSHOT_MENU_OPTIONS_DIR" &>/dev/null
[ -f "$SCREENSHOT_MENU_OPTIONS_DIR/array" ] || __list_array "$SCREENSHOT_MENU_OPTIONS_DIR" "$ARRAY" &>/dev/null
[ -d "$SCREENSHOT_MENU_SAVE_DIR" ] || mkdir -p "$SCREENSHOT_MENU_SAVE_DIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE" ]; then
  . "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$SCREENSHOT_MENU_OPTIONS_DIR" "$ARRAY"
    __list_options "$SCREENSHOT_MENU_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${SCREENSHOT_MENU_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${SCREENSHOT_MENU_NOTIFY_CLIENT_ICON}"
if [ "$SCREENSHOT_MENU_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash dmenu maim tee xdotool xclip xrandr || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
declare -A DISPLAY_MODE
DISPLAYS=$(xrandr --listactivemonitors | grep '+' | awk '{print $4, $3}' | awk -F'[x/+* ]' '{print $1,$2"x"$4"+"$6"+"$7}')
declare -a modes=(
  "Fullscreen"
  "Active window"
  "Selected region"
)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
IFS=$'\n'
for i in ${DISPLAYS}; do
  name=$(echo "${i}" | awk '{print $1}')
  rest="$(echo "${i}" | awk '{print $2}')"
  modes[${#modes[@]}]="${name}"
  DISPLAY_MODE[${name}]="${rest}"
done
unset IFS

target=$(printf '%s\n' "${modes[@]}" | dmenu -i -l 20 -p 'Take screenshot of:' "$@") || exit 1
case "$target" in
'Fullscreen')
  FILE_TYPE="full"
  ;;

'Active window')
  active_window=$(xdotool getactivewindow)
  MAIM_ARGS="-i ${active_window}"
  FILE_TYPE="window"
  ;;

'Selected region')
  MAIM_ARGS="-s"
  FILE_TYPE="region"
  ;;

*)
  MAIM_ARGS="-g ${DISPLAY_MODE[${target}]}"
  FILE_TYPE="${target}"
  ;;
esac

declare -a destination=("File" "Clipboard" "Both")
dest=$(printf '%s\n' "${destination[@]}" | dmenu -i -l 20 -p 'Destination:' "$@") || exit 1
case "$dest" in
'File')
  maim ${MAIM_ARGS} "${SCREENSHOT_MENU_SAVE_DIR}/scrot-${FILE_TYPE}-$(getStamp).png"
  ;;

'Clipboard')
  maim ${MAIM_ARGS} | xclip -selection clipboard -t image/png
  ;;

'Both')
  maim ${MAIM_ARGS} | tee "${SCREENSHOT_MENU_SAVE_DIR}/scrot-${FILE_TYPE}-$(getStamp).png" | xclip -selection clipboard -t image/png
  ;;

*)
  false
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}

