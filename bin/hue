#!/usr/bin/env bash

APPNAME="$(basename $0)"
SCRIPTDIR="$(dirname "${BASH_SOURCE[0]}")"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 010920210727-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : hue
# @Created     : Mon, Dec 31, 2019, 00:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : home automation - philips hue script
# @Help        : http://hkionline.net/posts/using-phillips-hue-from-the-command-line
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
main() {
# variables
unset hue_api_key hue_device hue_option
state="/tmp/automate_hue"
DEVICE="$(__hostname2ip ${HUE_HUB_DEVICE:-$2})"
hue_api_key="${HUE_ACCESS_TOKEN}"
hue_device="${DEVICE:-$2}"
hue_option="$1"
hue_group="0"
api_url="${HUE_HUB_API:-http://$hue_device/api/$hue_api_key/groups/$hue_group}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ ! -z "$hue_api_key" ] || printf_exit "Please set your hue api key"
[ ! -z "$hue_device" ] || printf_exit "Please enter the hostname of your hue hub"
[ ! -z "$hue_option" ] || printf_exit "Please enter the the command you want to send to your hue_api_key"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# functions
getstate() { touch $state; cat $state; }
state_on() { curl -LSsq -X PUT "$api_url/action" -d '{"on": true}' &>/dev/null && echo on >$state; }
state_off() { curl -LSsq -X PUT "$api_url/action" -d '{"on": false}' &>/dev/null && echo off >$state; }
toggle() {
  if [ "$(cat $state)" = on ]; then
    state_off
  elif [ "$(cat $state)" = off ]; then
    state_on
  fi
}

case "$hue_option" in
on | true | 0)
  printf_green "Telling $hue_device to turn on the lights"
  state_on
  ;;

off | false | 1)
  printf_green "Telling $hue_device to turn off the lights"
  state_off
  ;;

toggle)
  printf_green "Telling $hue_device to toggle the lights"
  toggle && echo pause >$state
  ;;

   state)
    case "$2" in
    json)
      echo '{"status":"$(getstate)"}' | jq
      ;;
  esac
  ;;

info)
  printf_green "Getting info for group $hue_group from $hue_device"
  curl -LSs "$api_url" | jq
  ;;

esac

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
main "$@"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
