#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 010920210727-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : mpd-notify
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : mpd notfication script
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__require_app mpd mpc
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -d "$HOME/.config/mpd/mpd-notify" ] || printf_exit "1" "1" "Please install my mpd dotfiles | dfmgr install mpd"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
daemonName="mpd-notify"
daemonDir="$HOME/.config/mpd/mpd-notify"
CONFIG="$daemonDir/mpd-notify.cfg"
MPDSERVER="${MPDSERVER:-localhost}"
MPDSERVER_PORT=${MPDSERVER_PORT:-6600}
NOTIFYSONG=true
STATUSNOTIF=true
pidFile="$daemonDir/$daemonName.pid"
logFile="$daemonDir/$daemonName.log"
runInterval=1
logMaxSize="100"
myPid="$(echo $$)"
curPid="$(ps -ux | grep -v "$myPid" | grep 'mpd-notify run' | grep -v ' grep ' | awk '{print $2}' | head -n 1)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$daemonDir/mpd-notify.cfg" ] && . "$daemonDir/mpd-notify.cfg"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$pidFile" ] && [ -z "$curPid"  ]; then
  oldPid="$(<"$pidFile")"
elif [ -n "$curPid" ]; then
  oldPid="$curPid"
else
  oldPid=""
fi
#printf_debug "Old:$oldPid" "Cur:$curPid" "Pid:$myPid"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
log() { echo "$*" >>"$logFile"; }
__mpc() { mpc -h "$MPDSERVER" -p "$MPDSERVER_PORT" "$@"; }
__mpc_status() { __mpc status && return 0 || return 1; }
__getpid() {
  if [ -n "$curPid" ]; then
   echo 0
   return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
getFile() {
  file="$(__mpc -f %file% | head -n 1)"
  albumPath="$(echo "$file" | sed 's/$(basename "$file")//')"
  __mpc -f %file% | head -n 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
getArtAlb() {
  __mpc -f "%artist% - %album%" | head -n 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
scrapeDiscogs() {
  artAlb=$(getArtAlb)
  getArt="$(python3 "$daemonDir""/cogsCover.py" "$artAlb" "$DISCOGSKEY" "$DISCOGSSECRET")"
  if [ -n "$getArt" ]; then
    log "$getArt"
    __cp_rf ${TMP:-/tmp}/image.jpg "$coverPath" >/dev/null 2>&1
    __rm_rf ${TMP:-/tmp}/image.jpg >/dev/null 2>&1
  fi
}

notifyStatus() {
  if $STATUSNOTIF; then
    if [[ $curStatus != "$newStatus" ]]; then
      if [[ $newStatus -eq 0 ]]; then
        notifications "MPD" "Paused"
      else
        notifications "MPD" "Playing: $newTitleArtist"
      fi
    fi
  fi
}

findCover() {
  coverPath=
  maxFile=
  maxRes=
  for file in "$MUSFOLDER$albumPath"*; do
    if [[ "$file" == *".jpg" ]] || [[ "$file" == *".jpeg" ]] || [[ "$file" == *".png" ]]; then
      curRes=$(identify -format "%W" "$file")
      if [[ -z $maxFile ]]; then
        maxFile="$file"
        maxRes="$curRes"
      elif [[ $curRes -gt $maxRes ]]; then
        maxFile="$file"
        maxRes="$curRes"
      fi
    fi
  done

  coverPath="$maxFile"
  if [[ "$coverPath" == *".png" ]]; then
    newPath="$(echo $coverPath | sed 's/png/jpg/g')"
    convert "$coverPath" "$newPath"
    coverPath=$newPath
  fi

  if [[ -z "$coverPath" ]]; then
    coverPath=$MUSFOLDER$albumPath"cover.jpg"
    if $AUTOSCRAPE; then
      scrapeDiscogs
    fi
  fi
}

setWallpaper() {
  curRes=$(xdpyinfo | grep dimensions | grep -E -o "   .+x" | sed -r 's/x.+?$//' | sed -r 's/^.+[^0-9]//g')
  dimensions=$(xdpyinfo | grep dimensions | awk '{print $2}')
  if $WALLPAPER; then
    if [[ $maxRes -ge $curRes ]]; then
      feh --bg-scale "$coverPath" >/dev/null 2>&1
    else
      if $CENTERED; then
        if $COMMON; then
          commonColor="$(convert "$coverPath" -colors 2 -depth 8 -unique-colors -format "%c" histogram:info: | grep -Eo "#.{6}" | tail -n 1)"
          convert "$coverPath" -gravity center -background "$commonColor" -extent $dimensions "${TMP:-/tmp}/cover.jpg"
          feh --bg-center "${TMP:-/tmp}/cover.jpg" >/dev/null 2>&1
        else
          convert "$coverPath" -gravity center -background "#$MATCOLOR" -extent $dimensions "${TMP:-/tmp}/cover.jpg"
          feh --bg-center "${TMP:-/tmp}/cover.jpg" >/dev/null 2>&1
        fi
      else
        feh --bg-tile "$coverPath" >/dev/null 2>&1
      fi
    fi
  fi
}

notifySong() {
  # Compare old and new songs.
  if [[ $currTitleArtist != "$newTitleArtist" ]]; then
    findCover
    if [[ -e $coverPath ]]; then # If there's a cover...
      setWallpaper
    fi
    if $NOTIFYSONG; then
      notifications "MPD" "$newTitleArtist"
    fi
    log "*** Now playing: $newTitleArtist from $MPDSERVER:$MPDSERVER_PORT"
  fi
}

notifyVolume() {
  if [[ $curVol != "$newVol" ]]; then
    notifications "MPD" "$newVol"
  fi
}
#############
setupDaemon() {
  if [ ! -f "$logFile" ]; then
    touch "$logFile"
  else
    # Check to see if we need to rotate the logs.
    size=$(($(ls -l "$logFile" | cut -d " " -f 5) / 1024))
    if [[ "$size" -gt "$logMaxSize" ]]; then
      __rm_rf "$logFile"
      touch "$logFile"
    fi
  fi
  __devnull __mpc_status
  if [[ $? -ne 0 ]]; then
    printf_info "MPD not running. Attempting to start..."
    [ -n "$MPDSERVER" ] && true || __start mpd
    if [[ $? -ne 0 ]]; then
      printf_exit "Unable to start MPD. Please do it yourself then start mpd-notify."
    else
      printf_green "Everything is good!"
    fi
  fi
  if [ -z "$MPDSERVER" ]; then __running mpd || printf_exit "1" "1" "Failed to start mpd"; fi
}

startDaemon() {
  if [ "$(ps -ux | grep 'mpd-notify run' | grep -v ' grep ' | wc -l)" -gt 2 ]; then
    printf_exit "2" "1" "ERROR: $daemonName is already running."
  else
    printf_green " *Starting $daemonName."
    setupDaemon
    echo "$myPid" >"$pidFile"
    log '*** '$(date +"%Y-%m-%d")": Starting up $daemonName."
    log '*** '"connected to $MPDSERVER"
    statusDaemon
    loop
  fi
}

stopDaemon() {
  if checkDaemon; then
    echo "Stopping $daemonName"
    log '*** '$(date +"%Y-%m-%d")": $daemonName stopped."
    for pid in $oldPid $(ps -ux | grep 'mpd-notify run' | grep -v ' grep ' | awk '{print $2}'); do
      kill -s 15 "$pid" &>/dev/null
    done
      __rm_rf "$pidFile"
  else
    printf_exit "1" "1" "ERROR: $daemonName is not running."
  fi
}

statusDaemon() {
  if checkDaemon; then
    notifications "MPD" "Connected to $MPDSERVER\n$(__mpc status)"
    printf_exit "2" "0" "$daemonName is running: $curPid."
  else
    printf_exit "1" "1" "$daemonName is not running."
  fi
}

restartDaemon() {
  if checkDaemon; then
    stopDaemon
    startDaemon &
    disown
  else
    printf_red "$daemonName isn't running."
    startDaemon
  fi
}

checkDaemon() {
  if [[ "$(__getpid)" = 0 ]]; then
    return 0
  else
    return 1
  fi
  return $?
}

loop() {
  # Just get the song title and artist.
  currentSong=$(__devnull2 __mpc)
  currTitleArtist="$(__devnull2 __mpc | head -n 1)"
  # Via mpc call and awk, get the status of mpd. For some reason, comparing the two as strings would not work. Converting their status to integers and comparing those, does.
  if [[ $(echo "$currentSong" | awk '/\[(paused|playing)\]/ {print $1}') == "[playing]" ]]; then
    curStatus=1
  elif [[ $(echo "$currentSong" | awk '/\[(paused|playing)\]/ {print $1}') == "[paused]" ]]; then
    curStatus=0
  fi
  curVol=$(echo "$currentSong" | grep -o -E "volume.+?%")
  # zzz
  sleep 1
  newSong=$(__devnull2 __mpc)
  newTitleArtist="$(__devnull2 __mpc | head -n 1)"
  if [[ $(echo "$newSong" | awk '/\[(paused|playing)\]/ {print $1}') == "[playing]" ]]; then
    newStatus=1
  elif [[ $(echo "$newSong" | awk '/\[(paused|playing)\]/ {print $1}') == "[paused]" ]]; then
    newStatus=0
  fi
  newVol=$(echo "$newSong" | grep -o -E "volume.+?%")
  # Get the path of the currently playing song as well as the cover.
  albumPath=$(getFile | sed -r 's/\/[^/]*$//')"/"
  albumPath="$(__devnull2 __mpc -f %file% | head -n 1)"
  notifyStatus
  notifySong
  notifyVolume
  loop
}

##################
#    ArgParse    #
##################
case "$1" in
start)
  $APPNAME run
  ;;
run)
  startDaemon &
  disown
  ;;
stop)
  stopDaemon
  ;;
status)
  statusDaemon
  ;;
restart)
  restartDaemon
  ;;
*)
  printf_exit "Error: usage $APPNAME { start | stop | restart | status }"
  ;;
esac
exit 0
# end
