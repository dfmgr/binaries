#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202103302338-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap '[ -f "$HOSTNAME_TEMP_FILE" ] && rm -Rf "$HOSTNAME_TEMP_FILE" &>/dev/null' EXIT
[ -f "/usr/bin/hostname" ] && {
  /usr/bin/hostname "$@"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103302338-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : LICENSE.md
# @ReadME        : hostname --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Wednesday, Mar 31, 2021 00:47 EDT
# @File          : hostname
# @Description   : Set system hostname
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
#__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$HOSTNAME_CONFIG_DIR/$HOSTNAME_CONFIG_FILE"
  [ -d "$HOSTNAME_CONFIG_DIR" ] || mkdir -p "$HOSTNAME_CONFIG_DIR"
  [ -d "$HOSTNAME_CONFIG_BACKUP_DIR" ] || mkdir -p "$HOSTNAME_CONFIG_BACKUP_DIR"
  [ -f "$HOSTNAME_CONFIG_DIR/$HOSTNAME_CONFIG_FILE" ] &&
    cp -Rf "$HOSTNAME_CONFIG_DIR/$HOSTNAME_CONFIG_FILE" "$HOSTNAME_CONFIG_DIR/$HOSTNAME_CONFIG_FILE.$$"
  cat <<EOF >"$HOSTNAME_CONFIG_DIR/$HOSTNAME_CONFIG_FILE"
# Settings for hostname
HOSTNAME_CACHE_DIR="$HOSTNAME_CACHE_DIR"
HOSTNAME_TEMP_FILE="${TMPDIR:-/tmp}/hostname"
HOSTNAME_NOTIFY_ENABLED="yes"
HOSTNAME_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
HOSTNAME_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$HOSTNAME_NOTIFY_CLIENT_ICON}"

EOF
  if [ -f "$HOSTNAME_CONFIG_DIR/$HOSTNAME_CONFIG_FILE" ]; then
    printf_green "Your config file for hostname has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
  __hostname &>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__hostname() {
  local hostnamecli hostnamecmd hostnamefcmd hostnamescmd hostnamedcmd PATH
  local PATH="/usr/bin:/usr/sbin:/bin:/sbin"
  if [ -f "$(type -P hostname 2>/dev/null)" ]; then
    hostnamecli="$(type -P hostname)"
    hostnamecmd="$($hostnamecli "-f" 2>/dev/null | grep '^')"
    hostnamefcmd="$($hostnamecli "-f" 2>/dev/null | grep '^')"
    hostnamescmd="$($hostnamecli "-s" 2>/dev/null | grep '^')"
    if echo "$hostnamecmd" | grep -qv '.*\.' || [[ "$hostnamecmd" =~ .local$ ]]; then
      hostnamedcmd="local"
    else
      hostnamedcmd="$($hostnamecli "-d" 2>/dev/null | grep '^')"
    fi
    [ -f "$HOSTNAME_CACHE_DIR/name" ] || printf '%s\n' "$hostnamecmd" >"$HOSTNAME_CACHE_DIR/name"
    [ -f "$HOSTNAME_CACHE_DIR/full" ] || printf '%s\n' "$hostnamefcmd" >"$HOSTNAME_CACHE_DIR/full"
    [ -f "$HOSTNAME_CACHE_DIR/short" ] || printf '%s\n' "$hostnamescmd" >"$HOSTNAME_CACHE_DIR/short"
    [ -f "$HOSTNAME_CACHE_DIR/domain" ] || printf '%s\n' "$hostnamedcmd" >"$HOSTNAME_CACHE_DIR/domain"
    $hostnamecli "$@" 2>/dev/null | grep '^'
  elif [ -f "$(type -P hostnamectl 2>/dev/null)" ]; then
    shift $#
    hostnamecli="$(type -P hostnamectl)"
    hostnamecmd="$($hostnamecli | grep 'hostname:' | grep -v '^n/a' | awk '{print $3}' 2>/dev/null | grep '^')"
    hostnamefcmd="$($hostnamecli | grep 'hostname:' | grep -v '^n/a' | awk '{print $3}' 2>/dev/null | grep '^')"
    hostnamescmd="$($hostnamecli | grep 'hostname:' | grep -v '^n/a' | awk '{print $3}' | sed 's#\..*##g' 2>/dev/null | grep '^')"
    if echo "$hostnamecmd" | grep -qv '.*\.' || [[ "$hostnamecmd" =~ .local$ ]]; then
      hostnamedcmd="local"
    else
      hostnamedcmd="$($hostnamecli | grep 'hostname:' | grep -v '^n/a' | awk -F. '{print $(NF-1) "." $NF}' 2>/dev/null | grep '^')"
    fi
    [ -f "$HOSTNAME_CACHE_DIR/name" ] || printf '%s\n' "$hostnamecmd" >"$HOSTNAME_CACHE_DIR/name"
    [ -f "$HOSTNAME_CACHE_DIR/full" ] || printf '%s\n' "$hostnamefcmd" >"$HOSTNAME_CACHE_DIR/full"
    [ -f "$HOSTNAME_CACHE_DIR/short" ] || printf '%s\n' "$hostnamescmd" >"$HOSTNAME_CACHE_DIR/short"
    [ -f "$HOSTNAME_CACHE_DIR/domain" ] || printf '%s\n' "$hostnamedcmd" >"$HOSTNAME_CACHE_DIR/domain"
    $hostnamecli 2>/dev/null | grep 'hostname:' | grep -v '^n/a' | awk '{print $3}' | grep '^'
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
HOSTNAME_CONFIG_FILE="settings.conf"
HOSTNAME_CONFIG_DIR="$HOME/.config/myscripts/hostname"
HOSTNAME_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/hostname/backups"
HOSTNAME_OPTIONS_DIR="$HOME/.local/share/myscripts/hostname/options"
HOSTNAME_CACHE_DIR="${HOSTNAME_CACHE_DIR:-$HOME/.cache/hostname}"
HOSTNAME_TEMP_FILE="${TMPDIR:-/tmp}/hostname"
HOSTNAME_NOTIFY_ENABLED="yes"
HOSTNAME_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
HOSTNAME_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$HOSTNAME_NOTIFY_CLIENT_ICON}"
if user_is_root; then
  HOSTNAME_CONFIG_DIR="/etc/hostname.d"
  HOSTNAME_CACHE_DIR="/etc/hostname.d/files"
fi
#if [ -d "/etc/hostname.d/files" ]; then
#  cp -Rf "/etc/hostname.d/files/." "$HOSTNAME_CACHE_DIR/" &>/dev/null
#fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="${*}"
SHORTOPTS="c,v,h,r,f,s,d"
LONGOPTS="options,config,version,help,remove,full,domain,short"
ARRAY="full short domain"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$HOSTNAME_CONFIG_DIR/$HOSTNAME_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$HOSTNAME_OPTIONS_DIR/options" ] || __list_options "$HOSTNAME_OPTIONS_DIR" &>/dev/null
[ -f "$HOSTNAME_OPTIONS_DIR/array" ] || __list_array "$HOSTNAME_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$HOSTNAME_CONFIG_DIR/$HOSTNAME_CONFIG_FILE" ]; then
  . "$HOSTNAME_CONFIG_DIR/$HOSTNAME_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$HOSTNAME_OPTIONS_DIR" "$ARRAY"
    __list_options "$HOSTNAME_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  -r | --remove)
    [ ! -f "$HOSTNAME_CACHE_DIR/name" ] || rm -Rf "$HOSTNAME_CACHE_DIR/name"
    [ ! -f "$HOSTNAME_CACHE_DIR/full" ] || rm -Rf "$HOSTNAME_CACHE_DIR/full"
    [ ! -f "$HOSTNAME_CACHE_DIR/short" ] || rm -Rf "$HOSTNAME_CACHE_DIR/short"
    [ ! -f "$HOSTNAME_CACHE_DIR/domain" ] || rm -Rf "$HOSTNAME_CACHE_DIR/domain"
    [ "$(find "$HOSTNAME_CACHE_DIR" -type f | wc -l)" = 0 ] &&
      printf_exit 2 0 "Removed the files from $HOSTNAME_CACHE_DIR" ||
      printf_exit 1 1 "failed to remove the cache files"
    ;;
  -d | domain) shift 1 && OPTS=domain ;;
  -s | short) shift 1 && OPTS=short ;;
  -f | full) shift 1 && OPTS=full ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export NOTIFY_CLIENT_NAME="${HOSTNAME_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${HOSTNAME_NOTIFY_CLIENT_ICON}"
# Actions based on env
if [ "$HOSTNAME_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#cmd_exists --error bash || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
mkdir -p "$HOSTNAME_CACHE_DIR" &>/dev/null
if [ -f /etc/hostname ]; then
  hostname="$(</etc/hostname)"
elif [ -f "$HOSTNAME_CACHE_DIR/name" ]; then
  hostname="$(<"$HOSTNAME_CACHE_DIR/name")"
else
  hostname=""
fi
[ -f "$HOSTNAME_CACHE_DIR/full" ] && hostnamef="$(<"$HOSTNAME_CACHE_DIR/full")" || hostnamef=""
[ -f "$HOSTNAME_CACHE_DIR/short" ] && hostnames="$(<"$HOSTNAME_CACHE_DIR/short")" || hostnames=""
[ -f "$HOSTNAME_CACHE_DIR/domain" ] && hostnamed="$(<"$HOSTNAME_CACHE_DIR/domain")" || hostnamed=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "${1:-$OPTS}" in
full)
  shift 1
  { [ -n "$hostnamef" ] && printf '%s\n' "$hostnamef"; } || __hostname "-f"
  ;;
short)
  shift 1
  { [ -n "$hostnames" ] && printf '%s\n' "$hostnames"; } || __hostname "-s"
  ;;
domain)
  shift 1
  { [ -n "$hostnamed" ] && printf '%s\n' "$hostnamed"; } || __hostname "-d"
  ;;
*)
  { [ -n "$hostname" ] && printf '%s\n' "$hostname"; } || __hostname "$@"
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
