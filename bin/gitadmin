#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

shopt -s extglob

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 010920210727-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : install
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : push/clone/pull from github/gitlab/private repo
# @TODO        : Organize this a lot better
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# I'm sure there is a better way to do this
if [ -d "$1" ]; then
  gitdir="$1"
  shift 1
elif [ "$1" = "-d" ] || [ "$1" = "-dir" ] || [ "$1" = "--dir" ]; then
  gitdir="$2"
  shift 2
  [ -d "$gitdir" ] || printf_exit "$gitdir doesn't seem to be a directory"
else
  gitdir="$PWD"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# defaults
unset PREVREPO
topdir="$(__git_top_dir "$gitdir" 2>/dev/null)"
USERNAME="${GITHUB_USERNAME:-$2}"
TOKEN="$GITHUB_ACCESS_TOKEN"
REPO_URL="https://github.com/$USERNAME"
PROJECT_BASE="$HOME/Projects"
PROJECT_DIR="${GITHUB_PROJECT_DIR:-$PROJECT_BASE/github}"
TMPFILE="${TMP:-/tmp}/github-casjaysdev-XXXXXXXXX"
WTFLICENSE="${MY_LICENSE_FILE:-$SCRIPTSFUNCTDIR/templates/wtfpl.md}"
REPODIR="${topdir:-$PROJECT_DIR}"
VERSIONFILE="$(__git_top_dir $MYCURRDIR 2>/dev/null)/version.txt"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -n "$TOKEN" ] || printf_exit "The env variable GITHUB_ACCESS_TOKEN is not set"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#git init
if [ "$(git config --get user.name | wc -m)" -lt 2 ]; then
  printf_read_question "What is you Name" "120" "NAME"
  git config --global user.name "$NAME" 2>/dev/null
fi
if [ "$(git config --get user.email | wc -m)" -lt 2 ]; then
  printf_read_question "What is you Email" "120" "EMAIL"
  git config --global user.email "$EMAIl" 2>/dev/null
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Creates a README.md file if one doesn't exist
create_new_readme_template() {
  local author="$(__git_globaluser)"
  local GitBaseDir="$(git -C "$REPODIR" rev-parse --show-toplevel 2>/dev/null || echo $gitdir)"
  local BaseDir="${GitBaseDir##*/}"
  [ -f "$SCRIPTSFUNCTDIR/templates/readmes/project.md" ] &&
    cat "$SCRIPTSFUNCTDIR/templates/readmes/project.md" >"${REPODIR}/README.md"
  [ -f ${REPODIR}/README.md ] && sed -i "s#ProjectName#${BaseDir}#g" "${REPODIR}/README.md"
  [ -f ${REPODIR}/README.md ] && sed -i "s#AuthorName#${author}#g" "${REPODIR}/README.md"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Creates a WTFPL license if a LICENSE.md file doesn't exist
create_new_wtfpl() {
  local author="$(__git_globaluser)"
  local year="$(date +'%Y')"
  [ -f "$WTFLICENSE" ] && cat "$WTFLICENSE" >"${REPODIR}/LICENSE.md"
  [ -f ${REPODIR}/LICENSE.md ] && sed -i "s#CURYEAR#${year}#g" "${REPODIR}/LICENSE.md"
  [ -f ${REPODIR}/LICENSE.md ] && sed -i "s#AuthorName#${author}#g" "${REPODIR}/LICENSE.md"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# The template to create a new private github repo
create_new_private_repo_template() {
  read -r -d '' JSON_TEMPLATE <<EOF
{
  "name" : "%s",
  "description" : "%s",
  "homepage" : "%s",
  "visibility" : "private",
  "private" : true,
  "has_issues" : false,
  "has_downloads" : false,
  "has_wiki" : false,
  "has_projects" : false
}
EOF
  JSON_OUTPUT=$(printf "$JSON_TEMPLATE" "$REPO_NAME" "$DESCRIPTION" "https://$DOMAIN")
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# The template to create a new public github repo
create_new_repo_template() {
  read -r -d '' JSON_TEMPLATE <<EOF
{
  "name" : "%s",
  "description" : "%s",
  "homepage" : "%s",
  "visibility" : "public",
  "private" : false,
  "has_issues" : false,
  "has_downloads" : false,
  "has_wiki" : false,
  "has_projects" : false
}
EOF
  JSON_OUTPUT=$(printf "$JSON_TEMPLATE" "$REPO_NAME" "$DESCRIPTION" "https://$DOMAIN")
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if input is a url
do_not_add_a_url() {
  regex="(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]"
  string="$1"
  if [[ "$string" =~ $regex ]]; then
    printf_red "Do not provide the full url"
    printf_red "only provide the username/repo"
    exit 1
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# The initialize git function
run_git_init() {
  REPODIR="${1:-$REPODIR}"
  if [ ! -z "$repo" ]; then
    git -C "${REPODIR}" remote add origin $repo
    printf_green "$repo has been added"
    printf_read_question "3" "Should I push to the new repo? [y/n]" "1" "push" "-s"
    if printf_answer_yes "$push"; then
      printf_read_question "3" "This will overwrite the repo if it exists. Continue? [y/n]" "1" "confirm_repo" "-s"
      if printf_answer_yes "$confirm_repo"; then
        if [ -f "${REPODIR}/gitmasterconfig" ]; then cp -Rf "${REPODIR}gitmasterconfig" "${REPODIR}/.git/config"; fi
        __devnull git -C "${REPODIR}" push -q --set-upstream origin master -f &&
          __devnull git -C "${REPODIR}" push -q -f &&
          printf_green "Successfully pushed to $repo" || printf_red "Push to $repo has failed"
      else
        printf_info "Not pushing due to user canceling"
      fi
    else
      printf_info "Not pushing due to user canceling"
    fi
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup a new git repo
run_git_setup() {
  REPODIR="${1:-$REPODIR}"
  if [ -d ./.git ]; then
    PREVREPO="$(git remote -v | grep push | head -n 1 | awk '{print $2}' 2>/dev/null)"
    printf_error "This project already has git setup"
    if [ ! -z "$PREVREPO" ]; then
      printf_info "Repo is: $PREVREPO"
    fi
    printf_read_question "3" "Should I continue to reset this repo? [y/n]" "1" "continue" "-s"
    if printf_answer_yes "$continue"; then
      rm -Rf ${REPODIR}/.git
    else
      printf_red "Initialization has failed due to user"
      exit 1
    fi
  fi

  [ -f "$VERSIONFILE" ] && date +"%m%d%Y%H%M-git" >"$VERSIONFILE"
  ls ${REPODIR}/README* 1>/dev/null 2>&1 || create_new_readme_template
  ls ${REPODIR}/LICENSE* 1>/dev/null 2>&1 || create_new_wtfpl
  __devnull git -C "${REPODIR}" init . &&
    __devnull git -C "${REPODIR}" add . &&
    git -C "${REPODIR}" commit -q -m ' ü¶àüè†üêú‚ùó Initial Commit ‚ùóüêúü¶àüè† ' &&
    printf_green "Success: $(__git_repobase "$REPODIR") has been initialized"

  if [ ! -z "$PREVREPO" ]; then
    printf_read_question "3" "Should I reuse the remote repo? [y/n] " "1" "reuse" "-s"
  else
    PREVREPO=""
    repo=""
  fi
  if printf_answer_yes "$reuse"; then
    remote="y"
    repo="$PREVREPO"
    run_git_init "$REPODIR"
  else
    printf_read_question "3" "Should I add a remote repo? [y/n] " "1" "remote" "-s"
    if printf_answer_yes "$remote"; then
      printf_read_question "3" "Enter remote repo: " "120" "repo"
      run_git_init "$REPODIR"
    else
      printf_info "You have decided not to add a remote repository"
    fi
  fi
  if [ $? -eq 0 ]; then
    exit 0
  else
    printf_red "Initialization has failed"
    exit 1
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run git setup with no interactions
run_git_setup_automated() {
  REPODIR="${1:-$REPODIR}"
  PREVREPO="$(git -C "${REPODIR}" remote -v | grep push | head -n 1 | awk '{print $2}' 2>/dev/null)"
  [ -d "$REPODIR" ] || __mkd "$REPODIR"
  if [ ! -d "${REPODIR}/.git" ]; then
    printf_red "This does not seem to be a git repo"
    exit 1
  fi
  if [ -z "$PREVREPO" ]; then
    printf_red "Can't run in automated mode due to there not being a repo setup"
    exit 1
  fi
  printf_red "Setting up the repo as requested" && sleep 5
  rm -Rf .git
  [ -f "$VERSIONFILE" ] && date +"%m%d%Y%H%M-git" >"$VERSIONFILE"
  ls ${REPODIR}/README* 1>/dev/null 2>&1 || create_new_readme_template
  ls ${REPODIR}/LICENSE* 1>/dev/null 2>&1 || create_new_wtfpl
  __devnull git -C "${REPODIR}" init &&
    git -C "${REPODIR}" remote add origin $PREVREPO &&
    if [ -f "${REPODIR}/gitmasterconfig" ]; then cp -Rf "${REPODIR}/gitmasterconfig" "${REPODIR}/.git/config"; fi &&
    __devnull git -C "${REPODIR}" add . &&
    git -C "${REPODIR}" commit -q -m ' ü¶àüè†üêú‚ùó Initial Commit ‚ùóüêúü¶àüè† ' &&
    __devnull git -C "${REPODIR}" push -q --set-upstream origin master -f &&
    __devnull git -C "${REPODIR}" push -q -f &&
    printf_green "Successfully pushed to: $PREVREPO" ||
    printf_red "Push to $PREVREPO has failed"
  echo ""
  exit $?
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Makes a new jeckyll site
make_newsite() {
  git -C "$HOME/Public/sites/$1" clone https://github.com/casjay-templates/domain-template &&
    rm -Rf "$HOME/Public/sites/new/.git" && cd "$HOME/Public/sites/$1" && "$EDITOR" _config.yml || return 1
  git setup "${REPODIR}"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Gets the organizations from the user
git_all_orgs() {
  ORGAPI="https://api.github.com/user/orgs?per_page=1000&type=owner"
  for org in "$GITHUB_USERNAME" "$(curl -H "Authorization: token $TOKEN" -Ls $ORGAPI | grep -w login | awk -F / '{print $NF}' | sed 's/\",// ; s/\.[^.]*$// ; s#"##g' | awk '{print $2}')"; do
    gitadmin --clone "$org"
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initializes a repo with default options
repos_init() {
  REPODIR="${1:-$REPODIR}"
  [ -f "$VERSIONFILE" ] && date +"%m%d%Y%H%M-git" >"$VERSIONFILE"
  git -C "${REPODIR}" add .
  if [ -f "${REPODIR}/gitmasterconfig" ]; then cp -Rf "${REPODIR}/gitmasterconfig" "${REPODIR}/.git/config"; fi
  git -C "${REPODIR}" commit -m ' ü¶àüè†üêú Initial Commit üêúü¶àüè† '
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initializes a repo for github
git_init() {
  REPODIR="${1:-$REPODIR}"
  [ "$1" = "" ] && printf_red "Usage: userName repoName\n" && return 1
  [ "$2" = "" ] && printf_red "Usage: userName repoName\n" && return 1
  git_setup "$REPODIR"
  [ -f "$VERSIONFILE" ] && date +"%m%d%Y%H%M-git" >"$VERSIONFILE"
  git -C "$REPODIR" add .
  if [ -f "$REPODIR/gitmasterconfig" ]; then cp -Rf "$REPODIR/gitmasterconfig" "$REPODIR/.git/config"; fi
  git -C "$REPODIR" commit -m ' ü¶àüè†üêú Initial Commit üêúü¶àüè† '
  git -C "$REPODIR" remote add origin "https://github.com/$1/$2"
  git -C "$REPODIR" push -u origin master
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Creates a new gist
ghgist() {
  [ "$1" = "--help" ] && printf_green "Usage: --gist name description text\n" && return 1
  [ "$1" = "" ] && printf_red "Usage: --gist name description text\n" && return 1
  [ "$2" = "" ] && printf_red "Usage: --gist name description text\n" && return 1
  local TITLE="$1"
  local DESCR="$2"
  local SUCCESS="Success"
  local ERROR="Failed"
  local CONTENT="$(printf "%s\r" "{\"description\": \"$DESCR\",\"public\": true,\"files\": {\"$TITLE\": {\"content\": \"$3\"}}}" | tee >/tmp/gist_url-data.txt)"
  printf_green "Creating $TITLE - $DESCR"
  curl -X POST -LSsi -H "Content-Type: application/json" -H "Authorization: token $TOKEN" --data @/tmp/gist_url-data.txt https://api.github.com/gists |
    grep -w "html_url" | grep "gist" | awk '{print $2}' | sed 's/\,//' >"/tmp/gist_url" 2>&1 && SUCCES="$(cat /tmp/gist_url)" &&
    __devnull rm -Rf "/tmp/gist_url" "/tmp/gist_url-data.txt"
  getexitcode "$SUCCES" "$ERROR"
  return $EXIT
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Deletes a github repo
ghdelete() {
  [ "$1" = "--help" ] && printf_green "Usage: --delete userName repoName\n" && return 1
  [ "$1" = "" ] && printf_red "Usage: --delete userName repoName\n" && return 1
  local USERNAME="$1"
  local REPONAME="$2"
  local ERROR="Deletion of $REPONAME failed"
  local SUCCES="Deletion of $REPONAME successfull"
  printf_green "Deleting $REPONAME for user $USERNAME\n"
  __devnull curl -H "Authorization: token $TOKEN" -i -XDELETE "https://api.github.com/repos/$USERNAME/$REPONAME"
  sleep 3
  curl -H "Authorization: token $TOKEN" -LSsi "https://api.github.com/orgs/$USERNAME/repos?per_page=1000" | grep -vi $REPONAME | grep -q "html_url" || true
  ghdelete-user
  getexitcode "$SUCCES" "$ERROR"
  return $EXIT
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reusable function for delete
ghdelete-user() {
  curl -H "Authorization: token $TOKEN" -LSsi "https://api.github.com/users/$USERNAME/repos?per_page=1000" | grep -vi $REPONAME | grep -q "html_url" || true
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Creates a new repo on github
ghcreate() {
  [ "$TOKEN" = "" ] && printf_red "No auth token set - GITHUB_ACCESS_TOKEN\n" && return 1
  [ "$1" = "--help" ] && printf_green "Usage: --create userName repoName Description\n" && return 1
  [ "$1" = "" ] && printf_red "Usage: --create userName repoName Description\n" && return 1
  local USERNAME="$1"
  local REPONAME="$2"
  local DESCR="$3"
  local ERROR="Creation of $REPONAME failed"
  local SUCCES="Creation of $REPONAME successfull"
  printf_green "Creating $REPONAME for user $USERNAME"
  __devnull curl -H "Authorization: token $TOKEN" -LSsi "https://api.github.com/orgs/$USERNAME/repos" -d "{\"name\": \"$REPONAME\", \"description\": \"$DESCR\"}"
  sleep 1
  curl -H "Authorization: token $TOKEN" -LSsi "https://api.github.com/orgs/$USERNAME/repos?per_page=1000" | grep -i "$REPONAME" | grep -q "html_url" >/dev/null && true ||
    ghcreate-user
  getexitcode "$SUCCES" "$ERROR"
  return "$EXIT"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# clone a single repo from user
ghsinglerepo() {
  [ "$1" = "" ] && printf_red "Usage: --single userName repoName" && return 1
  [ "$2" = "" ] && printf_red "Usage: --create userName repoName Description" && return 1
  git clone -q "https://github.com/$1/$2"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reusable function for create
ghcreate-user() {
  __devnull2 curl -H "Authorization: token $TOKEN" -H "Authorization: token $TOKEN" --data "{\"name\": \"$REPONAME\", \"description\": \"$DESCR\"}" https://api.github.com/user/repos
  sleep 1
  __devnull2 curl -H "Authorization: token $TOKEN" -LSsi "https://api.github.com/users/$USERNAME/repos?per_page=1000" | grep -i "$REPONAME" | grep -q "html_url" && true
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# main program
main() {
  sleep 3
  for i in $(cat $TMPFILE); do
    if [ -d "$PROJECT_DIR/$USERNAME/$i" ]; then
      ERROR="Git pull $USERNAME/$i failed"
      SUCCES="Git pull $USERNAME/$i completed"
      printf_purple "Now running git pull $USERNAME/$i"
      if [ -f "$REPODIR/gitmasterconfig" ]; then cp -Rf "$REPODIR/gitmasterconfig" "$REPODIR/.git/config"; fi
      __devnull git -C "$PROJECT_DIR/$USERNAME/$i" pull --recurse-submodules -f -q
      getexitcode "$SUCCES" "$ERROR"
    else
      ERROR="Git clone $USERNAME/$i failed"
      SUCCES="Git clone $USERNAME/$i completed"
      printf_purple "Now running git clone $USERNAME/$i"
      __devnull git -C "$PROJECT_DIR/$USERNAME/$i" clone --recurse-submodules -f -q "$REPO_URL/$i"
      getexitcode "$SUCCES" "$ERROR"
    fi
  done
  rm -Rf "/tmp/github-casjaysdev-*"
  exit "$EXIT"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# push local repo
git_push_single() {
  [ "$1" = "--help" ] || [ $# -eq 0 ] && printf_help "Usage: gitadmin push MyProjectDir"
  if [ -d "$REPODIR/.git" ]; then
    printf_custom "4" "Pushing the repo in $PWD"
    __devnull git -C "$REPODIR" push -q
    getexitcode "Push has completed"
  else
    if [ -n "$1" ]; then
      projdir="$1"
      REPODIRname="$(get_githost "$1")"
      git_username_repo "$1"
    else
      projdir="$PROJECT_BASE/$REPODIRname/$username/$userrepo"
    fi
    if [ -d "$projdir/.git" ]; then
      printf_custom "4" "Pushing the repo in $projdir"
      __devnull git -C "$projdir" push -q
      getexitcode "Push has completed"
    else
      return 1
    fi
  fi
  exit "$?"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pull a single repo
git_pull_single() {
  [ "$1" = "--help" ] || [ $# -eq 0 ] && printf_help "Usage: gitadmin pull MyProjectDir"
  if [ -d "$REPODIR/.git" ]; then
    printf_custom "4" "Pulling the repo in $PWD"
    __devnull git -C "$REPODIR" pull -q
    getexitcode "Pulling has completed"
  else
    if [ -n "$1" ]; then
      projdir="$1"
      REPODIRname="$(__git_hostname "$1")"
      git_username_repo "$1"
    else
      projdir="$PROJECT_BASE/$REPODIRname/$username/$userrepo"
    fi
    if [ -d "$projdir/.git" ]; then
      printf_custom "4" "Pulling the repo in $projdir"
      __devnull git -C "$projdir" pull -q
      getexitcode "Pulling has completed"
    else
      return 1
    fi
  fi
  exit "$?"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# clone a single repo
git_clone_single() {
  [ "$1" = "--help" ] || [ $# -eq 0 ] && printf_help "Usage: gitadmin clone MyURL"
  REPODIRname="$(__git_hostname "$1")"
  get_username_repo "$1"
  projdir="${2:-$PROJECT_BASE/$REPODIRname/$username/$userrepo}"
  if [ -d "$projdir/.git" ]; then
    printf_custom "4" "Updating the repo in $projdir"
    __devnull git -C "$projdir" pull -q
    getexitcode "Updating has completed"
  else
    printf_custom "4" "Cloning the repo to $projdir"
    __devnull git -C "$projdir" clone -q
    getexitcode "Cloning has completed"
  fi
  exit "$?"
}

#continue pulling
git_update_loop() {
  if [[ "$*" =~ "--while" ]]; then
    while true; do
      for project in $(ls -d ~/Projects/*/*/*); do
        printf_green "Updating $project $(__devnull git -C $project pull -q) $(getexitcode)"
      done && clear
      printf_custom "3" "Sleeping for a minute $(sleep 60)"
    done
  else
    for project in $(ls -d ~/Projects/*/*/*); do
      printf_green "Updating $project $(__devnull git -C $project pull -q) $(getexitcode)"
    done
  fi
}

# cron functions
__run_cron() {
  local frequency="0 4 * * 6"
  local croncmd="$APPNAME cron run"
  case $1 in
  run)
    logr -name gitadmin 'am_i_online --console && $(expr $RANDOM \% 300) && gitadmin --all-orgs && gitadmin --user'
    ;;
  remove)
    shift 1
    removecrontab "$frequency $croncmd"
    ;;
  add)
    addtocrontab "$frequency $croncmd"
    ;;
  *)
    addtocrontab "$frequency $croncmd"
    ;;
  esac
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application

case "$1" in
--help)
  __help
  exit
  ;;

updater | cron)
  shift 1
  __run_cron "$*"
  ;;

s | status)
  shift 1
  __git_status "$REPODIR"
  exit $?
  ;;

l | log)
  shift 1
  __git_log "$REPODIR"
  exit $?
  ;;

commit)
  shift 1
  gitcommit -d "$REPODIR" "$@"
  ;;

remote)
  case "$2" in
  show)
    shift 2
    [ "$1" = "--help" ] && printf_help "Usage: $APPNAME remote show | Show remote"
    git -C "$REPODIR" remote show origin
    ;;
  add)
    shift 2
    [ "$1" = "--help" ] && printf_help "Usage: $APPNAME remote add MyURL | Add remote"
    git -C "$REPODIR" remote add origin "$1"
    ;;
  *)
    shift 1
    [ "$1" = "--help" ] && printf_help "Usage: $APPNAME remote | Show remote"
    git -C "$REPODIR" remote show origin
    ;;
  esac
  ;;

update)
  shift 1
  [ "$1" == "--help" ] && printf_help "Usage: $APPNAME update | $APPNAME update --while | Run git pull on all repos"
  git_update_loop "$@"
  ;;

push)
  shift 1
  [ "$1" == "--help" ] && printf_help "Usage: $APPNAME push | push the repo"
  git_push_single "$@"
  ;;

pull)
  shift 1
  [ "$1" == "--help" ] && printf_help "Usage: $APPNAME update | pull the repos"
  git_pull_single "$@"
  ;;

clone)
  shift 1
  [ "$1" == "--help" ] && printf_help "Usage: $APPNAME clone | clone the repos"
  git_clone_single "$@"
  ;;

--all-orgs)
  shift 1
  [ "$1" == "--help" ] && printf_help "Usage: $APPNAME --all-orgs | Clone/Pull all orgs owned by you"
  git_all_orgs
  ;;

--single)
  shift 1
  [ "$1" == "--help" ] && printf_help "Usage: $APPNAME --single | clone a single repo"
  ghsinglerepo "$@"
  ;;

--org)
  shift 1
  [ "$1" == "--help" ] && printf_help "Usage: $APPNAME --org | Clone/Pull all repos owned by org"
  USERNAME="$1"
  if [ ! -z "$TOKEN" ]; then
    GITHUBAPIREPO="https://api.github.com/orgs/$USERNAME/repos?per_page=1000&type=owner"
    MESSAGE="Getting the repos for $USERNAME using\n\t\tgit hub token $TOKEN"
  else
    GITHUBAPIREPO="https://api.github.com/orgs/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME"
  fi
  echo "$(curl -H "Authorization: token $TOKEN" -Ls $GITHUBAPIREPO | grep -w clone_url | awk -F / '{print $NF}' | sed 's/\",//' | sed 's/\.[^.]*$//')" >"$TMPFILE"
  COUNT="$(cat $TMPFILE | wc -l)"
  printf_green "$MESSAGE\n\t\tThere is currently $COUNT repos avaliable\n\t\tInititialing $REPO_URL"
  main
  ;;

--user)
  shift 1
  [ "$1" == "--help" ] && printf_help "Usage: $APPNAME --user | Clone/Pull all repos owned by you"
  USERNAME="$1"
  if [ ! -z "$TOKEN" ]; then
    GITHUBAPIREPO="https://api.github.com/user/repos?type=owner&per_page=1000"
    MESSAGE="Getting the repos for $USERNAME using\n\t\tgit hub token $TOKEN"
  else
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME"
  fi
  echo "$(curl -H "Authorization: token $TOKEN" -Ls $GITHUBAPIREPO | grep -w clone_url | awk -F / '{print $NF}' | sed 's/\",//' | sed 's/\.[^.]*$//')" >"$TMPFILE"
  COUNT="$(cat $TMPFILE | wc -l)"
  printf_green "$MESSAGE\n\t\tThere is currently $COUNT repos avaliable\n\t\tInititialing $REPO_URL"
  main
  ;;

--push)
  [ "$1" == "--help" ] && printf_help "Usage: $APPNAME --push | push all your repos repos"
  shift 1
  USERNAME="$1"
  if [ ! -z "$TOKEN" ]; then
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME using\n\t\tgit hub token $TOKEN"
  else
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME"
  fi
  echo "$(curl -H "Authorization: token $TOKEN" -Ls $GITHUBAPIREPO | grep -w clone_url | awk -F / '{print $NF}' | sed 's/\",//' | sed 's/\.[^.]*$//')" >"$TMPFILE"
  COUNT="$(cat $TMPFILE | wc -l)"
  printf_green "$MESSAGE\n\t\tThere is currently $COUNT repos avaliable\n\t\tInititialing $REPO_URL"
  for i in $(cat $TMPFILE); do
    if [ -d "$PROJECT_DIR/$USERNAME/$i" ]; then
      printf_purple "Now running git push $1/$i"
      ERROR="git push failed for $USERNAME/$i"
      SUCCES="git push completed for $USERNAME/$i"
      if [ -f "$PROJECT_DIR/$USERNAME/$i/gitmasterconfig" ]; then
        cp -Rf "$PROJECT_DIR/$USERNAME/$i/gitmasterconfig" "$PROJECT_DIR/$USERNAME/$i/.git/config"
      fi
      if (__devnull2 git -C "$PROJECT_DIR/$USERNAME/$i" status | grep -q "working tree clean"); then
        getexitcode
      else
        [ -f "$PROJECT_DIR/$USERNAME/$i/version.txt" ] && date +"%m%d%Y%H%M-git" >"$PROJECT_DIR/$USERNAME/$i/version.txt"
        __devnull git -C "$PROJECT_DIR/$USERNAME/$i" add . &&
          __devnull git -C "$PROJECT_DIR/$USERNAME/$i" commit -a -m " ‚ùáü¶àüè†‚ùó General Fixes ‚ùóüè†ü¶à‚ùá " &&
          __devnull git -C "$PROJECT_DIR/$USERNAME/$i" push -q
        getexitcode
      fi
    fi
  done
  rm -Rf "$TMPFILE"
  unset ERROR SUCCES
  exit $EXIT
  ;;

--clone)
  shift 1
  [ "$1" == "--help" ] && printf_help "Usage: $APPNAME --clone | clone the repos"
  USERNAME="$1"
  if [ ! -z "$TOKEN" ]; then
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000&type=owner"
    MESSAGE="Getting the repos for $USERNAME using\n\t\tgit hub token $TOKEN"
  else
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME"
  fi
  echo "$(curl -H "Authorization: token $TOKEN" -Ls $GITHUBAPIREPO | grep -w clone_url | awk -F / '{print $NF}' | sed 's/\",//' | sed 's/\.[^.]*$//')" >"$TMPFILE"
  COUNT="$(cat $TMPFILE | wc -l)"
  printf_green "$MESSAGE\n\t\tThere is currently $COUNT repos avaliable\n\t\tInititialing $REPO_URL"
  main
  ;;

--pull)
  shift 1
  USERNAME="$1"
  if [ ! -z "$TOKEN" ]; then
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME using\n\t\tgit hub token $TOKEN"
  else
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME"
  fi
  echo "$(curl -H "Authorization: token $TOKEN" -Ls $GITHUBAPIREPO | grep -w clone_url | awk -F / '{print $NF}' | sed 's/\",//' | sed 's/\.[^.]*$//')" >"$TMPFILE"
  COUNT="$(cat $TMPFILE | wc -l)"
  printf_green "$MESSAGE\n\t\tThere is currently $COUNT repos avaliable\n\t\tInititialing $REPO_URL"
  main
  ;;

--create)
  shift 1
  USERNAME="$1" REPONAME="$2"
  ghcreate "$@"
  exit $EXIT
  ;;

--delete)
  shift 1
  USERNAME="$1"
  ghdelete "$@"
  exit $EXIT
  ;;

--gist)
  shift 1
  USERNAME="$1"
  ghgist "$@"
  exit $EXIT
  ;;

init)
  shift 1
  git_init "$@"
  ;;

github) # github repo
  case $2 in
  init) # init a github repo
    shift 2
    if [ "$#" -ne 1 ]; then printf_exit "Usage: gitadmin github init RepoName"; fi
    if [[ "$1" = "--help" ]]; then printf_exit "Create a new github project\n\t\tUsage: gitadmin github init RepoName"; fi
    do_not_add_a_url "$1"
    homerepo="$(echo "$HOME/Projects/github/$1" | sed 's/\",// ; s/\.[^.]*$// ; s#"##g')"
    mkdir -p "$HOME/Projects/github/$1"
    __cd_into "$homerepo"
    repos_init $REPODIR
    exit "$?"
    ;;

  clone) # Clone repo from github
    shift 2
    if [ "$#" -ne 1 ]; then printf_exit "Usage: gitadmin github clone username/projectname"; fi
    if [ "$1" = "--help" ]; then printf_exit "Clone a github project\n\t\tUsage: gitadmin github clone username/projectname"; fi
    do_not_add_a_url "$1"
    homerepo="$(echo "$HOME/Projects/github/$1" | sed 's/\",// ; s/\.[^.]*$// ; s#"##g')"
    if [ -d "$homerepo" ]; then
      printf_green "The repo already exists so attempting update"
      git -C "$homerepo" pull -q
    else
      printf_green "Cloning the repo from github.com/$1"
      git clone -q "https://github.com/$1.git" "$homerepo"
    fi
    __cd_into "$homerepo"
    exit "$?"
    ;;

  remote) # add github to remote
    shift 1
    if [ "$#" -ne 2 ]; then printf_exit "Usage: gitadmin github remote username/projectname"; fi
    [ "$1" = "--help" ] && printf_exit "Add a github project to remote\n\t\tUsage: gitadmin github remote username/projectname"
    do_not_add_a_url "$1"
    git remote add "$1" "https://github.com/$2.git"
    exit "$?"
    ;;
  esac
  ;;

gitlab)
  case $2 in
  init) # init a gitlab repo
    shift 2
    if [ "$#" -ne 1 ]; then printf_exit "Usage: gitadmin gitlab init RepoName"; fi
    if [[ "$1" = "--help" ]]; then printf_exit "Create a new gitlab project\n\t\tUsage: gitadmin gitlab init RepoName"; fi
    do_not_add_a_url "$1"
    homerepo="$(echo "$HOME/Projects/gitlab/$1" | sed 's/\",// ; s/\.[^.]*$// ; s#"##g')"
    mkdir -p "$HOME/Projects/gitlab/$1"
    __cd_into "$homerepo"
    repos_init $REPODIR
    exit "$?"
    ;;

  clone) # Clone repo from gitlab
    shift 2
    if [ "$#" -ne 1 ]; then printf_exit "Usage: gitadmin gitlab clone username/projectname"; fi
    if [ "$1" = "--help" ]; then printf_exit "Clone a gitlab project\n\t\tUsage: gitadmin gitlab clone username/projectname"; fi
    do_not_add_a_url "$1"
    homerepo="$(echo "$HOME/Projects/gitlab/$1" | sed 's/\",// ; s/\.[^.]*$// ; s#"##g')"
    if [ -d "$homerepo" ]; then
      printf_green "The repo already exists so attempting update"
      git -C "$homerepo" pull -q
    else
      printf_green "Cloning the repo from gitlab.com/$1"
      git clone -q "https://gitlab.com/$1.git" "$homerepo"
    fi
    __cd_into "$homerepo"
    exit "$?"
    ;;

  remote) # add gitlab to remote
    shift 1
    if [ "$#" -ne 2 ]; then printf_exit "Usage: gitadmin gitlab remote username/projectname"; fi
    [ "$1" = "--help" ] && printf_exit "Add a gitlab project to remote\n\t\tUsage: gitadmin gitlab remote username/projectname"
    do_not_add_a_url "$1"
    git remote add "$1" https://gitlab.com/$2.git
    exit "$?"
    ;;
  esac
  ;;

private)
  if [ -z "$PERSONAL_GIT_HOST" ]; then printf_exit "You dont have the env variable PERSONAL_GIT_HOST set"; fi
  [ "$1" = "--help" ] && printf_green "Useful if you have a private server such as gitea" && exit 0
  case $2 in
  init) # init a private repo
    shift 2
    if [ "$#" -ne 1 ]; then printf_exit "Usage: gitadmin private init RepoName"; fi
    if [[ "$1" = "--help" ]]; then printf_exit "Create a new private project\n\t\tUsage: gitadmin private init RepoName"; fi
    do_not_add_a_url "$1"
    homerepo="$(echo "$HOME/Projects/private/$1" | sed 's/\",// ; s/\.[^.]*$// ; s#"##g')"
    mkdir -p "$HOME/Projects/private/$1"
    __cd_into "$homerepo"
    repos_init $REPODIR
    exit "$?"
    ;;

  clone) # Clone repo from private
    shift 2
    if [ "$#" -ne 1 ]; then printf_exit "Usage: gitadmin private clone username/projectname"; fi
    if [ "$1" = "--help" ]; then printf_exit "Clone a private project\n\t\tUsage: gitadmin private clone username/projectname"; fi
    do_not_add_a_url "$1"
    homerepo="$(echo "$HOME/Projects/private/$1" | sed 's/\",// ; s/\.[^.]*$// ; s#"##g')"
    if [ -d "$homerepo" ]; then
      printf_green "The repo already exists so attempting update"
      git -C "$homerepo" pull -q
    else
      printf_green "Cloning the repo from $PERSONAL_GIT_HOST/$1"
      git clone -q "$PERSONAL_GIT_HOST/$1.git" "$homerepo"
    fi
    __cd_into "$homerepo"
    exit "$?"
    ;;

  remote) # add private to remote
    shift 1
    if [ "$#" -ne 2 ]; then printf_exit "Usage: gitadmin private remote username/projectname"; fi
    [ "$1" = "--help" ] && printf_exit "Add a private project to remote\n\t\tUsage: gitadmin private remote username/projectname"
    do_not_add_a_url "$1"
    git remote add "$1" "$PERSONAL_GIT_HOST/$2.git"
    exit "$?"
    ;;
  esac
  ;;

newsite)
  shift 1
  newsite "$@"
  ;;

setup)
  shift 1
  if [ "$1" = "--automate" ] || [ "$1" = "--automated" ]; then
    shift 1
    run_git_setup_automated "$@"
  else
    run_git_setup "$@"
  fi
  ;;

stow)
  shift 1
  dotfiles stow "$@"
  ;;

*)
  shift 0
  if [ -z "$1" ]; then
    __help
    exit
  fi
  USERNAME="$1"
  TOKEN="${GITHUB_ACCESS_TOKEN:-$2}"
  REPO_URL="https://github.com/$USERNAME"
  if [ ! -z "$TOKEN" ]; then
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000&type=owner"
    MESSAGE="Getting the repos for $USERNAME using\n\t\tgit hub token $TOKEN"
  else
    GITHUBAPIREPO="https://api.github.com/users/$USERNAME/repos?per_page=1000"
    MESSAGE="Getting the repos for $USERNAME"
  fi
  curl -H "Authorization: token $TOKEN" -Ls $GITHUBAPIREPO | grep -w clone_url | awk -F / '{print $NF}' | sed 's/\",//' | sed 's/\.[^.]*$//' >"$TMPFILE"
  COUNT="$(cat $TMPFILE | wc -l)"
  printf_green "$MESSAGE\n\t\tThere is currently $COUNT repos avaliable\n\t\tInititialing $REPO_URL"
  main
  ;;

esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

rm -Rf "/tmp/github-casjaysdev-*"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $EXIT
# end
