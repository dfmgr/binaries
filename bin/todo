#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103201950-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : todo --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 19:50 EDT
# @File          : todo
# @Description   : Setup a console base todo
# @TODO          : Clean up code
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
unset TMUX
hour="$(date +"%H:%M")"
month="$(date +"%m")"
year="$(date +"%Y")"
day="$(date +"%d")"
todoeditor="${TODO_EDITOR:-vim}"
tododir="${TODO_DIR:-$HOME/.local/share/editors/todos}"
todoarchive="${TODO_ARCHIVE:-$tododir/archives/$year/$month}"
todoarchivefile="$todoarchive/$day-$hour.md"
todotitle="${TODO_TITLE:-Created on $(date +"%B") $(date +"%d"), $year at $hour}"
TODO_GIT="${TODO_GIT:-disabled}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$HOME/.config/todo/settings" ] && . "$HOME/.config/todo/settings"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__mkd "$tododir"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
tmux_conf() {
  if [ ! -f "$tododir/tmux.conf" ]; then
    if [ -f "$HOME/.config/tmux/others/editors.conf" ]; then
      __cp_rf "$HOME/.config/tmux/others/editors.conf" "$tododir/tmux.conf"
    else
      __cp_rf "$CASJAYSDEVDIR/templates/tmux.conf" "$NOTES_DIRECTORY/tmux.conf"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__config() {
  printf_green "Creating $HOME/.config/todo/settings file"
  __mkd "$HOME/.config/todo"
  echo '# Settings for todo
tododir='"$tododir"'
# Title for new files
todotitle="Created on $(date +"%B") $(date +"%d"), $year at $hour ##"
# archive folder
todoarchive="$tododir/archives/$year/$month"
# vim/nano/emacs
todoeditor='"$todoeditor"'
# run git commit
TODO_GIT='"$TODO_GIT"'
' | tee $HOME/.config/todo/settings &>/dev/null
  [ -f "$HOME/.config/todo/settings" ] && printf_green "Settings file has been created" || printf_error "Failed to generate the config file"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__filename() {
  if [ -n "$1" ]; then
    cleaninput=${*// /\/}
    name="${cleaninput:-all}"
    file="${name//$tododir/$name}"
  else
    name="all"
    file="$name/index.md"
  fi
  filename="${file//$tododir/$file}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_tmux() {
  local name="$name"
  local filename="$filename"
  if [ ! -f "$tododir/$filename" ] || [ ! -s "$tododir/$filename" ]; then
    local titleheader="TODO for $name: $todotitle  "
    [ -d "$tododir/all" ] || __mkd "$tododir/all"
    [ -d "$tododir/$name" ] || __mkd "$tododir/$name"
    if [ -d "$tododir/$filename" ]; then
      filename="$filename/index.md"
    else
      filename="$filename"
    fi
    printf "%s\n\n" "## $titleheader" >"$tododir/$filename"
  fi
  __tmux "$tododir/$filename"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__delete() {
  if [ -f "$1" ] || [ -d "$1" ]; then
    __rm_rf "$1" && return 0 || return 1
  else
    MESG="The file $1 doesn't exist" && return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tmux() {
  unset TMUX
  tmux -f "$tododir/tmux.conf" new-session -D -A -s todo "$todoeditor $1" &>/dev/null
}
__run_git() { if [ -d "$tododir/.git" ]; then gitcommit "$tododir" todo; else gitadmin "$tododir" setup; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
tmux_conf
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case "$1" in
*config)
  shift 1
  __config
  ;;

*git)
  shift 1
  __run_git
  ;;

*list | *l)
  shift 1
  if [ -d "$tododir" ] && [ "$(__count_files "$tododir/*/*" "4")" -ne 0 ]; then
    printf_green "Listing the files in $tododir"
    find -L "$tododir" -type f,l -iname "*.md" -o -iname "*.txt" | sed 's#'$tododir/'##g' | __column | printf_read "3"
  else
    printf_exit "No todos exist in: $tododir"
  fi
  ;;

*archive)
  shift 1
  __filename "$*"
  if [ ! -d "$todoarchive" ]; then
    printf_green "Creating $todoarchive directory"
    __mkd "$todoarchive"
  fi
  if [ -f "$tododir/$filename" ]; then
    printf_green "Archiving $tododir/$filename to:"
    printf_green "$todoarchivefile"
    mv -f "$tododir/$filename" "$todoarchivefile" &>/dev/null
    [ -f "$todoarchivefile" ] && printf_green "File has been archived" || printf_error "Failed to achive file"
  else
    printf_exit "$tododir/$filename doesn't exist"
  fi
  ;;

*remove | *r)
  shift 1
  __filename "$*"
  if __delete "$tododir/$filename"; then
    printf_green "$tododir/$filename has been deleted"
    exitCode=0
  elif [ -n "$MESG" ]; then
    printf_error "$MESG"
    exitCode=1
  else
    printf_error "failed to delete $tododir/$filename"
    exitCode=1
  fi
  exit $exitCode
  ;;

*open | *o)
  shift 1
  __filename "$*"
  __run_tmux "$tododir/$filename"
  ;;

*)
  __filename "$*"
  __run_tmux "$tododir/$filename"
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ "$TODO_GIT" != "enabled" ] || __run_git
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
