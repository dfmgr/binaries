#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103201711-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : mailsync --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 17:11 EDT
# @File          : mailsync
# @Description   : Sync mail and give notification if there is new mail.
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__cmd_exists notifications >/dev/null || exit 1
__am_i_online --error || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export DBUS_SESSION_BUS_ADDRESS="${DBUS_SESSION_BUS_ADDRESS:-unix:path=/run/user/$(id -u)/bus}"
[ -d "$PASSWORD_STORE_DIR" ] || [ -d "$HOME/.local/share/password-store" ] &&
  export PASSWORD_STORE_DIR="${PASSWORD_STORE_DIR:-$HOME/.local/share/password-store}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run only if user logged in (prevent cron errors)
pgrep -u "${USER:=$LOGNAME}" >/dev/null || printf_exit "$USER not logged in; sync will not run."
# Run only if not already running in other instance
pgrep -x mbsync >/dev/null && printf_exit "mbsync is already running."
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
notify() {
  NOTIFY_CLIENT_NAME="mutt-wizard"
  NOTIFY_CLIENT_ICON="Thunderbird"
  notifications "mutt-wizard" "ðŸ“¬ $2 new mail(s) in \`$1\` account."
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check account for new mail. Notify if there is new content.
syncandnotify() {
  acc="$(echo "$account" | sed "s/.*\///")"
  mbsync "$acc"
  new=$(find "$HOME/.local/share/mail/$acc/INBOX/new/" "$HOME/.local/share/mail/$acc/Inbox/new/" "$HOME/.local/share/mail/$acc/inbox/new/" -type f -newer "$HOME/.config/mutt/.mailsynclastrun" 2>/dev/null)
  newcount=$(echo "$new" | sed '/^\s*$/d' | wc -l)
  if [ "$newcount" -gt "0" ]; then
    notify "$acc" "$newcount" &
    for file in $new; do
      # Extract subject and sender from mail.
      from=$(awk '/^From: / && ++n ==1,/^\<.*\>:/' "$file" | perl -CS -MEncode -ne 'print decode("MIME-Header", $_)' | awk '{ $1=""; if (NF>=3)$NF=""; print $0 }' | sed 's/^[[:blank:]]*[\"'\''\<]*//;s/[\"'\''\>]*[[:blank:]]*$//')
      subject=$(awk '/^Subject: / && ++n == 1,/^\<.*\>: / && ++i == 2' "$file" | head -n-1 | perl -CS -MEncode -ne 'print decode("MIME-Header", $_)' | sed 's/^Subject: //' | sed 's/^{[[:blank:]]*[\"'\''\<]*//;s/[\"'\''\>]*[[:blank:]]*$//' | tr -d '\n')
      notify "ðŸ“§$from:" "$subject" &
    done
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Sync accounts passed as argument or all.
if [ "$#" -eq "0" ]; then
  accounts="$(awk '/^Channel/ {print $2}' "$HOME/.mbsyncrc")"
else
  accounts=$*
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
echo " ðŸ”ƒ" >/tmp/imapsyncicon_"$USER"
[ -n "${STATUSBAR:?}" ] && devnull pkill -RTMIN+12 "${STATUSBAR:?}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Parallelize multiple accounts
for account in $accounts; do
  syncandnotify &
done
wait
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
rm -f /tmp/imapsyncicon_"$USER"
[ -n "${STATUSBAR:?}" ] && devnull pkill -RTMIN+12 "${STATUSBAR:?}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
notmuch new 2>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#Create a touch file that indicates the time of the last run of mailsync
touch "$HOME/.config/mutt/.mailsynclastrun"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
