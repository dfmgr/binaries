#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 022420211808-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : notifications
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : send a notification to user
# @
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NOTIFYD_HOST="$NOTIFYD_HOST"
NOTIFYD_PORT="${NOTIFYD_PORT:-65001}"
NOTIFY_CLIENT="${NOTIFY_CLIENT:-no}"
NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
NOTIFY_CLIENT_URGENY="${NOTIFY_CLIENT_URGENY:-normal}"
NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-com.github.timecraft.notifier}"
NOTIFYD_APPNAME="${notifyAppName:-$NOTIFY_CLIENT_NAME}"
NOTIFYD_URGENY="${notifyUrgency:-$NOTIFY_CLIENT_URGENY}"
NOTIFYD_ICON="${NOTIFY_CLIENT_ICON}"
NOTIFY_CONFIG_DIR="$HOME/.config/notifications"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$NOTIFY_CONFIG_DIR/settings.conf" ] &&
  . "$NOTIFY_CONFIG_DIR/settings.conf" || {
  mkdir -p "$NOTIFY_CONFIG_DIR"
  touch "$NOTIFY_CONFIG_DIR/settings.conf"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$(uname -s)" = "Darwin" ]; then
  [[ "$1" = *ask ]] && exit 0
  __notify_send() { osascript -e "display notification \"${2}\" with title \"$1\"" || return; }
elif [ "$(uname -s)" = "Linux" ]; then
  DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u ${USER})/bus"
  XUSERS=($(who | grep -E "\(:[0-9](\.[0-9])*\)" | awk '{print $1$5}' | sort -u | grep $USER))
  if __cmd_exists notify-send; then
    [[ "$1" = *ask ]] && exit 0
    __notify_send() { notify-send --app-name="${NOTIFYD_APPNAME}" -u "${NOTIFYD_URGENY}" -i "${NOTIFY_CLIENT_ICON}" "$@"; }
  elif __cmd_exists notify-send.sh; then
    [[ "$1" = *ask ]] && exit 0
    __notify_send() { notify-send.sh --app-name="${NOTIFYD_APPNAME}" -u "${NOTIFYD_URGENY}" -i "${NOTIFY_CLIENT_ICON}" "$@"; }
  else
    [[ "$1" = *ask ]] && exit 1
    printf_exit 1 1 "There is no notify app installed: Install notify-send, dunst, deadd"
  fi
  NAME=(${XUSER/(/ })
  DISPLAY="${NAME[1]/)/}"
else
  exit 1
fi

__nc_send() { $netcat -c "$1" "$2" 2>>"$_LOG" && true || $netcat -w 1 "$1" "$2" 2>>"$_LOG" || return 1; }

__config() {
  printf_green "Generating the config file"
  __mkd "$NOTIFY_CONFIG_DIR"
  __rm_rf "$NOTIFY_CONFIG_DIR/settings.conf"
  cat <<EOF >"$NOTIFY_CONFIG_DIR/settings.conf"
# Settings for notifications
NOTIFYD_PORT="${NOTIFYD_PORT:-\$NOTIFYD_PORT}"
NOTIFYD_HOST="${NOTIFYD_HOST:-\$NOTIFYD_HOST}"
NOTIFY_CLIENT="${NOTIFY_CLIENT:-\$NOTIFY_CLIENT}"
EOF
  echo '
# Option Settings
notifyAppName="${APPNAME:-$notifyAppName}"
notifyIconName="${notifyIconName:-com.github.timecraft.notifier}"
notifyUrgency="${notifyUrgency:-normal}"
' >>"$HOME/.config/notifications/settings"

  if [ -f "$NOTIFY_CONFIG_DIR/settings.conf" ]; then
    printf_green "config saved to $NOTIFY_CONFIG_DIR/settings.conf"
  else
    printf_error "Failed to save the configuration"
  fi
}

__run_bg() {
  local notifyDir="${TMP:-/tmp}/notifications/process"
  [ -f "$notifyDir/kill" ] && __rm_rf $notifyDir/kill
  notifications "notifications" "Starting server: to stop make the file $notifyDir/kill"
  __mkd "$notifyDir"
  while :; do
    for f in $notifyDir/*; do
      if [ -f "$f" ]; then
        title="$(cat "$f" | awk '{print $1}' 2>/dev/null)"
        message="$(cat "$f" | sed 's#'$(cat $f | awk '{print $1}')' ##g' 2>/dev/null)"
        notifications "$title" "$message"
      fi
      rm -Rf "$f"
      sleep 30
      [ -f "$notifyDir/kill" ] && break || continue
    done
    if [ -f "$notifyDir/kill" ]; then
      __rm_rf "$notifyDir"/*
      notifications "notifications" "Stopping background proccess"
      break
    fi
  done
}

__notifications_cli() {
  __netcat_test
  __mkd "$TMP/notify-client"
  local title="$1"
  local msg="$2"
  local _PATH="$(mktemp ${TMPDIR:-/tmp}/notify-client/XXX.tmp)"
  local _LOG="${TMPDIR:-/tmp}/notify-client.log"
  printf_green "Attempting to send $msg to $NOTIFYD_HOST on $NOTIFYD_PORT" 2>>"$_LOG"
  notifications "Daemon" "Attempting to send $msg to $NOTIFYD_HOST on $NOTIFYD_PORT" 2>>"$_LOG"
  printf "%s\n" "$title" "$msg" >"$_PATH" 2>>"$_LOG" &&
    cat "$_PATH" 2>>"$_LOG" | __nc_send "$NOTIFYD_HOST" "$NOTIFYD_PORT" 2>>"$_LOG" &&
    __rm_rf "$_PATH" && sleep 3 && return 0 || {
    notifications "Daemon" "Failed to send message: ensure the server is running"
    return 1
  }
}

__notifications() {
  local title="$1"
  local msg="$2"
  __notify_send "$title" "$msg" || return 1
  if [ "$NOTIFY_CLIENT" = "yes" ] && [ -n "$NOTIFYD_HOST" ]; then
    __notifications_cli "$title" "$msg"
  else
    return 0
  fi

}
__notifications_all() {
  local title="$1"
  local msg="$2"
  if [ "$(uname -s)" = "Linux" ]; then
    shift
    XUSERS=($(who | grep -E "\(:[0-9](\.[0-9])*\)" | awk '{print $1$5}' | sort -u))
    for XUSER in $XUSERS; do
      NAME=(${XUSER/(/ })
      DISPLAY="${NAME[1]/)/}"
      DBUS_ADDRESS=unix:path=/run/user/"$(id -u ${NAME[0]})"/bus
      sudo -u "${NAME[0]}" DISPLAY="${DISPLAY}" \
        DBUS_SESSION_BUS_ADDRESS="${DBUS_ADDRESS}" \
        PATH="${PATH}" \
        notify-send --app-name="${notifyAppName:-}" -u "${notifyUrgency:-normal}" -i "${notifyIconName:-com.github.timecraft.notifier}" "$title" "$msg" || return 0
      __cmd_exists wall && echo "$title: $msg" | wall
      printf_console "3" "$title: $msg" >/dev/fd/0
    done
  else
    __notifications "$title" "$msg" || return 0
    __cmd_exists wall && echo "$title: $msg" | wall
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ ! -f "$NOTIFY_CONFIG_DIR/settings.conf" ] && [[ "$1" != *config ]]; then
  __config
fi

case $1 in
--bg)
  shift 1
  __run_bg &
  exit
  ;;

config | --config)
  shift 1
  __config
  exit
  ;;

client | --client)
  shift 1
  if [ ${#} -eq 0 ]; then
    title="$notifyAppName"
    msg="$(</dev/stdin)"
    shift
  else
    if [ ${#} -eq 1 ]; then
      title="$notifyAppName"
      shift 1
      msg="$(</dev/stdin)"
      shift
    else
      title="${1}"
      shift 1
      msg="${*}"
      shift
    fi
  fi

  if [ -n "$NOTIFYD_HOST" ]; then
    __notifications_cli "$title" "$msg"
  else
    notifications "Daemon" "Please set NOTIFYD_HOST variable to your server"
    printf_exit 1 1 "Please set NOTIFYD_HOST: variable to your server $NOTIFYD_HOST"
  fi
  ;;

--all)
  shift 1
  if [ ${#} -eq 0 ]; then
    title="$notifyAppName"
    msg="$(</dev/stdin)"
    shift
  else
    if [ ${#} -eq 1 ]; then
      title="$notifyAppName"
      shift 1
      msg="$(</dev/stdin)"
      shift
    else
      title="${1}"
      shift 1
      msg="${*}"
      shift
    fi
  fi
  __notifications_all "$title" "$msg"
  ;;

-)
  shift 1
  title="$notifyAppName"
  msg="$(</dev/stdin)"
  __notifications "$title" "$msg"
  ;;

*)
  if [ ${#} -eq 0 ]; then
    title="$notifyAppName"
    msg="$(</dev/stdin)"
    shift
  else
    if [ ${#} -eq 1 ]; then
      title="$notifyAppName"
      msg="$1"
      shift
    else
      title="${1}"
      shift 1
      msg="${*}"
      shift
    fi
  fi
  __notifications "$title" "$msg"
  ;;

esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
