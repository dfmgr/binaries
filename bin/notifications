#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 011320210202-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : notifications
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : send a notification to user
# @
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set functions
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
systemmgr_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
notifyAppName="NotifyDaemon"
notifyIconName="notification-message-IM"
notifyUrgency="normal"

if [ "$(uname -s)" = "Darwin" ]; then
  __notify_send() { osascript -e "display notification \"${2}\" with title \"$1\"" || return; }
elif [ "$(uname -s)" = "Linux" ]; then
  __cmd_exists notify-send
  __notify_send() { notify-send --app-name="$notifyAppName" -u normal -i "$notifyIconName" "$@"; }
elif __cmd_exists notify-send.sh; then
  __notify_send() { notify-send.sh --app-name="$notifyAppName" -u normal -i "$notifyIconName" "$@"; }
else
  exit 1
fi
__nc_send() { $netcat -c $1 $2 2>>"$_LOG" && true || $netcat -w 1 $1 $2 2>>"$_LOG" || return 1; }
__clean_return() {
  __rm_rf "$_PATH" "$_LOG"
  return "$1"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NOTIFYD_HOST="${NOTIFYD_HOST}"
NOTIFYD_PORT="${NOTIFYD_PORT:-65001}"
[ -f "$HOME/.config/notifications/settings" ] && . "$HOME/.config/notifications/settings"

__config() {
  printf_green "Generating the config file"
  if [ ! -f "$HOME/.config/notifications/settings" ]; then
    __rm_rf "$HOME/.config/notifications"
    __mkd "$HOME/.config/notifications"
    echo NOTIFYD_PORT="${NOTIFYD_PORT:-65001}" >"$HOME/.config/notifications/settings"
    echo NOTIFYD_HOST="${NOTIFYD_HOST}" >>"$HOME/.config/notifications/settings"
  fi
  [ -f "$HOME/.config/notify-daemon/settings" ] && printf_green "config saved to $HOME/.config/notify-daemon/settings" ||
    printf_error "Failed to save the configuration"
}

__run_bg() {
  local notifyDir="${TMP:-/tmp}/notify/process"
  [ -f "$notifyDir/kill" ] && __rm_rf $notifyDir/kill
  notifications "notifications" "Starting server: to stop make the file $notifyDir/kill"
  __mkd "${notifyDir}"
  while :; do
    for f in $notifyDir/*; do
      if [ -f "$f" ]; then
        title="$(cat $f | awk '{print $1}' 2>/dev/null)"
        message="$(cat $f | sed 's#'$(cat $f | awk '{print $1}')' ##g' 2>/dev/null)"
        notifications "$title" "$message"
      fi
      rm -Rf "$f"
      sleep 30
      [ -f "$notifyDir/kill" ] && break
    done
    if [ -f "$notifyDir/kill" ]; then
      __rm_rf "$notifyDir"/*
      notifications "notifications" "Stopping server"
      break
    fi
  done
}

__notifications() {
  if [ ${#} -eq 0 ]; then
    local title=""
    local msg="$(</dev/stdin)"
    shift
  else
    if [ ${#} -eq 1 ]; then
      local title="${1}"
      shift 1
      local msg="$(</dev/stdin)"
      shift
    else
      local title="${1}"
      shift 1
      local msg="${*}"
      shift
    fi
  fi
  shift
  __notify_send "$title" "$msg" || return 0
}

__notifications_all() {
  if [ ${#} -eq 0 ]; then
    local title=""
    local msg="$(</dev/stdin)"
    shift
  else
    if [ ${#} -eq 1 ]; then
      local title="${1}"
      shift 1
      local msg="$(</dev/stdin)"
      shift
    else
      local title="${1}"
      shift 1
      local msg="${*}"
      shift
    fi
  fi
  shift
  if [ "$(uname -s)" = "Linux" ]; then
    shift
    XUSERS=($(who | grep -E "\(:[0-9](\.[0-9])*\)" | awk '{print $1$5}' | sort -u))
    for XUSER in $XUSERS; do
      NAME=(${XUSER/(/ })
      DISPLAY="${NAME[1]/)/}"
      DBUS_ADDRESS=unix:path=/run/user/"$(id -u ${NAME[0]})"/bus
      sudo -u "${NAME[0]}" DISPLAY="${DISPLAY}" \
        DBUS_SESSION_BUS_ADDRESS="${DBUS_ADDRESS}" \
        PATH="${PATH}" \
        notify-send -u normal -i "notification-message-IM" "$title" "$msg" || return 0
      __cmd_exists wall && echo "$title: $msg" | wall
      printf_console "3" "$title: $msg" >/dev/fd/0
    done
  else
    __notifications "$title" "$msg" || return 0
    __cmd_exists wall && echo "$title: $msg" | wall
  fi
}

__client() {
  if [ ${#} -eq 0 ]; then
    local title=""
    local msg="$(</dev/stdin)"
    shift
  else
    if [ ${#} -eq 1 ]; then
      local title="${1}"
      shift 1
      local msg="$(</dev/stdin)"
      shift
    else
      local title="${1}"
      shift 1
      local msg="${*}"
      shift
    fi
  fi
  shift

  __mkd "$TMP/notify-client"
  local _SERVER="$NOTIFYD_HOST"
  local _TMP="${TMPDIR:-/tmp}"
  local _PORT="65001"
  local _PATH="$(mktemp $TMP/notify-client/XXX.tmp)"
  local _LOG="$_PATH.log"
  __netcat_test
  printf_green "Attempting to send message to $_SERVER on $_PORT"
  printf "%s\n" "$title" "$msg" >"${_PATH}" 2>>$_LOG
  cat "$_PATH" 2>>$_LOG | __nc_send "$_SERVER" "$_PORT" && __clean_return 0 || __clean_return 1
  return "$?"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

case $1 in
--bg)
  shift 1
  __run_bg &
  exit
  ;;

config | --config)
  shift 1
  __config
  exit
  ;;

client | --client)
  shift 1
  if [ ! -f "$HOME/.config/notifications/settings" ]; then
    __mkd "$HOME/.config/notifications"
    echo NOTIFYD_PORT="${NOTIFYD_PORT:-65001}" >"$HOME/.config/notifications/settings"
    echo NOTIFYD_HOST="${NOTIFYD_HOST}" >>"$HOME/.config/notifications/settings"
  fi
  if [ -z "$NOTIFYD_HOST" ]; then
    notifications "Daemon" "Please set NOTIFYD_HOST variable to your server"
    exit 1
  else
    __client "$@"
  fi
  ;;

--all)
  shift 1
  __notifications_all "$@"
  ;;

*)
  [ -n "$NOTIFYD_HOST" ] && __client "$@"
  __notifications "$@"
  #__cmd_exists wall && echo "$@" | wall
  #printf_console "3" "$@" >/dev/fd/0
  ;;

esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
