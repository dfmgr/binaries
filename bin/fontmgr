#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##Version      : 010820210439-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : fontmgr
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : Install system fonts
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Set functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-applications.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
else
  mkdir -p "/tmp/CasjaysDev/functions"
  curl -LSs "$SCRIPTSFUNCTURL/$SCRIPTSFUNCTFILE" -o "/tmp/CasjaysDev/functions/$SCRIPTSFUNCTFILE" || exit 1
  . "/tmp/CasjaysDev/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

fontmgr_install

#---------------------------------------------------------------------------------------

[ "$1" = "--version" ] && get_app_info "$APPNAME"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
API="$(curl -s "https://api.github.com/orgs/fontmgr/repos?per_page=1000" | jq -r '.[] | .name' 2>/dev/null)"

__help() {
  printf_green "
\t\tA Package Manager for all systems   |   Usage: sudo fontmgr command
\t\tfontmgr version              - show the version info          | IE: fontmgr version Hack
\t\tfontmgr makecache            - update font cache              | IE: fontmgr makecache
\t\tfontmgr list                 - list all installable fonts     | IE: fontmgr list
\t\tfontmgr list-installed       - list installed fonts           | IE: fontmgr list-installed
\t\tfontmgr search               - find font                      | IE: fontmgr search font
\t\tfontmgr search-installed     - search installed fonts         | IE: fontmgr search-installed font
\t\tfontmgr install              - install a font                 | IE: fontmgr install font
\t\tfontmgr remove               - remove a font                  | IE: fontmgr remove font
\t\tfontmgr update               - update the fonts               | IE: fontmgr update
"
  return
}

#---------------------------------------------------------------------------------------

removefont() {
  devnull sudo rm -Rf "$HOMEDIR/$rmf"
  devnull sudo unlink "$FONTDIR/$rmf"
  devnull sudo fc-cache -f
}

#---------------------------------------------------------------------------------------

__listfonts() {
  printf_green "All Fonts"
  printf_green "$LIST"
}

#---------------------------------------------------------------------------------------

case "$1" in
help | h | --h*)
  __help
  ;;

makecache)
  fc-cache -f
  ;;

list)
  __listfonts
  ;;

search)
  shift 1
  FONT="$1"
  echo $LIST | tr ' ' '' 2>/dev/null | grep --color=auto -Fi "$FONT" || printf_exit "That font does not exist"
  ;;

list-installed)
  shift 1
  FONT="$1"
  fc-list "$@" || printf_exit "Something went wrong ðŸ˜•"
  ;;

search-installed)
  shift 1
  FONT="$1"
  fc-list | grep --color=auto -Fi "$FONT" || printf_exit printf_exit "That font does not exist"
  ;;

remove)
  shift 1
  printf_green "Removing the fonts from $HOMEDIR"
  declare -a LISTARRAY="$*"
  for rmf in ${LISTARRAY[*]}; do
    printf_yellow "Removing $rmf font from your system"
    removefont "$HOMEDIR/$rmf"
    getexitcode "$rmf has been removed"
    echo ""
  done
  ln_rm "$FONTDIR/"
  ;;

update)
  shift 1
  if [ -z "$1" ]; then
    if [[ -d $USRUPDATEDIR && -n "$(ls -A $USRUPDATEDIR)" ]]; then
      printf_green "Updating the fonts in $HOMEDIR"
      for upd in $(ls $USRUPDATEDIR); do
        if urlcheck $REPO/$upd/raw/master/install.sh; then
          printf_yellow "Initializing the installer from"
          printf_purple "$REPO/$upd"
          bash -c "$(curl -LSs $REPO/$upd/raw/master/install.sh)" 2>/dev/null
          getexitcode "$upd has been installed"
        else
          urlinvalid $REPO/$upd/raw/master/install.sh
        fi
        echo ""
      done

    elif [[ -d $SYSUPDATEDIR && -n "$(ls -A $SYSUPDATEDIR)" ]]; then
      printf_green "Updating the fonts in $HOMEDIR"
      for updadmin in $(ls $SYSUPDATEDIR); do
        if urlcheck $REPO/$updadmin/raw/master/install.sh; then
          printf_yellow "Initializing the installer from"
          printf_purple "$REPO/$updadmin"
          sudo bash -c "$(curl -LSs $REPO/$updadmin/raw/master/install.sh)" 2>/dev/null
          getexitcode "$updadmin has been installed"
        else
          urlinvalid $REPO/$updadmin/raw/master/install.sh
        fi
        echo ""
      done
    fi

  else
    sudo fontmgr install "$@"
  fi
  ;;

install)
  shift 1
  printf_green "Installing fonts to $FONTDIR"
  [ "$1" = "--all" ] && declare -a LISTARRAY="$LIST" ||
    declare -a LISTARRAY="$*"
  for ins in ${LISTARRAY[*]}; do
    if urlcheck $REPO/$ins/raw/master/install.sh; then
      printf_yellow "Initializing the installer from"
      printf_purple "$REPO/$ins"
      bash -c "$(curl -LSs $REPO/$ins/raw/master/install.sh)" 2>/dev/null
      getexitcode "$ins has been installed"
    else
      urlinvalid $REPO/$ins/raw/master/install.sh
    fi
    echo ""
  done
  ;;

cron)
  shift 1
  if [[ $USER != "root" ]]; then
    if [[ -d $USRUPDATEDIR && -n "$(ls -A $USRUPDATEDIR)" ]]; then
      file="$(ls -A $USRUPDATEDIR/$1 2>/dev/null)"
      if [ -f "$file" ]; then
        $file --cron
      fi
    fi
  else
    if [[ -d $SYSUPDATEDIR && -n "$(ls -A $SYSUPDATEDIR)" ]]; then
      file="$(ls -A $SYSUPDATEDIR/$1 2>/dev/null)"
      if [ -f "$file" ]; then
        sudo $file --cron
      fi
    fi
  fi
  ;;

version)
  shift 1
  ANAME="$1"
  if [ -d "$USRUPDATEDIR" ] && [ -n "$(ls -A $USRUPDATEDIR/$1 2>/dev/null)" ]; then
    file="$(ls -A $USRUPDATEDIR/$1 2>/dev/null)"
    if [ -f "$file" ]; then
      printf_green "Information about $1: \n$(bash -c "$file --version")"
    fi
  elif [ -f "$(command -v $1 2>/dev/null)" ]; then
    printf_green "Information about $1: $(bash -c "$ANAME --version 2>/dev/null")"
  else
    printf_exit "File was not found is it installed?"
  fi
  printf_green "scripts version is $(cat ${SCRIPTSFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}/version.txt)"
  exit
  ;;

*)
  __help
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
