#!/usr/bin/env bash

APPNAME="dockermgr"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 010920210727-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : dockermgr
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : docker script to manage containers
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
dockermgr_install
__options "$@"
__am_i_online_err "Can not setup docker: No internet"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

__init() {
  if ! __cmd_exists docker; then
    printf_green "Installing docker and setting up systemd"
    printf_green "This will take a few minutes"
    __requiresudo bash -c "$(__curl https://get.docker.com)" || printf_exit "Installation has failed"
  fi
  mkdir -p "$HOME/.docker"
  if grep -q docker /etc/group; then
    __requiresudo usermod -aG docker "$USER"
    __requiresudo chown -R "$USER":"$USER" "$HOME/.docker"
    __requiresudo chmod -R g+rwx "$HOME/.docker"
  fi

  if [ ! -f /etc/systemd/system/docker.service.d/docker.conf ]; then
    __requiresudo mkdir -p /etc/systemd/system/docker.service.d
    __devnull2 cat <<EOF | __requiresudo tee /etc/systemd/system/docker.service.d/docker.conf
[Service]
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock
EOF
  fi
  __requiresudo systemctl enable docker --now
  if systemctl status docker | grep -q active 2>/dev/null; then
    printf_green "docker installation has completed"
  else
    printf_red "docker installation has failed"
  fi
}

__init_help() {
  printf_green "Setup docker"
  exit 1
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

__install() {
  declare -a LISTARRAY="$*"
  for container in ${LISTARRAY[*]}; do
    APPNAME="$1"
    if [ -d "$HOMEDIR/$APPNAME" ]; then
      git -C "$HOMEDIR/$APPNAME" reset --hard -q
      git -C "$HOMEDIR/$APPNAME" pull -q
    else
      git clone -q "$REPO/$APPNAME" "$HOMEDIR/$APPNAME"
    fi
    chmod -Rf 755 "$HOMEDIR/$APPNAME/install.sh"
    __requiresudo -HE bash "$HOMEDIR/$APPNAME/install.sh"
    if [ -d "$HOMEDIR/$APPNAME/os" ]; then
      __requiresudo cp -Rf "$SHARE/$APPNAME/os/." /
    fi
  done
}

__install_help() {
  printf_green "Usage: $APPNAME install NAME    |    $APPNAME install transmission"
  exit 1
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

__run_help() {
  printf_green "Usage: dockerrun imageName"
  printf_green "See http://hub.docker.com for images"
  exit 1
}

__run_main() {
  NAME="$(echo $1 | sed 's/[!@#\$%^&*():]//g')"
  if [ "$(sudo docker ps -q -f status=running -f name=^/${NAME}$)" ]; then
    sudo docker container exec -it "$NAME" /bin/bash -l
  else
    if [ -n "$1" ]; then
      sudo docker run -d --network host -it --name "$NAME" --restart always "$1" /sbin/init &&
        sudo docker container exec -it "$NAME" /bin/bash -l
    else
      printf_exit "Error: No container name was given"
    fi
  fi
}

__run_update() {
  if [ "$*" != "" ]; then
    __install "$@"
  else
    for d in $(ls "$HOMEDIR"); do
      __install "$d"
    done
  fi
}

__run_cron() {
  local frequency="0 4 * * 6"
  local croncmd="$APPNAME cron run"
  case $1 in
  run)
    logr bash -c "am_i_online && $(expr $RANDOM \% 300) && docker images | awk '(NR>1) && ($2!~/none/) {print $1":"$2}' | xargs -L1 docker pull"
    ;;
  remove)
    shift 1
    removecrontab "$frequency $croncmd"
    ;;
  add)
    addtocrontab "$frequency $croncmd"
    ;;
  *)
    addtocrontab "$frequency $croncmd"
    ;;
  esac

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

__ssh_help() {
  printf_green "Auto connect to first container if none are specified"
  printf_green "Usage: $APPNAME ssh container_name"
  exit 1
}

__ssh_error() {
  printf_red "There are no running containers"
  exit 1
}

__ssh_main() {
  CONTAINER="$1"
  if [[ "$CONTAINER" == "" ]]; then
    CONTAINER=$(docker ps | grep -Eo "^[0-9a-z]{8,}\b") || __ssh_error
  fi
  sudo docker exec -i -t "$CONTAINER" bash -l
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

case "$1" in

init)
  shift
  [ "$1" = "--help" ] && __init_help
  __init "$@"
  ;;

install)
  shift
  [ "$1" = "--help" ] && __install_help
  __install "$@"
  ;;

ssh)
  shift
  [ "$1" = "--help" ] && __ssh_help
  __ssh_main "$1"
  ;;

run)
  shift
  [ "$1" = "--help" ] && __run_help
  __run_main "$1"
  ;;

active)
  [ "$1" = "--help" ] && printf_exit "Show active containers"
  sudo docker ps | sed "s#$(head -n1)##g" | grep -v "^#" ||
    printf_exit "There are no active containers"
  ;;

inactive)
  [ "$1" = "--help" ] && printf_exit "Show all containers"
  sudo docker ps -a | sed "s#$(head -n1)##g" | grep -v "^#" ||
    printf_exit "There doesn't seem to be any containers on this system"
  ;;

log)
  shift
  docker log "$1"
  ;;

update)
  shift
  pkmgr update docker
  __run_update "$@"
  ;;

help)
  __help
  ;;

updater | cron)
  shift 1
  __run_cron "$*"
  ;;

list)
  shift 1
  run_install_available
  ;;

*)
  if ! __cmd_exists docker; then
    printf_read_question "Docker is not installed: would you like to install it?" "1"
    if printf_answer_yes; then
      __init
    else
      printf_exit "User cancelled"
    fi
  else
    __help
  fi
  ;;

esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End
