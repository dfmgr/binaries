#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 011320210115-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : backupapp
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : backup files and folders
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Set functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check for needed applications

__require_app tar

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
config() {
  __mkd "$HOME/.config/$APPNAME"
  cat <<EOF >"$HOME/.config/$APPNAME/settings"
notifyEnabled="${notifyEnabled}"
logdir="${logdir}
backupdir="${backupdir}"
dateformat="%Y-%m-%d-%H-%M-%S"
EOF
  exit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application

declare filename count backupdir rmpre4vbackup _APPNAME _APPDIRS
if [ "$1" = config ]; then config; fi
[ -f "$HOME/.config/$APPNAME/settings" ] && . "$HOME/.config/$APPNAME/settings"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

main() {
  __backupcmd() { tar cfzv "$backupdir/$filename" $appdir >>"$logdir/$appname.log" 2>>"$logdir/$appname.log" || return 1; }
  local appname="$_APPNAME"
  local appdir="$_APPDIRS"
  local logdir="${logdir:-HOME/.local/log/backups}"
  local curdate="$(date +"${dateformat:-%Y-%m-%d-%H-%M-%S}")"
  local filename="$appname-$curdate.tar.gz"
  local backupdir="${MY_BACKUP_DIR:-$HOME/.local/backups}/apps"
  local notifyEnabled="${notifyEnabled:-yes}"
  mkdir -p "$backupdir" "$logdir"
  [ "$notifyEnabled" = "yes" ] && notifications "Backupapp" "Starting backup of $appname"
  printf_header "# Started on $(date +'%A, %B %d, %Y %H:%M:%S')" "# Backing up $appdir" >>"$logdir/$appname.log" >>"$logdir/$appname.log"
  execute "__backupcmd" "Backing up $appname to $backupdir/$filename"
  exitCode=$?
  printf_header " #Ended on $(date +'%A, %B %d, %Y %H:%M:%S')" >>"$logdir/$appname.log"
  printf_newline "\n\n" >>"$logdir/$appname.log"
  if [ "$exitCode" = 0 ]; then
    printf_green "$ICON_GOOD The backup has completed successfully."
    printf_green "$ICON_GOOD Saved to: $backupdir/$filename"
    [ "$notifyEnabled" = "yes" ] && notifications "Backupapp" "Backup of $appname has completed"
  else
    printf_red "$ICON_ERROR The backup has failed to complete."
    printf_red "$ICON_ERROR More information can be found in the log file:"
    printf_exit "$logdir/$appname.log"
    [ "$notifyEnabled" = "yes" ] && notifications "Backupapp" "Backup of $appname has failed"
  fi
  leaveCount=5
  fileCount=$(ls $backupdir/$appname*.tar.gz 2>/dev/null | wc -l 2>/dev/null)
  removeoldbackups=$(ls $backupdir/$appname*.tar.gz 2>/dev/null)
  tailCount=$((fileCount - leaveCount))
  ls -t $removeoldbackups | tail -$tailCount 2>/dev/null | xargs rm -f
}

__local_cron_add() { __setupcrontab "0 0 1 * *" "$APPNAME $1 $2 >/dev/null 2>&1"; }
__local_cron_del() { __removecrontab "$APPNAME $1 $2"; }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case "$1" in
*cron)
  shift 1
  case "$1" in
  *add)
    shift 1
    if [ $# -eq 2 ]; then
      __local_cron_add "$1" "$2" && printf_green "$1 $2 has been added to your cron jobs"
    else
      printf_help 'Usage: '$APPNAME' cron --add "Backupname" "BackupDir"'
    fi
    exit $?
    ;;
  *del)
    shift 1
    if [ $# -eq 2 ]; then
      __local_cron_del "$1" "$2" && printf_green "$1 $2 has been removed from your cron jobs"
    else
      printf_help 'Usage: '$APPNAME' cron --del "Backupname" "BackupDir"'
    fi
    exit $?
    ;;
  *)
    printf_custom "4" 'Usage: '$APPNAME' cron --add "Backupname" "BackupDir"'
    printf_custom "4" 'Usage: '$APPNAME' cron --del "Backupname" "BackupDir"'
    exit
    ;;
  esac
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$1" = "--term" ]; then
  while :; do
    clear
    printf_newline "\n\n\n\n"
    printf_head "Backup Menu"
    printf_custom "6" "Welcome to the backup menu: type quit to exit"
    printf_read_question "2" "Enter backupname" "120" "_APPNAME"
    if [ "$_APPNAME" = "quit" ]; then
      break
    fi
    printf_read_question "2" "Enter directories" "140" "_APPDIRS"
    printf_newline
    main "$_APPNAME" "$_APPDIRS"
    printf_newline
    printf_read_question_nt "6" "Would you like to keep this window open? [y/N]" "1" cont "-s"
    printf_answer_yes "$cont" && continue || break
    printf_counter "5" "3" "Re-loading menu in"
  done
  printf_newline "\n\n"
  exit
else
  if [ -n "$1" ]; then _APPNAME="$1" && shift 1; else printf_green "Needs a name" && __help; fi
  if [ -n "$*" ]; then _APPDIRS="$*" && shift; else printf_green "Needs a directory" && __help; fi
  if [ -n "$_APPNAME" ] && [ -n "$_APPDIRS" ]; then
    main "$*"
  else
    printf_red "$ICON_ERROR Nothing to back up" && __help
  fi
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
