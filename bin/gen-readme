#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103200737-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : gen-readme --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 07:37 EDT
# @File          : gen-readme
# @Description   : Create a readme from template
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# I'm sure there is a better way to do this
if [ -d "$1" ]; then
  curDir="$1"
  shift 1
elif [ "$1" = "-d" ] || [ "$1" = "-dir" ] || [ "$1" = "--dir" ]; then
  curDir="$2"
  shift 2
  [ -d "$curDir" ] || printf_exit "$curDir doesn't seem to be a directory"
else
  curDir="$PWD"
fi
if [ "$curDir" = "." ]; then curDir="$(__basedir ".")"; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$HOME/.config/gen-readme/settings" ] && . "$HOME/.config/gen-readme/settings"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
readmeDir="${readmeDir:-$HOME/.config/gen-readme/files}"
readmeDefault="${readmeDefault:-default.md}"
gitconfig_user="${gitconfig_user:-$(__git_globaluser)}"
gitconfig_email="${gitconfig_email:-$(__git_globalemail)}"
__mkd "$readmeDir"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__file_failed() { printf_exit "Failed to get the readme file: $readmeFile"; }
__grep_desc() {
  grep -E ^'.*#.@Description' "$(type -P "${1}")" 2>/dev/null | grep ' :' |
    head -n1 | sed 's/.*#.@'*'.*  ://g;s#^ ##g' | grep '^'
}
create_local_file() {
  cat "$1" >"$curDir/README.md" 2>/dev/null
  if [ -f "$curDir/README.md" ]; then
    printf_green "Your README file has been created"
  else
    __file_failed "$1"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
get_remote_file() {
  __curl "$1" >"$curDir/README.md" 2>/dev/null
  if [ -f "$curDir/README.md" ]; then
    printf_green "Your README file has been created"
  else
    __file_failed "$1"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
generate_readme() {
  local readmeFile="${1:-$readmeDefault}"
  local whichreadme="$(__strip_ext $readmeFile || exit 1)"
  local author="$gitconfig_user"
  local curDir="$(dirname $curDir/README.md)"
  local BaseDir="${curDir##*/}"
  if [ -f "$readmeDir/$readmeFile" ]; then
    printf_green "Using the $whichreadme README for $curDir"
    create_local_file "$readmeDir/$readmeFile"
    [ -f ${curDir}/README.md ] && __sed -i "s#AuthorName#${author}#g" "${curDir}/README.md"
    [ -f ${curDir}/README.md ] && __sed -i "s#ProjectName#${BaseDir}#g" "${curDir}/README.md"
    [ -f ${curDir}/README.md ] && __sed -i "s#GEN_README_REPLACE_APPNAME#${BaseDir}#g" "${curDir}/README.md"
    if [ -f "${curDir}/install.sh" ]; then
      local REPLACE_DESCRIBE="$(__grep_desc "${curDir}/install.sh")"
      __sed -i "s#GEN_README_REPLACE_DESCRIBE#$REPLACE_DESCRIBE#g" "${curDir}/README.md"
    elif [ -f "$(type -P "${BaseDir}")" ]; then
      [ -d "$curDir/bin" ] && local PATH="$curDir/bin:$PATH"
      local command="$(type -P "${BaseDir}")"
      local REPLACE_DESCRIBE="$(__grep_desc "${command}")"
      __sed -i "s#GEN_README_REPLACE_DESCRIBE#$REPLACE_DESCRIBE#g" "${curDir}/README.md"
    fi

  else
    printf_exit 1 1 "$readmeDir/$readmeFile does not exist"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
gen_config() {
  cat <<EOF
# Settings for $APPNAME
readmeDir="$readmeDir"
readmeDefault="$readmeDefault"
gitconfig_user="$gitconfig_user"
gitconfig_email="$gitconfig_email"
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Find the readme
__find_readme() {
  arg1=${1// /\/}
  arg2=${2// /\/}
  arg3=${3// /\/}
  if [ -f "$(__find $readmeDir/$arg1/$arg2/${arg3:-default})" ]; then
    template="$(__find $readmeDir/$arg1/$arg2/${arg3:-default})"
    dest="${4:-$curDir/README.md}"
    shift 2
  elif [ -f "$(__find $readmeDir/$arg1/${arg2:-default})" ]; then
    template="$(__find $readmeDir/$arg1/${arg2:-default})"
    dest="${3:-$curDir/README.md}"
    shift 2
  elif [ -f "$(__find $readmeDir/${arg1:-default})" ]; then
    template="$(__find $readmeDir/${arg1:-default})"
    dest="${2:-$curDir/README.md}"
    shift 1
  elif [ -f "$(__find $readmeDir/$readmeDefault)" ]; then
    printf_green "Using the default template: $(__find $readmeDir/$readmeDefault)"
    template="$(__find $readmeDir/$readmeDefault)"
    dest="${1:-$curDir/README.md}"
  else
    printf_exit 1 1 "Can not find any readmes matching $1 ${2:-$readmeDefault}"
  fi
  template="${template//$readmeDir\//}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__copy_templates() {
  printf_green "Installing the readme files"
  if [ -d "$readmeDir/.git" ]; then
    git -C "$readmeDir" pull -q
  elif [ -d "${CASJAYSDEVDIR}/templates/readmes" ]; then
    printf_green "Copying the template files"
    printf_yellow "from: $CASJAYSDEVDIR/templates/readmes"
    printf_yellow "to: $readmeDir"
    __cp_rf "$CASJAYSDEVDIR/templates/readmes/." "$readmeDir/"
    if [ "$(__count_files $readmeDir)" -ne 0 ]; then
      printf_green "Copying has succeeded"
    else
      printf_error "Copying of files has failed"
    fi
  else
    printf_error "Can not get readme files"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__findcmd() {
  find "$readmeDir" -type f ${1} -not -path "${readmeDir}/*/.git/*" 2>/dev/null | __sed 's#'$readmeDir/'##g' | sort -u
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Init
if [ "$(__count_files $readmeDir)" -eq 0 ]; then
  __mkd "$readmeDir"
  if [ "$(__count_files "$CASJAYSDEVDIR/templates/readmes")" -ne 0 ]; then
    __copy_templates
  else
    printf_exit "1" "1" "No readme files exist"
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

case "$1" in
list | *-list)
  shift 1
  __findcmd "${1:-}" | printf_column "2"
  ;;

search | *-search)
  shift 1
  __findcmd | grep -i "${1:-*}" | printf_column "2"
  ;;

config | *-config)
  shift 1
  printf_green "Generating the config file $HOME/.config/gen-readme/settings.conf"
  gen_config >"$HOME/.config/gen-readme/settings.conf"
  __copy_templates
  exit
  ;;

copy | *-copy)
  shift 1
  __copy_templates
  ;;

download | *-download)
  shift 1
  printf_green "Cloning the repo to $readmeDir/"
  __git_clone "$1 " "$readmeDir/"
  exit
  ;;

custom | *-custom)
  shift 1
  __find_readme "$@"
  if [ -f "$readmeFile" ]; then
    generate_readme "$readmeFile"
  else
    get_remote_file "$1"
  fi
  ;;

-*)
  shift 1
  __find_readme "$@"
  generate_readme "$template"
  ;;

*all)
  shift 1
  __find_readme "$@"
  generate_readme "$template"
  ;;

*)
  __find_readme "$@"
  generate_readme "$template"
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end

