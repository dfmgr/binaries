#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202103310710-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap '[ -f "$DOCKERMGR_TEMP_FILE" ] && rm -Rf "$DOCKERMGR_TEMP_FILE" &>/dev/null' EXIT

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103310710-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : dockermgr --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Wednesday, Mar 31, 2021 07:10 EDT
# @File          : dockermgr
# @Description   : docker script to manage containers
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
dockermgr_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$DOCKERMGR_CONFIG_DIR/$DOCKERMGR_CONFIG_FILE"
  [ -d "$DOCKERMGR_CONFIG_DIR" ] || mkdir -p "$DOCKERMGR_CONFIG_DIR"
  [ -d "$DOCKERMGR_CONFIG_BACKUP_DIR" ] || mkdir -p "$DOCKERMGR_CONFIG_BACKUP_DIR"
  [ -f "$DOCKERMGR_CONFIG_DIR/$DOCKERMGR_CONFIG_FILE" ] &&
    cp -Rf "$DOCKERMGR_CONFIG_DIR/$DOCKERMGR_CONFIG_FILE" "$DOCKERMGR_CONFIG_DIR/$DOCKERMGR_CONFIG_FILE.$$"
  cat <<EOF >"$DOCKERMGR_CONFIG_DIR/$DOCKERMGR_CONFIG_FILE"
# Settings for dockermgr - unused
DOCKERMGR_GIT_REPO="https://github.com/dockermgr"
DOCKERMGR_DOCKER_CMD='sudo docker'
DOCKERMGR_GET_INSTALL_SCRIPT="https://get.docker.com"
DOCKERMGR_HOME="${DOCKERMGR_HOME:-/srv/docker/$APPNAME}"
DOCKERMGR_FORCE_INSTALL="false"
DOCKERMGR_TEMP_FILE="${TMPDIR:-/tmp}/dockermgr"
DOCKERMGR_NOTIFY_ENABLED="yes"
DOCKERMGR_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
DOCKERMGR_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$DOCKERMGR_NOTIFY_CLIENT_ICON}"

EOF
  if [ -f "$DOCKERMGR_CONFIG_DIR/$DOCKERMGR_CONFIG_FILE" ]; then
    printf_green "Your config file for dockermgr has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__list_available() {
  echo -e 'airsonic daapd gitea hub ifconfig mariadb mongodb nginx-manager portainer postgresql registry registry-web template transmission' | tr ' ' '\n'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init() {
  export DOCKERMGR_GET_INSTALL_SCRIPT="https://get.docker.com"
  am_i_online --error -m "Can not setup docker: No internet" || exit 1
  if ! cmd_exists docker; then
    printf_newline
    printf_green "Installing docker and setting up systemd"
    printf_green "This will take a few minutes"
    if cmd_exists pacman; then
      __requiresudo pacman -Sy --noconfirm docker ||
        printf_exit "Installation has failed: could not get the install script"
    else
      __requiresudo bash -c "$(curl --disable -LSsfk --connect-timeout 3 --retry 0 --fail "$DOCKERMGR_GET_INSTALL_SCRIPT" 2>/dev/null | bash)" ||
        printf_exit "Installation has failed: could not get the install script"
    fi
  fi
  mkdir -p "$HOME/.docker"
  if grep -q docker /etc/group; then
    __requiresudo usermod -aG docker "$USER"
    __requiresudo chown -R "$USER":"$USER" "$HOME/.docker"
    __requiresudo chmod -R g+rwx "$HOME/.docker"
  fi

  if [ ! -f /etc/systemd/system/docker.service.d/docker.conf ]; then
    __requiresudo mkdir -p /etc/systemd/system/docker.service.d
    __devnull2 cat <<EOF | __requiresudo tee /etc/systemd/system/docker.service.d/docker.conf &>/dev/null
[Service]
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock
EOF
  fi
  __system_service_enable docker
  if __system_service_active docker; then
    printf_green "docker installation has completed"
  else
    printf_red "docker installation has failed"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init_help() {
  printf_green "Setup docker"
  exit 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__rancher() {
  sudo docker run -d --restart=unless-stopped \
    -p 80:80 -p 443:443 \
    --privileged \
    rancher/rancher:latest
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__k3b() {
  execute "curl -sfL https://get.k3s.io | sudo bash -" "Installing k3b"
  if cmd_exists k3s; then
    k3s kubectl get node &>/dev/null
    sudo k3s server &>/dev/null &
    printf_green "Kubernetes has been installed"
    true
  else
    printf_red "Kubernetes install has failed"
    false
  fi
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__install() {
  declare -a LISTARRAY="$*"
  for container in ${LISTARRAY[*]}; do
    export INSTDIR DATADIR REPO
    APPNAME="$container"
    if [ -f "$INSTDIR/install.sh" ]; then
      sudo -HE bash -c "$INSTDIR/install.sh" &&
        __notifications "Updated $container" || __notifications "Update of $container has failed"
    else
      am_i_online --error -m "Can not setup docker: No internet" || exit 1
      if [ -d "$DATADIR/$APPNAME" ]; then
        git -C "$DATADIR/$APPNAME" reset --hard -q &&
          git -C "$DATADIR/$APPNAME" pull -q &&
          chmod -Rf 755 "$DATADIR/$APPNAME/install.sh" &&
          __requiresudo -HE bash -c "$DATADIR/$APPNAME/install.sh" &&
          __notifications "Updated $APPNAME" || __notifications "Update of $APPNAME has failed"
      else
        git clone -q "$REPO/$APPNAME" "$DATADIR/$APPNAME" &&
          chmod -Rf 755 "$DATADIR/$APPNAME/install.sh" &&
          __requiresudo -HE bash -c "$DATADIR/$APPNAME/install.sh" &&
          __notifications "Updated $APPNAME" || __notifications "Update of $APPNAME has failed"
      fi
      if [ -d "$DATADIR/$APPNAME/os" ]; then
        __mkd "$SHARE/$APPNAME/os"
        __requiresudo cp -Rf "$DATADIR/$APPNAME/os/." "$SHARE/$APPNAME/os"
      fi
    fi
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__install_help() {
  printf_green "Usage: $APPNAME install NAME    |    $APPNAME install transmission"
  exit 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_help() {
  printf_green "Usage: dockerrun imageName"
  printf_green "See http://hub.docker.com for images"
  exit 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_main() {
  NAME="$(echo $1 | sed 's/[!@#\$%^&*():]//g')"
  if [ "$($DOCKERMGR_DOCKER_CMD ps -q -f status=running -f name=^/${NAME}$)" ]; then
    $DOCKERMGR_DOCKER_CMD container exec -it "$NAME" /bin/bash -l
  else
    if [ -n "$1" ]; then
      $DOCKERMGR_DOCKER_CMD run -d --network host -it --name "$NAME" --restart always "$1" /sbin/init &&
        $DOCKERMGR_DOCKER_CMD container exec -it "$NAME" /bin/bash -l
    else
      printf_exit "Error: No container name was given"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_update() {
  if [ "$*" != "" ]; then
    __install "$@"
  else
    if [ -d "$DATADIR" ] && [ "$(find "$DATADIR"/* | wc -l)" -ne 0 ]; then
      for d in $(ls "$DATADIR"); do
        __install "$d"
      done
    else
      printf_return "There is nothing to update in $DATADIR"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_cron() {
  local frequency="0 4 * * 6"
  local croncmd="$APPNAME cron run"
  case $1 in
  run)
    logr bash -c "am_i_online && $(expr $RANDOM \% 300) && docker images | awk '(NR>1) && ($2!~/none/) {print $1":"$2}' | xargs -L1 docker pull"
    ;;
  remove)
    shift 1
    removecrontab "$frequency $croncmd"
    ;;
  add)
    addtocrontab "$frequency $croncmd"
    ;;
  *)
    addtocrontab "$frequency $croncmd"
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ssh_help() {
  printf_green "Auto connect to first container if none are specified"
  printf_green "Usage: $APPNAME ssh container_name"
  exit 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ssh_error() {
  printf_red "There are no running containers"
  exit 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ssh_main() {
  CONTAINER="$1"
  if [[ "$CONTAINER" == "" ]]; then
    CONTAINER=$(docker ps | grep -Eo "^[0-9a-z]{8,}\b") || __ssh_error
  fi
  $DOCKERMGR_DOCKER_CMD exec -i -t "$CONTAINER" bash -l
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
DOCKERMGR_CONFIG_FILE="settings.conf"
DOCKERMGR_CONFIG_DIR="$HOME/.config/myscripts/dockermgr"
DOCKERMGR_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/dockermgr/backups"
DOCKERMGR_OPTIONS_DIR="$HOME/.local/share/myscripts/dockermgr/options"
DOCKERMGR_TEMP_FILE="${TMPDIR:-/tmp}/dockermgr"
DOCKERMGR_NOTIFY_ENABLED="yes"
DOCKERMGR_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
DOCKERMGR_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$DOCKERMGR_NOTIFY_CLIENT_ICON}"
DOCKERMGR_DOCKER_CMD='sudo docker'
DOCKERMGR_GET_INSTALL_SCRIPT="https://get.docker.com"
DOCKERMGR_HOME="${APPDIR:-/srv/docker/$APPNAME}"
DOCKERMGR_FORCE_INSTALL="false"
DOCKERMGR_GIT_REPO="https://github.com/dockermgr"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="$*"
SHORTOPTS="c,v,h,f,a"
LONGOPTS="options,config,version,help,force,all"
ARRAY="list search available init install ssh run active inactive log update cron rancher k3b"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$DOCKERMGR_CONFIG_DIR/$DOCKERMGR_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$DOCKERMGR_OPTIONS_DIR/options" ] || __list_options "$DOCKERMGR_OPTIONS_DIR" &>/dev/null
[ -f "$DOCKERMGR_OPTIONS_DIR/array" ] || __list_array "$DOCKERMGR_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$DOCKERMGR_CONFIG_DIR/$DOCKERMGR_CONFIG_FILE" ]; then
  . "$DOCKERMGR_CONFIG_DIR/$DOCKERMGR_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$DOCKERMGR_OPTIONS_DIR" "$ARRAY"
    __list_options "$DOCKERMGR_OPTIONS_DIR"
    __list_available >"$DOCKERMGR_OPTIONS_DIR/available"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  -f | --force)
    shift 1
    export FORCE_INSTALL="true"
    ;;
  -a | --all)
    INSTALL_ALL="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${DOCKERMGR_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${DOCKERMGR_NOTIFY_CLIENT_ICON}"
if [ "$DOCKERMGR_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
export DATADIR="$DOCKERMGR_HOME"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
list)
  shift 1
  run_install_available
  ;;

search)
  shift 1
  run_install_search "$@"
  ;;

available)
  shift 1
  run_install_available
  ;;

init)
  shift 1
  [ "$1" = "help" ] && __init_help
  __init "$@"
  ;;

install)
  shift 1
  [ "$1" = "help" ] && __install_help
  if [ $# -eq 0 ]; then
    printf_green "Running the installer script" && dockermgr update
    exit $?
  else
    __install "$@"
  fi
  ;;

ssh)
  shift 1
  [ "$1" = "help" ] && __ssh_help
  __ssh_main "$1"
  ;;

run)
  shift 1
  [ "$1" = "help" ] && __run_help
  __run_main "$1"
  ;;

active)
  shift 1
  [ "$1" = "help" ] && printf_exit "Show active containers"
  $DOCKERMGR_DOCKER_CMD ps | sed "s#$(head -n1)##g" | grep -v "^#" ||
    printf_exit "There are no active containers"
  ;;

inactive)
  shift 1
  [ "$1" = "help" ] && printf_exit "Show all containers"
  $DOCKERMGR_DOCKER_CMD ps -a | sed "s#$(head -n1)##g" | grep -v "^#" ||
    printf_exit "There doesn't seem to be any containers on this system"
  ;;

log)
  shift 1
  docker log "$1"
  ;;

ps)
  shift 1
  docker ps "$*"
  ;;

update)
  shift 1
  pkmgr update docker
  __run_update "$@"
  ;;

cron)
  shift 1
  __run_cron "$*"
  ;;

rancher)
  shift 1
  __rancher
  ;;

k3b)
  shift 1
  __k3b
  ;;

*)
  export -f __init
  if ! cmd_exists docker; then
    ask_yes_no_question --off "Docker is not installed: would you like to install it?" __init "DockerMGR"
  else
    __help
  fi
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
