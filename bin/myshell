#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="myshell"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 021520211402-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : myshell --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Monday, Feb 15, 2021 14:02 EST
# @File          : myshell
# @Description   : Change the default user shell
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check for needed applications
__requires chsh
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# functions
__vars() {
  newshell="$(grep $shell /etc/shells | head -n 1)"
  newshellname="$(basename $newshell)"
}

__list_shells() {
  [ -f "/etc/shells" ] && cat /etc/shells | sed '/^\#/d;/^$/d' | sort -u | printf_readline "3"
}
__success() {
  printf_green "shell has been changed to $newshell"
  printf_custom "3" "You will need to logout for the changes to take effect"
}

__failure() {
  printf_exit "Failed to change the shell to $newshell"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application

case "$1" in
--help)
  shift 1
  __help
  ;;

--list)
  shift 1
  printf_custom "2" "Available shells:"
  __list_shells
  exit
  ;;

*)
  shell="$1"
  case "$(uname -s)" in
  Linux)
    if [ -z "$1" ]; then
      printf_green "Your default shell is $(__getuser_cur_shell)"
      printf_blue "to change your default shell"
      printf_exit 4 0 "run myshell shellname | myshell fish"
    fi
    __vars "$shell"
    if __getuser_shell "$newshell"; then
      printf_custom "The old and new shell are both $newshellname"
    else
      if [ -f "$newshell" ]; then
        echo -n "$(chsh -s "$newshell" "$USER" | printf_readline "3" | grep -vq "chsh")"
        __getuser_shell "$newshell" && __success || printf_exit
      else
        printf_red "Invalid shell"
      fi
    fi

    ;;
  Darwin)
    if [ -z "$1" ]; then
      printf_green "Your default shell is $SHELL"
      printf_blue "to change your default shell"
      printf_exit 4 0 "run myshell shellname | myshell fish"
    fi
    __vars "$shell"
    if [ -f "$newshell" ]; then
      echo -n "$(chsh -u "$USER" -s "$newshell" | printf_readline "3" | grep -vq "chsh")" && __success || printf_exit
    else
      printf_red "Invalid shell"
    fi

    ;;
  *)
    printf_exit "Unsupported OS"
    ;;
  esac
  ;;

esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
