#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="myterminal"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 022420211808-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : myterminal --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Monday, Feb 15, 2021 14:02 EST
# @File          : myterminal
# @Description   : Open up terminal emulator
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import settings
[ -f "$HOME/.config/myterminal/settings" ] && . "$HOME/.config/myterminal/settings"
MYTERMINAL_NOTIFICATIONS="${MYTERMINAL_NOTIFICATIONS:-no}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate the config function
__config() {
  printf_green "Generating config file"
  __mkd "$HOME/.config/myterminal"
  echo -e '# Settings for myterminal
MYTERMINAL="config"
TERMINAL="'$TERMINAL'"
MYTERMINAL_NOTIFICATIONS="'$MYTERMINAL_NOTIFICATIONS'"
  ' >"$HOME/.config/myterminal/settings"
  if [ -f "$HOME/.config/myterminal/settings" ]; then
    printf_green "File saved to: $HOME/.config/myterminal/settings"
    [ -n "$MYTERMINAL_NOTIFICATIONS" ] && notifications "MyTerminal" "Config file saved to:\n$HOME/.config/myterminal/settings"
  fi
  exit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create link function
__create_link() {
  case "$1" in
  *)
    if [ ! -z "$2" ]; then
      shift 1
      if cmd_exists "$1"; then
        printf_green "Linking $HOME/.local/bin/myterminal to $1"
        __ln_sf "$(command -v $1)" "$HOME/.local/bin/myterminal"
        exit 0
      else
        printf_green "Linking $HOME/.local/bin/myterminal to $TERMINAL"
        __ln_sf "$TERMINAL" "$HOME/.local/bin/myterminal"
        exit 0
      fi
    fi
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Find the terminal app
if [ "$MYTERMINAL" != "config" ]; then
  if [ -f "$(command -v termite 2>/dev/null)" ]; then
    export TERMINAL="termite"
  elif [ -f "$(command -v xfce4-terminal 2>/dev/null)" ]; then
    export TERMINAL="xfce4-terminal"
  elif [ -f "$(command -v qterminal-terminal 2>/dev/null)" ]; then
    export TERMINAL="qterminal-terminal"
  elif [ -f "$(command -v qterminal-terminal 2>/dev/null)" ]; then
    export TERMINAL="qterminal-terminal"
  elif [ -f "$(command -v mate-terminal 2>/dev/null)" ]; then
    export TERMINAL="mate-terminal"
  elif [ -f "$(command -v i3-sensible-terminal 2>/dev/null)" ]; then
    export TERMINAL="i3-sensible-terminal"
  elif [ -f "$(command -v rofi-sensible-terminal 2>/dev/null)" ]; then
    export TERMINAL="rofi-sensible-terminal"
  elif [ -f "$(command -v terminology 2>/dev/null)" ]; then
    export TERMINAL="terminology"
  elif [ -f "$(command -v xterm 2>/dev/null)" ]; then
    export TERMINAL="xterm"
  elif [ -f "$(command -v uxterm 2>/dev/null)" ]; then
    export TERMINAL="uxterm"
  elif [ -f "/Applications/iTerm.app/Contents/MacOS/iTerm" ]; then
    export TERMINAL="/Applications/iTerm.app/Contents/MacOS/iTerm"
  elif [ -f "/System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal" ]; then
    export TERMINAL="/System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal"
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -z "$TERMINAL" ]; then
  [ "$MYTERMINAL_NOTIFICATIONS" = "yes" ] && notifications "MyTerminal" "No terminal emulators are installed"
  printf_exit 1 1 "No terminal emulators are installed"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ "$1" = -e ] && shift 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case $TERMINAL in
*)
  [ -n "$NOTIFY_MESSAGE" ] || NOTIFY_MESSAGE="Attempting to launch $TERMINAL"
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case $1 in
*config)
  shift 1
  __config
  ;;

*create | *link)
  shift 1
  __create_link "$@"
  ;;

*)
  _OPT=$#
  _CMD="$1" && shift 1
  _ARG="$*" && shift $#
  if [ "$_OPT" -gt 0 ]; then opt="-e"; fi
  [ "$MYTERMINAL_NOTIFICATIONS" = "yes" ] && notifications "MyTerminal" "$NOTIFY_MESSAGE"
  if [ -f "$HOME/.local/bin/myterminal" ]; then
    exec ~/.local/bin/myterminal ${OPTIONS:-$opt} "$_CMD "$_ARG"" &>/dev/null &
  else
    exec $TERMINAL ${OPTIONS:-$opt} "$_CMD "$_ARG"" &>/dev/null &
  fi
  disown
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit 0
# end
