#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202103262330-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103262330-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : cmd_exists --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Friday, Mar 26, 2021 23:30 EDT
# @File          : cmd_exists
# @Description   : Check to see if command exists
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$CMD_EXISTS_CONFIG_DIR/$CMD_EXISTS_CONFIG_FILE"
  [ -d "$CMD_EXISTS_CONFIG_DIR" ] || mkdir -p "$CMD_EXISTS_CONFIG_DIR"
  [ -d "$CMD_EXISTS_CONFIG_BACKUP_DIR" ] || mkdir -p "$CMD_EXISTS_CONFIG_BACKUP_DIR"
  [ -f "$CMD_EXISTS_CONFIG_DIR/$CMD_EXISTS_CONFIG_FILE" ] &&
    cp -Rf "$CMD_EXISTS_CONFIG_DIR/$CMD_EXISTS_CONFIG_FILE" "$CMD_EXISTS_CONFIG_BACKUP_DIR/$CMD_EXISTS_CONFIG_FILE.$$"
  cat <<EOF >"$CMD_EXISTS_CONFIG_DIR/$CMD_EXISTS_CONFIG_FILE"
# Settings for cmd_exists
CMD_EXISTS_NOTIFY_ENABLED="${CMD_EXISTS_NOTIFY_ENABLED:-yes}"
CMD_EXISTS_NOTIFY_OK_ENABLED="${CMD_EXISTS_NOTIFY_OK_ENABLED:-no}"
CMD_EXISTS_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
CMD_EXISTS_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$CMD_EXISTS_NOTIFY_CLIENT_ICON}"
CMD_EXISTS_NOTIFY_OK_MESG="Great: Nothing is missing"
CMD_EXISTS_NOTIFY_ERROR_MESG="Error: Missing the following packages:"

EOF
  if [ -f "$CMD_EXISTS_CONFIG_DIR/$CMD_EXISTS_CONFIG_FILE" ]; then
    printf_green "Your config file for cmd_exists has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
CMD_EXISTS_CONFIG_FILE="settings.conf"
CMD_EXISTS_CONFIG_DIR="$HOME/.config/myscripts/cmd_exists"
CMD_EXISTS_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/cmd_exists/backups"
CMD_EXISTS_OPTIONS_DIR="$HOME/.local/share/myscripts/cmd_exists/options"
CMD_EXISTS_NOTIFY_ENABLED="${CMD_EXISTS_NOTIFY_ENABLED:-yes}"
CMD_EXISTS_NOTIFY_OK_ENABLED="${CMD_EXISTS_NOTIFY_OK_ENABLED:-no}"
CMD_EXISTS_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
CMD_EXISTS_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-software}"
CMD_EXISTS_NOTIFY_OK_MESG="${CMD_EXISTS_NOTIFY_OK_MESG:-Great: Nothing is missing}"
CMD_EXISTS_NOTIFY_ERROR_MESG="${CMD_EXISTS_NOTIFY_ERROR_MESG:-Error: Missing the following packages:}"
CMD_EXISTS_NOTIFY_SHOW=""
CMD_EXISTS_NOTIFY_SHOW_ERROR=""
CMD_EXISTS_NOTIFY_ASK=""

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="$*"
SHORTOPTS="c,v,h"
LONGOPTS="options,config,version,help,ask,show,error"
ARRAY=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$CMD_EXISTS_CONFIG_DIR/$CMD_EXISTS_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$CMD_EXISTS_OPTIONS_DIR/options" ] || __list_options "$CMD_EXISTS_OPTIONS_DIR" &>/dev/null
[ -f "$CMD_EXISTS_OPTIONS_DIR/array" ] || __list_array "$CMD_EXISTS_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$CMD_EXISTS_CONFIG_DIR/$CMD_EXISTS_CONFIG_FILE" ]; then
  . "$CMD_EXISTS_CONFIG_DIR/$CMD_EXISTS_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$CMD_EXISTS_OPTIONS_DIR" "$ARRAY"
    __list_options "$CMD_EXISTS_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    #__version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --ask)
    shift 1
    CMD_EXISTS_NOTIFY_ASK="yes"
    ;;
  --show)
    shift 1
    CMD_EXISTS_NOTIFY_SHOW="yes"
    CMD_EXISTS_NOTIFY_SHOW_ERROR="yes"
    ;;
  --error)
    shift 1
    CMD_EXISTS_NOTIFY_SHOW_ERROR="yes"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${CMD_EXISTS_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${CMD_EXISTS_NOTIFY_CLIENT_ICON}"
if [ "$CMD_EXISTS_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
    printf_green "$*"
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
command -v bash &>/dev/null || exit 1
[ "$(uname -s)" = Darwin ] && exit 0
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
declare COMMANDS="$*"
declare cmdExitCode=""
declare cmdExitTmp=""
declare cmdMissing=""
declare cmdChoice=""
declare cmdExists=""
[ -n "$COMMANDS" ] || exit 0
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
for cmdExists in $COMMANDS; do
  if command -v "$cmdExists" &>/dev/null || type -P "$cmdExists" &>/dev/null; then
    cmdExitTmp+=0
  else
    cmdExitTmp+=1
    cmdMissing+="$cmdExists "
  fi
  cmdExitCode="$cmdExitTmp"
done
if [ "$CMD_EXISTS_NOTIFY_SHOW" = "yes" ] || [ "$CMD_EXISTS_NOTIFY_SHOW_ERROR" = "yes" ]; then
  [ $cmdExitCode -eq 0 ] && [ "$CMD_EXISTS_NOTIFY_OK_ENABLED" = "yes" ] && __notifications "$CMD_EXISTS_NOTIFY_OK_MESG"
  [ $cmdExitCode -ne 0 ] && __notifications "$CMD_EXISTS_NOTIFY_ERROR_MESG $cmdMissing"
fi
[ $cmdExitCode -eq 0 ] && cmdExitCode=0 || cmdExitCode=1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$CMD_EXISTS_NOTIFY_ASK" = "yes" ]; then
  MISSING="$cmdMissing"
  if [ -n "$MISSING" ]; then
    notifications "${NOTIFY_CLIENT_NAME:-$APPNAME}" "Missing $MISSING"
    if [ -n "$DESKTOP_SESSION" ]; then
      __ask_confirm "Would you like install $MISSING" "pkmgr silent-install $MISSING" && cmdExitCode=0 || cmdExitCode=1
    else
      printf_red "The following apps are missing: $MISSING"
      printf_read_question "2" "Would you like install the missing packages? [y/N]" "1" "cmdChoice" "-s"
      if printf_answer_yes "$cmdChoice"; then
        for miss in $MISSING; do
          __execute "pkmgr silent-install $miss" "Installing $miss" && cmdExitCode=0 || cmdExitCode=1
        done
      else
        cmdExitCode=1
      fi
    fi
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${cmdExitCode:-$?}
