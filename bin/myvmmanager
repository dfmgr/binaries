#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 010920210727-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : myvmmanager
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : setup virtual machine manager
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set functions
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$HOME/.config/myvmmanager/settings" ] && . "$HOME/.config/myvmmanager/settings"
MYVMMANAGER_NOTIFICATIONS="${MYVMMANAGER_NOTIFICATIONS:-yes}"

__config() {
  printf_green "Generating config file"
  __mkd "$HOME/.config/myvmmanager"
  echo -e '# Settings for myvmmanager
MYBROWSER="config"
BROWSER="$BROWSER"
MYVMMANAGER_NOTIFICATIONS="$MYVMMANAGER_NOTIFICATIONS"
  ' >"$HOME/.config/myvmmanager/settings"
  exit
}

__create_link() {
  case "$1" in
  *)
    if [ ! -z "$2" ]; then
      shift 1
      if cmd_exists "$1"; then
        if [ "$VMMANAGER" = docker ] || [ "$VMMANAGER" = kubectl ]; then
          exit 0
        fi
        printf_green "Linking $HOME/.local/bin/myvmmanager to $1"
        __ln_sf "$(command -v $1)" "$HOME/.local/bin/myvmmanager"
        exit 0
      else
        printf_green "Linking $HOME/.local/bin/myvmmanager to $VMMANAGER"
        __ln_sf "$VMMANAGER" "$HOME/.local/bin/myvmmanager"
        exit 0
      fi
    fi
    ;;
  esac
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$VMMANAGER" != "config" ]; then
  if [ -f "$(command -v VirtualBox 2>/dev/null)" ]; then
    export VMMANAGER="VirtualBox"
  elif [ -f "$(command -v VMWare 2>/dev/null)" ]; then
    export VMMANAGER="VMWare"
  elif [ -f "$(command -v virt-manager 2>/dev/null)" ]; then
    export VMMANAGER="virt-manager"
  elif [ -f "$(command -v kubectl 2>/dev/null)" ]; then
    export VMMANAGER="kubectl"
  elif [ -f "$(command -v docker 2>/dev/null)" ]; then
    export VMMANAGER="docker"
  fi
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -z "$VMMANAGER" ]; then
  [ "$MYVMMANAGER_NOTIFICATIONS" = "yes" ] && notifications "MyVMManager" "No Virtual Machine Managers are installed"
  printf_exit 1 1 "No Virtual Machine Managers are installed"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ "$MYVMMANAGER_NOTIFICATIONS" = "yes" ] && notifications "MyVMManager" "Attempting to launch $VMMANAGER"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case $1 in
*config)
  shift 1
  __config
  ;;

*create | link)
  shift 1
  __create_link "$@"
  ;;

*)
  if [ -f "$HOME/.local/bin/myvmmanager" ]; then
    __devnull2 ~/.local/bin/myvmmanager "$@" >/dev/null 2>&1 &
  else
    if [ "$VMMANAGER" = docker ] || [ "$VMMANAGER" = kubectl ]; then
      __devnull2 run_in_term $VMMANAGER "$@"
    else
      __devnull2 $MYVMMANAGER "$@"
    fi
  fi
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
