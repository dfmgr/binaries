#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="gen-script"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 022420211808-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : gen-script --help
# @Copyright     : Copyright: (c) 2021 CasjaysDev
# @Created       : Sunday, Feb 07, 2021 13:25 EST
# @File          : gen-script
# @Description   : Create a script from template
# @TODO          : Reactor code/Create separate gen-header script
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# I'm sure there is a better way to do this
if [ -d "$1" ]; then
  MYCURRDIR="$1"
  shift 1
elif [ "$1" = "-d" ] || [ "$1" = "-dir" ] || [ "$1" = "--dir" ]; then
  MYCURRDIR="$2"
  shift 2
  [ -d "$MYCURRDIR" ] || printf_exit "$MYCURRDIR doesn't seem to be a directory"
else
  MYCURRDIR="$PWD"
fi
if [ "$MYCURRDIR" = "." ]; then MYCURRDIR="$(__basedir ".")"; fi
if [ "$1" = "--skip" ]; then OVERWRITE="Y" && OPENEDIT="N" && shift 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# default variables
topdir="$(__git_top_dir "$MYCURRDIR" || echo $MYCURRDIR 2>/dev/null)"
GEN_SCRIPTS_YEAR="$(date +%Y 2>/dev/null)"
GEN_SCRIPTS_EMAIL="${USER}"
GEN_SCRIPTS_AUTHOR="${USER}"
GEN_SCRIPTS_COMPANY="${USER}"
GEN_SCRIPTS_VERSION="${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}"
GEN_SCRIPTS_DEFREADME="README"
GEN_SCRIPTS_DEFLICENSE="WTFPL"
GEN_SCRIPTS_DATEFMT="%A, %b %d, %Y %H:%M %Z"
GEN_SCRIPTS_COPYRIGHT="Copyright: (c) $GEN_SCRIPTS_YEAR $GEN_SCRIPTS_AUTHOR, $GEN_SCRIPTS_COMPANY"
GEN_SCRIPTS_CURRENT_DIR="$MYCURRDIR"
GEN_SCRIPT_OPTSDIR="$HOME/.local/share/gen-script"
GEN_SCRIPTS_CONFIG_DIR="$HOME/.config/gen-script"
GEN_SCRIPTS_BACKUP_DIR="$GEN_SCRIPTS_CONFIG_DIR/backups"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -d "$HOME/.config/gen-script/files" ]; then
  GEN_SCRIPTS_TEMPLATE_DIR="$HOME/.config/gen-script/files"
else
  GEN_SCRIPTS_TEMPLATE_DIR="${GEN_SCRIPTS_TEMPLATE_DIR:-$CASJAYSDEVDIR/templates/scripts}"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$HOME/.config/gen-script/settings" ] && . "$HOME/.config/gen-script/settings"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
REPLACE_VERSION="$(date +"${GEN_SCRIPTS_VERSION}" 2>/dev/null)"
REPLACE_CREATED="$(date +"${GEN_SCRIPTS_DATEFMT}" 2>/dev/null)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$(__count_files $HOME/.config/gen-script/files "3")" -eq 0 ]; then
  __mkd "$HOME/.config/gen-script/files"
  if [ "$(__count_files "$CASJAYSDEVDIR/templates/scripts" "2")" -ne 0 ]; then
    printf_green "Setting up the Scripts directory"
    __cp_rf "$CASJAYSDEVDIR/templates/scripts/." "$HOME/.config/gen-script/files/"
  else
    printf_exit "1" "1" "No scripts exist"
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application functions
__date() { date +"$1"; }
__filename() { basename "$1" 2>/dev/null; }
__fullfilename() { type -P "$(basename "$1")" 2>/dev/null; }
__dirname() { if [ "$(dirname "$1" 2>/dev/null)" = . ]; then echo $PWD; else dirname "$1" 2>/dev/null; fi; }
__sed() { sed -i 's|'"$1"'|'"$2"'|g' "$3" 2>/dev/null; }
__providefilename() { [ -f "$(__fullfilename "${1:-$filename}")" ] || printf_exit "Please provide a filename"; }
__check_header() { grep ^'#.@Version' "$(__fullfilename "$filename")" 2>/dev/null | head -n1 | grep '^' | grep -q ' : ' || return 1; }
__remove_opts() { echo "$*" | tr ' ' '\n' | grep -v '^-' | head -n1 | grep '^' || return 1; }
__gen_confdir() { __to_uppercase "${1:-$filename}"; }
__get_header() {
  local PATH="/usr/local/bin:/usr/bin:/usr/sbin:/$HOME/.local/bin"
  local command="$(__fullfilename "$filename")"
  if [ -f "$command" ] && __check_header; then
    if [ "$1" = "all" ]; then
      shift 1
      printf "# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"
      grep ^'#.@'*'' "$command" 2>/dev/null | grep ' :' | grep -Ev '${.*}|\$|GEN_SCRIPT_' | head -n${1:-15} | grep '^' || return 1
      printf "# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"
    elif [ "$1" = "prev" ]; then
      shift 1
      grep ^'#.@' -B1 -A1 "$command" 2>/dev/null | head -n${1:-14} | grep '^' | grep -Ev '${.*}|\$|GEN_SCRIPT_' | grep '^' || return 1
    else
      local search="$1"
      local command="${2:-$command}"
      grep ^'#.@'$search'' "$command" 2>/dev/null | grep ' :' | grep -Ev '${.*}|\$|GEN_SCRIPT_' |
        awk -F': ' '{print $2}' | head -n1 | grep '^' || return 1
    fi
  fi
}
__grep() { grep ^"#.@$headerfield.*.:" "$filename" | head -n1 | grep ${1:-} '^'; }
#__update_header "$file" "$search" "$replace"
__update_header() {
  #printf_exit "$1 $2 $3"
  local filename="$1"
  local headerfield="$2"
  local replace="$3"
  if __grep -q; then
    local search="$(grep "#.@$headerfield.*.:" "${filename}" | head -n1 | awk -F': ' '{print $2}' | grep '^')"
    if [ -z "$search" ]; then search="$(__grep)"; replace="$search$replace"; fi
    #sed -i 's#'"$search"'#'"$replace"'#g' "$filename" 2>/dev/null
    __sed "$search" "$replace" "$filename" && \
      printf_green "Changed $headerfield to $replace" || \
      printf_red "Change $headerfield to $replace has failed"
  else
    printf_exit "Failed to change $search to $3 pattern was not found"
  fi
}
__get_prev() {
  local PATH="/usr/local/bin:/usr/bin:/usr/sbin:/$HOME/.local/bin"
  local command="$(__fullfilename "$filename")"
  if [ -f "$command" ] && __check_header; then
    [ -n "$get_prev_shown" ] || printf_green "setting desc todo other and res from $command"
    get_desc="$(__get_header 'Description')"
    get_todo="$(__get_header 'TODO')"
    get_other="$(__get_header '@Other')"
    get_res="$(__get_header 'Resource')"
  fi
  get_prev_shown=true
}
# Current file info
__prev_header() {
  __get_header "prev" || printf_red "No header info was found"
}
__replace_header() {
  local PATH="/usr/local/bin:/usr/bin:/usr/sbin:/$HOME/.local/bin"
  __get_prev
  if [ -n "$filename" ]; then
    printf "Version: %s | Created: %s\n" "$REPLACE_VERSION" "$REPLACE_CREATED"
    __get_header "all"
  else
    [ -z "$desc" ] && desc="$get_desc"
    [ -z "$todo" ] && todo="$get_todo"
    [ -z "$other" ] && other="$get_other"
    [ -z "$res" ] && res="$get_other"
    cat <<EOF | tee
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : $(__date "${GEN_SCRIPTS_VERSION}" 2>/dev/null)
# @Author        : $GEN_SCRIPTS_AUTHOR
# @Contact       : $GEN_SCRIPTS_EMAIL
# @License       : $GEN_SCRIPTS_DEFLICENSE
# @ReadME        : $GEN_SCRIPTS_DEFREADME
# @Copyright     : $GEN_SCRIPTS_COPYRIGHT
# @Created       : $(__date "${GEN_SCRIPTS_DATEFMT}" 2>/dev/null)
# @File          : $(__filename $GEN_SCRIPTS_NEWFILE 2>/dev/null)
# @Description   : ${desc:-}
# @TODO          : ${todo:-}
# @Other         : ${other:-}
# @Resource      : ${res:-}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
EOF
  fi
}
__set_header() {
  __header_opts "$@"
  printf_blue "Setting header options for ${header_type:-system}"
}
# Set up options
__header_opts() {
  local LONGOPTS="all:,no,help,user,raw,desc:,todo:,copy:,other:,res:,type:,functions:,name:,prev,replace,keep"
  local SHORTOPTS="a:,e,h,d:,t:,c:,o:,r:,i:,f,n:,u,l:,p,k"
  local parsed=$(getopt --options="$SHORTOPTS" --longoptions="$LONGOPTS" -- "$@" 2>/dev/null)
  eval set -- "${parsed[@]}" 2>/dev/null
  while :; do
    case "$1" in
    -h | --help)
      __gen_header_help
      ;;
    -a | --all)
      shift 1
      if [ "$1" = "--long" ]; then echo "--$LONGOPTS " | sed 's#:##g;s#,# --#g'; fi
      if [ "$1" = "--short" ]; then echo "-$SHORTOPTS " | sed 's#:##g;s#,# -#g'; fi
      if [ "$1" = "--all" ]; then
        echo -n "-$SHORTOPTS " | sed 's#:##g;s#,# -#g'
        echo -n "--$LONGOPTS " | sed 's#:##g;s#,# --#g'
      fi
      return 0
      ;;
    -f | --functions)
      showFunctions=true
      ;;
    -d | --desc)
      shift 1
      desc="$1"
      ;;
    -t | --todo)
      shift 1
      todo="$1"
      ;;
    -c | --copy)
      shift 1
      GEN_SCRIPTS_COPYRIGHT="$1"
      ;;
    -o | --other)
      shift 1
      other="$1"
      ;;
    -r | --res)
      shift 1
      res="$1"
      ;;
    -i | --type)
      shift 1
      type="$1"
      ;;
    -p | --prev)
      gen_header_prev=true
      ;;
    -n | --name)
      shift 1
      GEN_FILENAME="$1"
      ;;
    -u | --user)
      header_type=user
      gen_header_user=true
      ;;
    -l | --license)
      shift 1
      GEN_SCRIPTS_CUSTOM_LICENSE="true"
      GEN_SCRIPTS_DEFLICENSE="$1"
      ;;
    -e | --no)
      printf_red "Setting overwrite to yes and edit to no"
      OVERWRITE="Y"
      EDITFILE="N"
      MAKEFILE="${MAKEFILE:-yes}"
      ;;
    -k | --keep)
      printf_red "Setting overwrite to no and edit to no"
      OVERWRITE="N"
      EDITFILE="N"
      MAKEFILE="N"
      ;;
    --replace)
      gen_header_replace=true
      ;;
    --raw)
      gen_header_raw=true
      ;;
    --)
      break
      ;;
      #*)
      #  break
      #  ;;
    esac
    shift
  done
  HEADER_ARGS="$@"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__config() {
  printf_green "Generating the config and saving it to:"
  printf_cyan "$HOME/.config/gen-script/settings"
  __rm_rf "$HOME/.config/gen-script/settings"
  cat <<EOF >>"$HOME/.config/gen-script/settings"
GEN_SCRIPTS_EMAIL="$GEN_SCRIPTS_EMAIL"
GEN_SCRIPTS_AUTHOR="$GEN_SCRIPTS_AUTHOR"
GEN_SCRIPTS_COMPANY="$GEN_SCRIPTS_COMPANY"
GEN_SCRIPTS_VERSION="$VERSION_DATE_FORMAT"
GEN_SCRIPTS_DEFREADME="README"
GEN_SCRIPTS_DEFLICENSE="WTFPL"
GEN_SCRIPTS_DATEFMT="%A, %b %d, %Y %H:%M %Z"
GEN_SCRIPTS_TEMPLATE_DIR="$GEN_SCRIPTS_TEMPLATE_DIR"
GEN_SCRIPTS_COPYRIGHT="Copyright: (c) $GEN_SCRIPTS_YEAR $GEN_SCRIPTS_AUTHOR, $GEN_SCRIPTS_COMPANY"
GEN_SCRIPT_REPLACE_CONFDIR="\$(echo "\$GEN_SCRIPTS_NEWFILE" | tr [a-z] [A-Z])_CONFIG_DIR"
GEN_SCRIPTS_CONFIG_DIR="${GEN_SCRIPTS_CONFIG_DIR:-$HOME/.config/gen-script}"
GEN_SCRIPTS_BACKUP_DIR="${GEN_SCRIPTS_BACKUP_DIR:-$GEN_SCRIPTS_CONFIG_DIR/backups}"
# Make file options
# Default ask
OVERWRITE="${OVERWRITE:-A}"
# Skip editing file
EDITFILE="${EDITFILE:-N}"
# This should always be Y
MAKEFILE="${MAKEFILE:-Y}"

EOF
  [ $? = 0 ] && printf_green "Settings have been saved" || printf_error "Failed to save the settings"
}
__copy_files() {
  printf_green "Copying the template files"
  printf_yellow "from: $CASJAYSDEVDIR/templates/scripts"
  printf_yellow "to: $HOME/.config/gen-script/files"
  __cp_rf "$CASJAYSDEVDIR/templates/scripts/." "$HOME/.config/gen-script/files/"
}

__copy_templates() {
  if [ -d "$HOME/.config/gen-script/files/.git" ]; then
    am_i_online && git -C "$HOME/.config/gen-script/files" pull -q &>/dev/null && true || false
  else
    if [ $(__count_files $HOME/.config/gen-script/files "3") -ne 0 ]; then
      printf_read_question 6 "Would you like overwrite current files" "1" "COPY" "-s"
      if printf_answer_yes "$COPY"; then
        __copy_files
      fi
    else
      __copy_files
    fi
  fi
  [ $? -eq 0 ] && [ -d "$HOME/.config/gen-script/files" ] &&
    printf_green "Install has succeeded" || printf_red "Install of the files failed"
}

__makefile() {
  local temp="$1"
  local new="${newfile:-$2}"
  local newdir="$(__dirname "$new")"
  local newfile="$(basename "$2")"
  local newcmd="$(command -v "$newfile")"
  shift 2
  __mkd "$newdir"
  __vars "$new"
  __cp_rf "$temp" "$new" || return 1
  __edit_header "$new" || return 1
  chmod -f 755 "$new" || return 1
  if grep -q 'local cur prev words cword$' "$new"; then
    if [ -f "$newcmd" ]; then
      local GEN_SCRIPT_REPLACE_license="$(__get_header 'License' "$new")"
      local GEN_SCRIPT_REPLACE_readme="$(__get_header 'ReadME' "$new")"
      local GEN_SCRIPT_REPLACE_desc="$(__get_header 'Description ' "$new")"
      local GEN_SCRIPT_REPLACE_todo="$(__get_header 'TODO ' "$new")"
      local GEN_SCRIPT_REPLACE_other="$(__get_header 'Other ' "$new")"
      local GEN_SCRIPT_REPLACE_resource="$(__get_header 'Resource ' "$new")"
      local license="$(__get_header 'License ' "$newcmd")"
      local readme="$(__get_header 'ReadME ' "$newcmd")"
      local desc="$(__get_header 'Description ' "$newcmd")"
      local todo="$(__get_header 'TODO ' "$newcmd")"
      local other="$(__get_header 'Other ' "$newcmd")"
      local resource="$(__get_header 'Resource' "$newcmd")"
    fi
    [ -n "$license" ] && [ -n "$GEN_SCRIPT_REPLACE_license" ] && __sed "$GEN_SCRIPT_REPLACE_license" "$license" "$new"
    [ -n "$readme" ] && [ -n "$GEN_SCRIPT_REPLACE_readme" ] && __sed "$GEN_SCRIPT_REPLACE_readme" "$readme" "$new"
    [ -n "$desc" ] && [ -n "$GEN_SCRIPT_REPLACE_desc" ] && __sed "$GEN_SCRIPT_REPLACE_desc" "$desc" "$new"
    [ -n "$todo" ] && [ -n "$GEN_SCRIPT_REPLACE_todo" ] && __sed "$GEN_SCRIPT_REPLACE_todo" "$todo" "$new"
    [ -n "$other" ] && [ -n "$GEN_SCRIPT_REPLACE_other" ] && __sed "$GEN_SCRIPT_REPLACE_other" "$other" "$new"
    [ -n "$resource" ] && [ -n "$GEN_SCRIPT_REPLACE_resource" ] && __sed "$GEN_SCRIPT_REPLACE_resource" "$resource" "$new"
    local compfile="_$(basename "$new")_completion"
    local destfolder="$(dirname "$new")"
    printf_cyan "Creating the completion file: $compfile"
    __mv_f "$new" "$destfolder/$compfile" &&
      new="$destfolder/$compfile" &&
      filename="$compfile" &&
      destfolder="$newdir" &&
      chmod 664 "$destfolder/$filename" && exitCode=0 || exitCode=1
  fi
  [ ${exitCode:-$?} -ne 0 ] && printf_red "Failed to create $new" || printf_green "Your file has been created"
  return ${exitCode:-$?}
}
__edit_header() {
  local GEN_SCRIPTS_NEWFILE="$1"
  local GEN_SCRIPTS_NEWFILE_FULL="$(__get_full_file "$1")"
  local GEN_SCRIPTS_FULLPATH="$(__fullfilename "$1")"
  local GEN_SCRIPTS_NEWFILEDIR="$(__dirname $GEN_SCRIPTS_NEWFILE_FULL)"
  local GEN_SCRIPTS_NEWFILEDIR="${GEN_FILENAME:-$GEN_SCRIPTS_NEWFILEDIR}"
  if [ -z "$GEN_SCRIPT_REPLACE_CONFDIR" ]; then
    local GEN_SCRIPT_REPLACE_CONFDIR="$(__gen_confdir "$GEN_SCRIPTS_NEWFILE")_CONFIG_DIR"
  fi
  __vars "$*"
  [ -f "$GEN_SCRIPTS_NEWFILE" ] && printf_green "Editing the header info" || printf_exit 1 1 "Failed to created the file"
  __sed "GEN_SCRIPT_REPLACE_APPNAME" "${GEN_SCRIPTS_NEWFILEDIR##*/}" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_CONFDIR=" "$GEN_SCRIPT_REPLACE_CONFDIR=" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_COPYRIGHT" "$GEN_SCRIPTS_COPYRIGHT" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_VERSION" "$(__date "$GEN_SCRIPTS_VERSION")" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_FILENAME" "$(__filename "$GEN_SCRIPTS_NEWFILE")" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_FULLFILENAME" "$GEN_SCRIPTS_FULLPATH" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_VERSION" "$(__date "$GEN_SCRIPTS_VERSION")" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_DATE" "$(__date "$GEN_SCRIPTS_DATEFMT")" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_LICENSE" "$GEN_SCRIPTS_DEFLICENSE" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_README" "$GEN_SCRIPTS_DEFREADME" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_AUTHOR" "$GEN_SCRIPTS_AUTHOR" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_EMAIL" "$GEN_SCRIPTS_EMAIL" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_YEAR" "$GEN_SCRIPTS_YEAR" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_DESC" "$desc" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_TODO" "$todo" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_OTHER" "$other" "$GEN_SCRIPTS_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_RES" "$res" "$GEN_SCRIPTS_NEWFILE"
  return $?
}

__gen_header_help() {
  printf_blue "-a: Show all options"
  printf_blue "-d: Description"
  printf_blue "-t: TODO"
  printf_blue "-c: Copyright"
  printf_blue "-o: Other"
  printf_blue "-r: Resources"
  printf_blue "-f: Include functions"
  printf_blue "-i: Install function to use - user_install"
  printf_blue "-n: Define the script APPNAME"
  printf_blue "-l: Define license type"
  printf_blue "--raw: Show raw headed"
  printf_yellow "Types: user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr"
  printf_yellow 'gen-script header filename -d "My Descr" -c "My Copy" -t "My TODO" -o "OTHER" -r "RESOURCE" -i "system" -f'
  exit 0
}
__gen_header() {
  rerun() {
    unset gen_header_replace exitCode
    rerun=true
    __gen_header
    exit $?
  }
  if [ "$rerun" != "true" ]; then
    __vars "$filename"
    __get_prev "$filename"
    __set_header "$@"
    [ -n "$gen_header_raw" ] && filename=template
    printf_green "New header info for $filename "
    local GEN_SCRIPTS_DEFREADME="$(__filename $filename 2>/dev/null) --help"
    local GEN_SCRIPTS_NEWFILE="$filename"
    [ -n "$gen_header_raw" ] || [ -n "${desc:-$get_desc}" ] || printf_yellow "Description: ${desc:-None provided}"
    [ -n "$gen_header_raw" ] || [ -n "${todo:-$get_todo}" ] || printf_yellow "TODO: ${todo:-None provided}"
  fi
  if [ -n "$gen_header_prev" ]; then
    __check_header || printf_exit "No header info was found"
    __providefilename "$filename"
    printf_blue "header from $(__fullfilename "$filename")"
    printf_newline
    __prev_header
  elif [ "$gen_header_replace" = true ]; then
    __check_header || printf_exit "No header info was found"
    __providefilename "$filename"
    printf_blue "header from $(__fullfilename "$filename")"
    printf_newline
    __replace_header
  elif [ -n "$gen_header_raw" ]; then
    printf_blue "Showing the raw header template"
    __gen_header_raw || rerun
  elif [ -f "$HOME/.config/gen-script/templates/headerfile" ] && [ -z "$gen_header_user" ]; then
    printf_blue "header from $HOME/.config/gen-script/templates/headerfile"
    cat <<EOF | tee
$(. $HOME/.config/gen-script/templates/headerfile)
EOF
  elif [ -n "$gen_header_user" ] && [ -z "$gen_header_raw" ]; then
    unset showFunctions
    __gen_template_user
  else
    __gen_template_system
  fi
  if [ "$showFunctions" = true ]; then __gen_functions; else printf_newline; fi
  [ ${exitCode:-$?} -ne 0 ] || printf_blue "Your header is ready for use\n"
}

__gen_template_user() {
  if [ -f "$GEN_SCRIPTS_CONFIG_DIR/templates/gen_user.sh" ]; then
    cat <<EOF | tee
$(. $HOME/.config/gen-script/templates/gen_user.sh)
EOF
  else
    cat <<EOF | tee
#!/usr/bin/env bash
GEN_SCRIPTS_NEWFILE() {
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="$(__filename $GEN_SCRIPTS_NEWFILE 2>/dev/null)"
USER="\${SUDO_USER:-\${USER}}"
HOME="\${USER_HOME:-\${HOME}}"
SRC_DIR="\${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : $(__date "${GEN_SCRIPTS_VERSION}" 2>/dev/null)
# @Author        : $GEN_SCRIPTS_AUTHOR
# @Contact       : $GEN_SCRIPTS_EMAIL
# @License       : $GEN_SCRIPTS_DEFLICENSE
# @ReadME        : $(__filename $GEN_SCRIPTS_NEWFILE 2>/dev/null) --help
# @Copyright     : $GEN_SCRIPTS_COPYRIGHT
# @Created       : $(__date "${GEN_SCRIPTS_DATEFMT}" 2>/dev/null)
# @File          : $(__filename $GEN_SCRIPTS_NEWFILE 2>/dev/null)
# @Description   : ${desc:-$get_desc}
# @TODO          : ${todo:-$get_todo}
# @Other         : ${other:-$get_other}
# @Resource      : ${res:-$get_res}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main function file
if [ -f "\$SRC_DIR/functions.bash" ]; then
  FUNCTIONS_DIR="\$SRC_DIR"
  . "\$FUNCTIONS_DIR/functions.bash"
elif [ -f "\$HOME/.local/bin/functions.bash" ]; then
  FUNCTIONS_DIR="\$HOME/.local/bin"
  . "\$FUNCTIONS_DIR/functions.bash"
else
  printf "\t\t\033[0;31m%s \033[0m\n" "Couldn't source the functions file from \$FUNCTIONS_DIR"
  return 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# helper function
__version() { app_version; }
__help() {
  app_help "Usage: $(__filename $GEN_SCRIPTS_NEWFILE 2>/dev/null)  -  $(__filename $GEN_SCRIPTS_NEWFILE 2>/dev/null) --version"  \\
    "-v, --version          -  display version" \\
    "-h, --help             -  display help"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main function
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # options
  case \$1 in
    -v | --version) __version ;;
    -h | --help) __help ;;
  esac
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Required app check
  cmd_exists --error bash || exit 1
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # begin main app


  return "\${exitCode:-\$?}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# execute function
GEN_SCRIPTS_NEWFILE "\$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit \$?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
EOF
  fi
}
__gen_template_system() {
  if [ -f "$GEN_SCRIPTS_CONFIG_DIR/templates/gen_system.sh" ]; then
    cat <<EOF | tee
$(. $HOME/.config/gen-script/templates/gen_system.sh)
EOF
  else
    cat <<EOF | tee
#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(__filename $GEN_SCRIPTS_NEWFILE 2>/dev/null)"
USER="\${SUDO_USER:-\${USER}}"
HOME="\${USER_HOME:-\${HOME}}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : $(__date "${GEN_SCRIPTS_VERSION}" 2>/dev/null)
# @Author        : $GEN_SCRIPTS_AUTHOR
# @Contact       : $GEN_SCRIPTS_EMAIL
# @License       : $GEN_SCRIPTS_DEFLICENSE
# @ReadME        : $GEN_SCRIPTS_DEFREADME
# @Copyright     : $GEN_SCRIPTS_COPYRIGHT
# @Created       : $(__date "${GEN_SCRIPTS_DATEFMT}" 2>/dev/null)
# @File          : $(__filename $GEN_SCRIPTS_NEWFILE 2>/dev/null)
# @Description   : ${desc:-$get_desc}
# @TODO          : ${todo:-$get_todo}
# @Other         : ${other:-$get_other}
# @Resource      : ${res:-$get_res}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
EOF
  fi
}
__gen_header_raw() {
  if [ -f "$GEN_SCRIPTS_CONFIG_DIR/templates/gen_raw.sh" ]; then
    cat <<EOF | tee
$(. $HOME/.config/gen-script/templates/gen_raw.sh)
EOF
    cat <<EOF | tee
#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="GEN_SCRIPT_REPLACE_APPNAME"
USER="\${SUDO_USER:-\${USER}}"
HOME="\${USER_HOME:-\${HOME}}"
SRC_DIR="\${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : GEN_SCRIPT_REPLACE_VERSION
# @Author        : GEN_SCRIPT_REPLACE_AUTHOR
# @Contact       : GEN_SCRIPT_REPLACE_EMAIL
# @License       : GEN_SCRIPT_REPLACE_LICENSE
# @ReadME        : GEN_SCRIPT_REPLACE_FILENAME --help
# @Copyright     : GEN_SCRIPT_REPLACE_COPYRIGHT
# @Created       : GEN_SCRIPT_REPLACE_DATE
# @File          : GEN_SCRIPT_REPLACE_FILENAME
# @Description   : GEN_SCRIPT_REPLACE_DESC
# @TODO          : GEN_SCRIPT_REPLACE_TODO
# @Other         : GEN_SCRIPT_REPLACE_OTHER
# @Resource      : GEN_SCRIPT_REPLACE_RES
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
  return
EOF
  fi
}

__gen_functions() {
  __vars "$@"
  if [ -n "$gen_header_user" ]; then
    cat <<EOF | tee
# Main function file
if [ -f "\$SRC_DIR/functions.bash" ]; then
  FUNCTIONS_DIR="\$SRC_DIR"
  . "\$FUNCTIONS_DIR/functions.bash"
elif [ -f "$\HOME/.local/bin/functions.bash" ]; then
  FUNCTIONS_DIR="\$HOME/.local/bin"
  . "\$FUNCTIONS_DIR/functions.bash"
else
  printf "\t\t\033[0;31m%s \033[0m\n" "Could not source the functions file from $\FUNCTIONS_DIR"
  return 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
EOF
  else
    echo '# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
'${type:-user}_install'
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'
  fi
}
__backup_file() {
  local BASEDIR="${GEN_SCRIPTS_BACKUP_DIR:-$HOME/.config/gen-script/backups}"
  local BACKUPDIR="$BASEDIR/${destfolder/\//}"
  local NAME="$filename-$(date +'%m%d%Y%H%M' 2>/dev/null)"
  [ -d "$BACKUPDIR" ] || __mkd "$BACKUPDIR"
  if mv -f "$destfolder/$filename" "$BACKUPDIR/$NAME" &>/dev/null; then
    printf_blue "copied $filename to ${BACKUPDIR/$GEN_SCRIPTS_CONFIG_DIR\//}/$NAME"
  else
    printf_red "Failed to copy $filename BACKUPDIR/$NAME"
  fi
  if [ -f "$destfolder/$filename" ]; then __rm_rf "$destfolder/$filename"; fi
}
__vars() {
  [ -f "$topdir/README.md" ] && GEN_SCRIPTS_DEFREADME="README.md" || GEN_SCRIPTS_DEFREADME="$(basename "$1" 2>/dev/null) --help"
  [ -f "$topdir/LICENSE.md" ] && GEN_SCRIPTS_DEFLICENSE="LICENSE.md" || GEN_SCRIPTS_DEFLICENSE="$GEN_SCRIPTS_DEFLICENSE"
  [ -f "$topdir/version.txt" ] && GEN_SCRIPTS_VERSION="$(cat $topdir/version.txt 2>/dev/null)" || GEN_SCRIPTS_VERSION="$GEN_SCRIPTS_VERSION"
}

__find_file() {
  arg1=${1// /\/}
  arg2=${2// /\/}
  arg3=${3// /\/}
  if [ -f "$GEN_SCRIPTS_TEMPLATE_DIR/$arg1/$arg2/${arg3:-default}" ]; then
    template="$GEN_SCRIPTS_TEMPLATE_DIR/$arg1/$arg2/${arg3:-default}"
    [[ "$4" = -* ]] && dest="${newScript:-$filename}" || dest="${4:-$filename}"
    shift 3
  elif [ -f "$GEN_SCRIPTS_TEMPLATE_DIR/$arg1/${arg2:-default}" ]; then
    template="$GEN_SCRIPTS_TEMPLATE_DIR/$arg1/${arg2:-default}"
    [[ "$3" = -* ]] && dest="${newScript:-$filename}" || dest="${3:-$filename}"
    shift 2
  elif [ -f "$GEN_SCRIPTS_TEMPLATE_DIR/${arg1:-default}" ]; then
    template="$GEN_SCRIPTS_TEMPLATE_DIR/${arg1:-default}"
    [[ "$2" = -* ]] && dest="${newScript:-$filename}" || dest="${2:-filename}"
    shift 1
  else
    printf_green "Using the default template: bash"
    template="$GEN_SCRIPTS_TEMPLATE_DIR/shell/bash"
    [[ "$1" = -* ]] && dest="${newScript:-$filename}" || dest="${1:-$filename}"
  fi
  dest="${dest:-newScript}"
  __set_header "$dest" "$@"
}
__default_name() {
  [ -z "${1}" ] && printf_red "No filename was provided: using default $(__filename "${2}")" && OVERWRITE=N || return 0
}
__gen_opts() {
  local OPTS="$@"
  shift $#
  [ -d "$GEN_SCRIPT_OPTSDIR" ] && gen_opts_seen=yes || __mkd "$GEN_SCRIPT_OPTSDIR"
  if [ -z "$gen_opts_seen" ]; then
    printf_green "Generating to options file for bash completion"
  fi
  [ -n "$OPTS" ] && __GEN_OPTS=true
  if [[ "$OPTS" = "" ]] && [[ -z "$__GEN_OPTS" ]]; then
    __header_opts -a --long
    echo "-config -replace -function -header -installers -os -shell -all -copy"
    printf_newline
  fi
  if [[ "$OPTS" = --help ]]; then
    printf_blue "-create        -  create all opts files"
    printf_blue "-header        -  create header opts files"
    printf_blue "-long          -  create gen-script opt file"
    return
  fi
  if [[ "$OPTS" = -create ]]; then
    __rm_rf "$GEN_SCRIPT_OPTSDIR"
    __mkd "$GEN_SCRIPT_OPTSDIR"
    __gen_opts "-header"
    __gen_opts "-short"
    __gen_opts "-long"
  fi
  if [[ "$OPTS" = -header ]]; then
    __header_opts "-a" "--long" >"$GEN_SCRIPT_OPTSDIR/opts-header.txt"
  fi
  if [[ "$OPTS" = -short ]]; then
    echo "-c -g -f -h -i -o -s -i" >"$GEN_SCRIPT_OPTSDIR/opts-short.txt"
    __header_opts "-a" "--short" >>"$GEN_SCRIPT_OPTSDIR/opts-short.txt"
  fi
  if [[ "$OPTS" = -long ]]; then
    echo "-options -config -function -header -installers -os -shell -copy all" >"$GEN_SCRIPT_OPTSDIR/opts.txt"
  fi
  gen_opts_seen=true
  return
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$HOME/.config/gen-script" ] && __rm_rf "$HOME/.config/gen-script"
[ -d "$HOME/.config/gen-script" ] || __mkd "$HOME/.config/gen-script"
[ -f "$GEN_SCRIPT_OPTSDIR/opt-header.txt" ] || __gen_opts "-header"
[ -f "$GEN_SCRIPT_OPTSDIR/optshort-header.txt" ] || __gen_opts "-short"
[ -f "$GEN_SCRIPT_OPTSDIR/optlong-long.txt" ] || __gen_opts "-long"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
case $1 in
-replace)
    shift 1
    [ -f "$1" ] && filename="$1" || filename="$(type -P "$(basename "$1")")"
    if [ $# -ne 3 ]; then
        printf_exit "Requires filename search replace"
    else
      __update_header "$filename" "$2" "$3"
    fi
    exit
    ;;
-a | *options)
  shift 1
  __gen_opts "$@"
  exit
  ;;
-c | *copy)
  shift 1
  __copy_templates "$@"
  exit $?
  ;;
-g | *config)
  shift 1
  __config
  __copy_templates "$@"
  exit $?
  ;;

-f | *function)
  shift 1
  [[ $1 = -u ]] && gen_header_user=true && shift 1
  [ $# -lt 2 ] || printf_exit "Only takes a filename as an argument"
  printf_green "New functions info for ${1:-template}"
  __gen_functions ${1:-template}
  printf_green "End of functions"
  exit $?
  ;;

-head | *header)
  shift 1
  __header_opts "$@"
  if [[ "$1" != -* ]]; then
    filename="$1"
    shift 1
  elif __remove_opts "$HEADER_ARGS" &>/dev/null; then
    filename="$(__remove_opts "$HEADER_ARGS")"
    shift 1
  else
    filename="template"
  fi
  __gen_header "$@"
  exit $?
  ;;

-i | *installers)
  filename="${3:-$2}"
  __default_name "$3" "${filename}"
  __find_file "$@"
  ;;

-o | *os)
  filename="${3:-$2}"
  __default_name "$3" "${filename}"
  __find_file "$@"
  ;;

-s | *shell)
  filename="${3:-$2}"
  __default_name "$3" "${filename}"
  __find_file "$@"
  ;;

-l | *all) ## Bash Completion list
  shift 1
  filename="${2:-$1}"
  __default_name "$2" "${filename}"
  __find_file "$@"
  ;;

*) ## Allows drop in without need to update this
  __find_file "$@"
  ;;
esac
shift $#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Sanity check
[ -f "$template" ] || printf_exit 1 1 "The template file doesn't exist: $template"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# file and folder setup
filename="$(__filename ${dest:-newScript} 2>/dev/null)"
destfolder="$(__basedir $dest 2>/dev/null)"
# # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate the file
if [ "$filename" = "newScript" ]; then
  printf_read_question "3" "What should we name this ?" "120" "tmpfilename" "-i ${dest:-$filename}"
  tmpfilename="${tmpfilename:-$filename}"
else
  tmpfilename="$filename"
fi
filename=${tmpfilename// /_}
if [ -f "$destfolder/$filename" ] && [ "$OVERWRITE" != "Y" ]; then
  printf_read_question "3" "Should we overwrite this file?" "1" "YN" "-s"
  if printf_answer_yes "$YN"; then
    printf_read_question "3" "Should i display file before overwrite?" "1" "SHOW" "-s"
    printf_answer_yes "$SHOW" && cat "$destfolder/$filename" || __backup_file
  else
    printf_exit 1 1 "Refusing to overwrite existing file!"
  fi
fi
if [ "$MAKEFILE" != "N" ]; then
  printf_green "Copying the file ${template//$GEN_SCRIPTS_TEMPLATE_DIR\//} to"
  printf_yellow "$destfolder/$filename"
  __makefile "${template:?}" "$destfolder/$filename"
elif printf_read_question "3" "Should we just display this file?" "1" "YN" "-s" && printf_answer_yes "$YN"; then
  __makefile "${template:?}" "${TMPDIR:-/tmp}/template.$$.sh"
  cat "${TMPDIR:-/tmp}/template.$$.sh"
  __rm_rf "${TMPDIR:-/tmp}/template.$$.sh"
else
  printf_red "Not creating the file due to the MAKEFILE=no being set"
fi
if [ "$EDITFILE" != "N" ]; then
  [ -n "$OPENEDIT" ] || printf_read_question "3" "Should we edit this file?" "1" "EDIT" "-s"
  printf_answer_yes "$EDIT" && $EDITOR "$destfolder/$filename"
fi
printf_newline ""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit ${exitCode:-$?}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end

