#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="gen-license"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 020720211353-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL.md
# @ReadME        : gen-license --help.md
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Sunday, Feb 07, 2021 13:53 EST
# @File          : gen-license
# @Description   : Create a license file
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__check_app curl
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# I'm sure there is a better way to do this
if [ -d "$1" ]; then
  licDir="$1"
  shift 1
elif [ "$1" = "-d" ] || [ "$1" = "-dir" ] || [ "$1" = "--dir" ]; then
  licDir="$2"
  shift 2
  [ -d "$licDir" ] || printf_exit "$licDir doesn't seem to be a directory"
else
  licDir="$PWD"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$HOME/.config/gen-license/settings" ] && . "$HOME/.config/gen-license/settings"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
licenseDir="${licenseDir:-$HOME/.config/gen-license/files}"
licenseDirCustom="${licenseDirCustom:-$HOME/.config/gen-license/custom}"
licenseURL="${licenseURL:-$WHICH_LICENSE_URL}"
licenseFile="${licenseFile:-$WHICH_LICENSE_DEF}"
whichLicense="$(echo "$1" | tr [A-Z] [a-z])"
gitconfig_user="${gitconfig_user:-$(__git_globaluser)}"
gitconfig_email="${gitconfig_email:-$(__git_globalemail)}"
__mkd "$licenseDir"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__file_failed() {
  printf_error "Failed to get the license file"
  printf_exit 1 1 "from: $1"
}
create_local_file() {
  [ -f "$1" ] || __file_failed "$1"
  cat "$1" >"$licDir/LICENSE.md" 2>/dev/null
  if [ -f "$licDir/LICENSE.md" ] && [ -s "$licDir/LICENSE.md" ]; then
    printf_green "Your LICENSE file has been created"
  else
    __file_failed "$1"
  fi
}
get_remote_file() {
  local name="$(__basename "$1")"
  __curl "$1" >"$licenseDirCustom/$name" 2>/dev/null
  if [ -f "$licDir/LICENSE.md" ] && [ -s "$licDir/LICENSE.md" ]; then
    create_local_file "$licenseDirCustom/$name"
  else
    __file_failed "$1"
  fi
}

if [ -d "$licenseDir" ] && [ "$(__count_files "$licenseDir")" -ne 0 ]; then
  licenseURL="$licenseDir"
  get_lic() { create_local_file "$1"; }
else
  get_lic() { get_remote_file "$1"; }
fi

gen_config() {
  printf_green "Generating the config file $HOME/.config/gen-license/settings"
  cat <<EOF >"$HOME/.config/gen-license/settings"
# Settings for $APPNAME
# Default license
licenseFile="${licenseFile:-$WHICH_LICENSE_DEF}"
# Default directory
licenseDir="$licenseDir"
# Default custom directory
licenseDirCustom="${licenseDirCustom:-$HOME/.config/gen-license/custom}"
# Default URL
licenseURL="$WHICH_LICENSE_URL"
# Default name
gitconfig_user="$gitconfig_user"
# Default e-mail
gitconfig_email="$gitconfig_email"

EOF
  if [ -d "${CASJAYSDEVDIR}/templates/licenses" ] && [ "$(__count_files "$licenseDir" "2")" -eq 0 ]; then
    printf_green "Installing the license files"
    if __am_i_online; then
      __git_clone "$licenseURL" "$licenseDir/files"
    else
      if [ -d "${CASJAYSDEVDIR}/templates/licenses" ]; then
        __cp_rf "${CASJAYSDEVDIR}/templates/licenses/." "$HOME/.config/gen-license/files/"
      else
        printf_exit 1 1 "Can not get license files"
      fi
    fi
  fi
}

create_new_wtfpl() {
  if grep -q 'What The Fuck Public License' "$licDir/LICENSE.md"; then
    if grep -q 'CURYEAR AuthorName' "$licDir/LICENSE.md"; then
      [ -f "$licDir/LICENSE.md" ] && __sed -i "s# CURYEAR # $(date +'%Y') #g" "$licDir/LICENSE.md"
      [ -f "$licDir/LICENSE.md" ] && __sed -i "s#AuthorName#${gitconfig_user}#g" "$licDir/LICENSE.md"
    else
      [ -f "$licDir/LICENSE.md" ] && __sed -i "s# 2004 # $(date +'%Y') #g" "$licDir/LICENSE.md"
      [ -f "$licDir/LICENSE.md" ] && __sed -i "s#Sam Hocevar#${gitconfig_user}#g" "$licDir/LICENSE.md"
      [ -f "$licDir/LICENSE.md" ] && __sed -i "s#sam@hocevar.net#${gitconfig_email}#g" "$licDir/LICENSE.md"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Init
if [ ! -f "$HOME/.config/gen-license/settings" ] && [ ! -d "$HOME/.config/gen-license/settings" ]; then
  gen_config
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main
case "$whichLicense" in
list)
  shift 1
  if [ "$(__count_files "$licenseDir/files")" -eq 0 ]; then
    cat "${CASJAYSDEVDIR}/helpers/gen-license/array" | printf_readline "2"
  else
    __find "$licenseDir/files" | printf_readline "2"
  fi
  ;;

config)
  shift 1
  gen_config
  ;;

download)
  shift 1
  printf_green "Cloning the repo to $licenseDir/files"
  [ -d "$licenseDir/files" ] && __mv_f "$licenseDir/files" "$licenseDir/files.old"
  __git_clone "$licenseURL " "$licenseDir/files"
  ;;

wtfpl)
  shift 1
  printf_green "Using the WTFPL license for $licDir"
  get_lic "$licenseURL/wtfpl.md"
  create_new_wtfpl
  ;;

gpl1)
  shift 1
  printf_green "Using the GPL V1 license for $licDir"
  get_lic "$licenseURL/gnu-gpl-v1.0.md"
  ;;

gpl2)
  shift 1
  printf_green "Using the GPL V2 license for $licDir"
  get_lic "$licenseURL/gnu-gpl-v2.0.md"
  ;;

gpl3)
  shift 1
  printf_green "Using the GPL V3 license for $licDir"
  get_lic "$licenseURL/gnu-gpl-v3.0.md"
  ;;

agpl)
  shift 1
  printf_green "Using the AGPL license for $licDir"
  get_lic "$licenseURL/gnu-agpl-v3.0.md"
  ;;

fdl)
  shift 1
  printf_green "Using the FDL license for $licDir"
  get_lic "$licenseURL/gnu-fdl-v1.3.md"
  ;;

mit)
  shift 1
  printf_green "Using the MIT license for $licDir"
  get_lic "$licenseURL/mit.md"
  ;;

apache)
  shift 1
  printf_green "Using the Apache license for $licDir"
  get_lic "$licenseURL/apache-v2.0.md"
  ;;

bsd2)
  shift 1
  printf_green "Using the BSD license for $licDir"
  get_lic "$licenseURL/bsd-2.md"
  ;;

bsd3)
  shift 1
  printf_green "Using the BSD license for $licDir"
  get_lic "$licenseURL/bsd-3.md"
  ;;

custom)
  shift 1
  printf_green "Using the custom license for $licDir"
  if [ -f "$1" ]; then
    create_local_file "$1"
  else
    get_remote_file "$1"
  fi
  ;;

*)
  shift
  if [ ! -f "$licDir/$whichLicense" ]; then
    printf_red "File doesn't exist: Using the default license"
  else
    printf_green "Using the default license for $licDir"
  fi
  if [ -f "$licenseFile" ]; then
    create_local_file "$licenseFile"
  else
    get_remote_file "$licenseFile"
  fi
  create_new_wtfpl
  ;;

esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
