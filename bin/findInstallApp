#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103200710-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : findInstallApp --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 07:10 EDT
# @File          : findInstallApp
# @Description   : Try to find and install the application
# @TODO          : Add zenity prompts
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__requiresudo true
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__dfmgr() { __devnull dfmgr "$*" && exitCode=0 || exitCode=1; }
__pkmgr() { __devnull pkmgr "$*" && exitCode=0 || exitCode=1; }
__systemmgr() { __devnull sudo systemmgr "$*" && exitCode=0 || exitCode=1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__message() {
  local mgr="$1" && shift 1
  local arg="$*" && shift $#
  if [ -z "$DISPLAY" ]; then
    printf_green "Trying to find $arg via $mgr"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
run_pkmgr_findInstallApp() {
  __cmd_exists pkmgr || return 1
  local pkg LISTARRAY
  declare -a LISTARRAY="$*"
  __message "pkmgr" "$LISTARRAY"
  for pkg in ${LISTARRAY[*]}; do
    __cmd_exists "$pkg" || __pkmgr install "$pkg"
  done
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
run_dfmgr_findInstallApp() {
  __cmd_exists dfmgr || return 1
  local pkg LISTARRAY
  declare -a LISTARRAY="$*"
  __message "dfmgr" "$LISTARRAY"
  for pkg in ${LISTARRAY[*]}; do
    __cmd_exists "$pkg" || __dfmgr install "$pkg"
  done
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
run_systemmgr_findInstallApp() {
  __cmd_exists systemmgr || return 1
  local pkg LISTARRAY
  declare -a LISTARRAY="$*"
  __message "systemmgr" "$LISTARRAY"
  for pkg in ${LISTARRAY[*]}; do
    __cmd_exists "$pkg" || __systemmgr install "$pkg"
  done
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
run_npm_findInstallApp() {
  cmd_exists npm || return 1
  local pkg LISTARRAY
  declare -a LISTARRAY="$*"
  __message "npm" "$LISTARRAY"
  for pkg in ${LISTARRAY[*]}; do
    __cmd_exists "$pkg" || __pkmgr npm install "$pkg"
  done
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
main() {
  if __am_i_online && [ $# -ne 0 ]; then
    run_pkmgr_findInstallApp "$@" ||
      run_dfmgr_findInstallApp "$@" ||
      run_systemmgr_findInstallApp "$@" ||
      run_npm_findInstallApp "$@" ||
      export exitCode=$?
  else
    sleep 3
    export exitCode=1
  fi
  return=$exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -n "$DISPLAY" ] && [ -z "$SSH_TTY" ]; then
  main "$@" | zenity --progress --no-cancel --pulsate --auto-close --title="Attempting install" --text="Trying to install $*" --height=200 --width=400
else
  main "$@"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$exitCode" = 0 ]; then
  if [ -n "$DISPLAY" ] && [ -z "$SSH_TTY" ]; then
    zenity --timeout=10 --height=200 --width=400 --info --title="Install successfull" --text="Successfully installed $*"
  else
    printf_green "Successfully installed $*"
  fi
  exitCode=0
else
  if [ -n "$DISPLAY" ] && [ -z "$SSH_TTY" ]; then
    zenity --timeout=10 --height=200 --width=400 --error --title="Install unsuccessfull" --text="Failed to install $*"
  else
    printf_error "Failed to install $*"
  fi
  exitCode=1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit ${exitCode:-$?}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
