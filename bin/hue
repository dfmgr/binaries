#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103200810-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : hue --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 08:10 EDT
# @File          : hue
# @Description   : Manage hue lights
# @TODO          :
# @Other         :
# @Resource      : http://hkionline.net/posts/using-phillips-hue-from-the-command-line
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
main() {
  unset hue_api_key hue_device hue_option
  local setopts="$1"
  local cache="${TMPDIR:-/tmp}"
  local state="$cache/automate_hue"
  local hue_device="$(__hostname2ip ${HUE_HUB_DEVICE:-$2})"
  local hue_device_name="${HUE_HUB_DEVICE:-$2}"
  local hue_api_key="${HUE_ACCESS_TOKEN}"
  local hue_group="${HUE_GROUP:-0}"
  local api_url="${HUE_HUB_API:-http://$hue_device/api/$hue_api_key/groups/$hue_group}"
  __mkd "$cache"
  touch "$state"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  [ ! -z "$hue_api_key" ] || printf_exit "Please set your hue api key"
  [ ! -z "$hue_device" ] || printf_exit "Please enter the hostname of your hue hub"
  [ ! -z "$hue_device" ] || printf_exit "Please enter the the command you want to send to your hue"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # functions
  __getstate() { [ -f "$state" ] && cat "$state" || echo; }
  __curlcmd() { curl --disable -LSsfk --connect-timeout 3 --retry 0 --fail "$@"; }
  __curlapi() { __return_ok "$1" "$2" "$3" || __return_error "$4"; }
  __return_ok() { __curlcmd -X PUT "$api_url/action" -d '{"'$1'": '$2'}' | grep -q success && printf_green "Telling $hue_device_name to $3"; }
  __return_error() {
    printf_error "Failed to send the command ${1} to:"
    printf_error "$api_url"
    printf_newline "\n"
    return 1
  }
  hue_on() {
    __curlapi "on" "true" "turn on the lights" "on" && echo on >"$state"
  }
  hue_off() {
    __curlapi "on" "false" "turn off the lights" "off" && echo off >"$state"

  }
  hue_toggle() {
    if [ "$(cat $state)" = on ]; then
      hue_off
    elif [ "$(cat $state)" = off ]; then
      hue_on
    fi
  }

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # main
  if [ ! -s "$state" ]; then echo on >"$state"; fi

  case "$setopts" in
  on | true | 0 | stop)
    hue_on
    ;;

  off | false | 1 | play)
    hue_off
    ;;

  toggle)
    hue_toggle
    ;;

  state)
    case "$2" in

    text) echo -e "$(__getstate)" ;;

    json | *) echo -e '{"status":"'$(__getstate)'"}' ;;
    esac

    ;;

  brightness | bright | b)
    shift 1
    opts="${1:-0}"
    shift
    [ "$opts" -gt "255" ] && printf_exit "Enter a number between 0 and 255"
    hue_on >/dev/null && __curlapi "bri" "$opts" "set the brightness to $opts" '{"bri": '"$opts"'}'
    ;;

  sat | s)
    shift 1
    opts="${1:-0}"
    shift
    [ "$opts" -gt "255" ] && printf_exit "Enter a number between 0 and 255"
    hue_on >/dev/null && __curlapi "sat" "$opts" "set the saturation to $opts" '{"sat": '"$opts"'}'
    ;;

  hue | h)
    shift 1
    opts="${1:-0}"
    shift
    hue_on >/dev/null && __curlapi "hue" "$opts" "set the hue to $opts" '{"hue": '"$opts"'}'
    ;;

  effect | e)
    shift 1
    opts="${1:-0}"
    shift
    #curl -LSsq -X PUT "$api_url/action" -d '{"effect": "'$1'"}'
    hue_on >/dev/null && __curlapi "hue" "$opts" "set the effect to $opts" '{"effect": "'$opts'"}'
    ;;

  info)
    printf_green "Getting info for group $hue_group from $hue_device_name"
    __curlcmd "$api_url" | jq
    ;;

  *)
    hue_toggle
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#execute
main "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
