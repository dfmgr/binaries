#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103201720-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : mybluetooth --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 17:20 EDT
# @File          : mybluetooth
# @Description   : Setup bluetooth devices
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check for needed applications
__cmd_exists bluetoothctl || printf_exit 1 1 "bluetoothctl is not installed"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set options
DEFAULT_DEVICE="0C:FC:83:99:BC:9A"
OPTIONS="$1" && shift 1
CONFIG="$1"
ARGS="$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import existing config
MYTERMINAL_NOTIFICATIONS="no"
if [ -f "$HOME/.config/mybluetooth/${CONFIG}.conf" ]; then
  . "$HOME/.config/mybluetooth/${CONFIG}.conf"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set device
if [ -z "$MY_BT_DEVICE" ]; then
  echo "$1" | grep -q ':' && MY_BT_DEVICE="$1" && shift 1 || MY_BT_DEVICE="${MY_BT_DEVICE:-$DEFAULT_DEVICE}"
elif [ -f "$HOME/.config/mybluetooth/default.conf" ]; then
  . "$HOME/.config/mybluetooth/default.conf"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ok_msg() { printf_green "$1" && return 0; }
__fail_msg() { printf_exit "1" "1" "$ICON_ERROR $1"; }

__config() {
  if [ "$ARGS" = "--help" ]; then
    printf_exit 3 0 "Usage: mybluetooth config device name | IE: mybluetooth config ADDRESS speaker"
  fi
  local appname="${1:-default}"
  printf_green "Generating the config file for ${1:-main}"
  __mkd "$HOME/.config/mybluetooth"
  echo '# Settings for mybluetooth - '${1:-main}'
CONFIGNAME="'${1:-main}'"
MY_BT_DEVICE="'${MY_BT_DEVICE}'"
' >"$HOME/.config/mybluetooth/$appname.conf"
  if [ -f "$HOME/.config/mybluetooth/$appname.conf" ]; then
    printf_green "File has been saved to"
    printf_green "$HOME/.config/mybluetooth/$appname.conf"
  else
    printf_error "Failed to generate the file"
    return 1
  fi
  exit $?
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
case $OPTIONS in
config | *-config)
  if echo $MY_BT_DEVICE | grep -q ":" 2>/dev/null; then
    if [ $# = 0 ]; then
      MY_BT_DEVICE="$DEFAULT_DEVICE"
      __config "default"
    elif [ "$MY_BT_DEVICE" != "$DEFAULT_DEVICE" ]; then
      __config "$@"
    else
      __config --help
    fi
  else
    __config --help
  fi
  exit $?
  ;;

on | *-on | -connect)
  bluetoothctl connect "$MY_BT_DEVICE" | grep -iq "Connection successful" >/dev/null 2>&1 &&
    __ok_msg "Connected" || __fail_msg "Connection failed"
  exit $?
  ;;

off | *-off | -disconnect)
  bluetoothctl disconnect "$MY_BT_DEVICE" | grep -iq "Successful disconnected" >/dev/null 2>&1 &&
    __ok_msg "Disconnected" || __fail_msg "Disconnection failed"
  exit $?
  ;;

discover | *-discover)
  case $1 in
  on | *-on)
    shift 1
    bluetoothctl discoverable on | grep -iq "on succeeded" >/dev/null 2>&1 &&
      __ok_msg "Device is now in discoverable mode" || __fail_msg "Failed to initiate discovery mode"
    exit $?
    ;;

  off | *-off)
    shift 1
    bluetoothctl discoverable off | grep -iq "off succeeded" >/dev/null 2>&1 &&
      __ok_msg "Device has ended discoverable mode" || __fail_msg "Failed to exit discovery mode"
    exit $?
    ;;
  esac
  ;;

add | pair)
  printf_yellow "Scanning for device"
  timeout 20 bluetoothctl scan on &>/dev/null
  bluetoothctl pair "$MY_BT_DEVICE" &>/dev/null &&
    bluetoothctl trust "$MY_BT_DEVICE" &>/dev/null &&
    printf_green "$MY_BT_DEVICE has been added" ||
    printf_exit 1 1 "Failed to pair to $MY_BT_DEVICE"
  exit $?
  ;;

remove | unpair)
  bluetoothctl remove "$MY_BT_DEVICE" | grep -q 'been removed' &&
    printf_green "$MY_BT_DEVICE has been removed"
  exit $?
  ;;

status)
  printf_green "Bluetooth status"
  bluetoothctl info "$MY_BT_DEVICE" | printf_readline "4"
  exit $?
  ;;

search)
  trap 'bluetoothctl scan off &>/dev/null' QUIT
  printf_green "Press control-C to cancel search"
  if [ ${#ARGS} -eq 0 ]; then
    printf_green "Searching please wait....."
    bluetoothctl scan on
  elif [ ${#ARGS} -ne 0 ]; then
    printf_green "Searching for $ARGS"
    bluetoothctl scan on | grep -i "$ARGS"
  fi
  bluetoothctl scan off &>/dev/null
  exit 0
  ;;

*)
  shift
  printf_green "Available controller[s]"
  bluetoothctl list | printf_readline "4"
  printf_green "Bluetooth status"
  bluetoothctl info "$MY_BT_DEVICE" | printf_readline "4"
  printf_green "Paired devices"
  bluetoothctl paired-devices | printf_readline "4"
  exit
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
