#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202103310710-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap '[ -f "$PKMGR_TEMP_FILE" ] && rm -Rf "$PKMGR_TEMP_FILE" &>/dev/null' EXIT

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103310710-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : pkmgr --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Wednesday, Mar 31, 2021 07:10 EDT
# @File          : pkmgr
# @Description   : Manage system packages
# @TODO          : Refactor code/Add zenity support/Add user conf file
# @Other         : Add BSD support
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
pkmgr_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$PKMGR_CONFIG_DIR/$PKMGR_CONFIG_FILE"
  [ -d "$PKMGR_CONFIG_DIR" ] || mkdir -p "$PKMGR_CONFIG_DIR"
  [ -d "$PKMGR_CONFIG_BACKUP_DIR" ] || mkdir -p "$PKMGR_CONFIG_BACKUP_DIR"
  [ -f "$PKMGR_CONFIG_DIR/$PKMGR_CONFIG_FILE" ] &&
    cp -Rf "$PKMGR_CONFIG_DIR/$PKMGR_CONFIG_FILE" "$PKMGR_CONFIG_DIR/$PKMGR_CONFIG_FILE.$$"
  cat <<EOF >"$PKMGR_CONFIG_DIR/$PKMGR_CONFIG_FILE"
# Settings for pkmgr
PKMGR_FORCE_INSTALL="false"
PKMGR_TEMP_FILE="${TMPDIR:-/tmp}/pkmgr"
PKMGR_NOTIFY_ENABLED="yes"
PKMGR_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
PKMGR_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$PKMGR_NOTIFY_CLIENT_ICON}"
EOF
  if [ -f "$PKMGR_CONFIG_DIR/$PKMGR_CONFIG_FILE" ]; then
    printf_green "Your config file for pkmgr has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__list_available() {
  echo -e '' | tr ' ' '\n'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
run_updatechecheck() { __am_i_online --error && pkmgrcheckupdates; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__rm_rf() { sudo rm -Rf "$@"; }
__cp_rf() { sudo cp -Rf "$@"; }
__curl() { __am_i_online --error && curl --disable -LSsfk --connect-timeout 3 --retry 0 --fail "$*" 2>/dev/null || return 1; }
__curl_sudo() { __am_i_online --error && curl --disable -LSsfk --connect-timeout 3 --retry 0 --fail "$*" 2>/dev/null || return 1; }
__not_installed() { echo -ne "${RED}Not Installed${NC}"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
pipecmd() {
  # if [ -n "$DISPLAY" ]; then
  #   [ -f "$(command -v zenity)" ] && [ -z "$SSH_TTY" ] &&
  #     zenity --progress --no-cancel --pulsate --auto-close --title="Attempting install" --text="Trying to install" --height=200 --width=400 || printf_readline "5"
  # else
  printf_readline "5"
  # fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cpan_run() {
  if cmd_exists cpan; then
    local cpandir="$(__devnull2 sudo find /usr/share/perl* /usr/local/share/perl* -path '*/CPAN/Version.pm' | sed 's#/Version.pm##g' | head -n1)"
    local cpanconf="https://raw.githubusercontent.com/casjay-base/centos/master/usr/share/perl5/CPAN/Config.pm"
    local cpanfile="$cpandir/Config.pm"
    if [ ! -f "$cpanfile" ] || [ ! -f "$cpandir/.init" ]; then
      printf_green "Grabbing the CPAN.pm file"
      __urlcheck "$cpanconf" &&
        __curl_sudo "$cpanconf" -o "$cpanfile" &&
        sudo touch "$cpandir/.init" || exit 1
    fi
    sudo bash -c "cpan notest install $*" 2>/dev/null | printf_readline || return 1
  fi
}
cpan_remove() {
  cmd_exists cpan || return 1
  sudo bash -c "cpan --uninstall $*" 2>/dev/null | printf_readline || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
pip_run() {
  if cmd_exists pip3; then
    sudo bash -c "pip3 install --upgrade $*" 2>/dev/null | printf_readline || return 1
  elif cmd_exists pip; then
    sudo bash -c "pip install --upgrade $*" 2>/dev/null | printf_readline || return 1
  else
    exit 1
  fi
}
pip_remove() {
  if cmd_exists pip3; then
    sudo bash -c "pip3 remove $*" 2>/dev/null | printf_readline || return 1
  elif cmd_exists pip; then
    sudo bash -c "pip remove $*" 2>/dev/null | printf_readline || return 1
  else
    exit 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
gem_run() {
  cmd_exists gem || return 1
  sudo bash -c "gem install --no-user-install $*" 2>/dev/null | printf_readline || return 1
}
gem_remove() {
  cmd_exists gem || return 1
  sudo bash -c "gem uninstall --no-user-install --force -aIx $*" 2>/dev/null | printf_readline || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
npm_run() {
  cmd_exists npm || return 1
  if command -v nvm &>/dev/null; then nvm unload; fi
  NODEINSTDIR="$(command -v node | sed 's#/node##g')"
  sudo bash -c "npm install -g $*" 2>/dev/null | printf_readline || return 1
}
npm_remove() {
  cmd_exists npm || return 1
  if command -v nvm &>/dev/null; then nvm unload; fi
  NODEINSTDIR="$(command -v node | sed 's#/node##g')"
  sudo bash -c "npm remove -g $*" 2>/dev/null | printf_readline || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
curl_run() {
  [ -z $1 ] && printf_exit 1 0 "Usage: pkmgr curl OS filename or pkmgr curl fullurltolist "
  local os="$(echo $OS | tr '[:upper:]' '[:lower:]')"
  local distro="$(echo $DISTRO | tr '[:upper:]' '[:lower:]')"
  local distroid="$(echo $DISTROID | tr '[:upper:]' '[:lower:]')"
  if [[ $1 =~ https?://.* ]] || [[ $1 =~ ftp?://.* ]]; then
    local url="$1"
    __urlverify "$url"
    __curl "$url" -o "$PKMGR_TEMP_FILE"
  else
    local url="$REPO/$1/raw/$GIT_REPO_BRANCH/lists/$2.list"
    shift "$#"
    __urlverify "$url"
    __curl "$url" -o "$PKMGR_TEMP_FILE"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
script_run_if_is_url() {
  [ -z $1 ] && printf_exit 1 0 "Usage: pkmgr script filename or url "
  if [[ $1 =~ https?://.* ]] || [[ $1 =~ ftp?://.* ]]; then
    __urlverify "$1"
    __curl "$1" -o /tmp/pkmgr-script.sh
  else
    __cp_rf "$1" "/tmp/pkmgr-script.sh"
  fi
  if [ -f /tmp/pkmgr-script.sh ]; then
    chmod 755 /tmp/pkmgr-script.sh
  else
    printf_red "Error file does not exit"
    exit 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
script_run() {
  if [ "$1" = "--script" ]; then
    shift 1
    script_run_if_is_url "$1"
    __execute "/tmp/pkmgr-script.sh" "executing the script"
  elif [ "$1" = "--line" ]; then
    shift 1
    script_run_if_is_url "$1"
    while read -r line; do __execute "$line" "$line"; done <"/tmp/pkmgr-script.sh"
  else
    script_run_if_is_url "$1"
    /tmp/pkmgr-script.sh
  fi
  __rm_rf "/tmp/pkmgr-script.sh"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__schedule() {
  local logfile="/var/log/pkmgr/cron.log"
  local loggerfile="/var/log/pkmgr/cron.err"
  local file="/etc/cron.d/pkmgr_update"
  local tmpfile="/tmp/pkmgr_cron"
  local mailadmin="${NOTIFICATION_MAIL:-root}"
  local sleepcmd="$(expr $RANDOM \% 300)"
  local date="$(date +"%m-%d-%Y %H:%M")"
  local cronjob="0 4 * * * root sleep ${sleepcmd} ; pkmgr cron run"
  sudo mkdir -p /var/log/pkmgr

  case "$1" in
  remove)
    shift 1
    printf_green "Removing pkmgr schedule"
    __rm_rf "$file" ||
      printf_error "Failed to remove $file"
    ;;
  add)
    shift 1
    printf_green "Adding pkmgr to run daily at 4am with random sleep of $sleepcmd seconds"
    echo "MAILTO=$mailadmin" >"$tmpfile"
    echo "$cronjob" >"$tmpfile"
    sudo chown -f root:root "$tmpfile"
    sudo chmod -f 600 "$tmpfile"
    sudo mv -f $tmpfile $file ||
      printf_error "Failed to install $tmpfile to $file"
    ;;
  run)
    shift 1
    echo -e "###########\n$date\n###########\n" | sudo tee -a "$logfile" &>/dev/null
    echo -e "###########\n$date\n###########\n" | sudo tee -a "$loggerfile" &>/dev/null
    sudo $pkgmgrbinupdcron 2>>"$loggerfile.tmp" | sudo tee -a "$logfile" &>/dev/null
    if [ -s "$loggerfile.tmp" ] && [ -f "$loggerfile.tmp" ] && [[ ! -z $(grep '[^[:space:]]' $loggerfile.tmp) ]]; then
      if cmd_exists mail; then
        MAILMESS="$(echo -e "Errors were reported and they are as follows:\n""$(cat $loggerfile.tmp)\n")"
        echo $MAILMESS | mail -r "$mailadmin" -s "pkmgr failed" "$mailadmin"
      fi
    fi
    [ ! -f "$loggerfile.tmp" ] || sudo cat "$loggerfile.tmp" sudo | tee -a "$loggerfile" && __rm_rf "$loggerfile.tmp"
    ;;
  *)
    [ -f "$file" ] && pkmgr cron remove || pkmgr cron add
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
dotfiles_run() {
  [ -n "$1" ] || printf_exit "Usage: pkmgr dotfiles name"
  local file="$*"
  local f=""
  echo > "$PKMGR_TEMP_FILE"
  for f in $file; do
    local url="$dotfilesrepo/$f.list"
    __urlverify "$url" && __curl "$url" >>"$PKMGR_TEMP_FILE" || return 1
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__aliases() {
  echo -e "
  alias apt='sudo $APPNAME '
  alias apt-get='sudo $APPNAME '
  alias dnf='sudo $APPNAME '
  alias yum='sudo $APPNAME '
  alias pacman='sudo $APPNAME '
  alias brew='sudo $APPNAME '
  alias yay='sudo $APPNAME '
  "
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
show_info() {
  printf_info "         System info for $(hostname -s)"
  printf_green "Repo:                       $dotfilesrepo"
  printf_green "system package manager:     $pkgmgrbin"
  printf_green "Install cmd:                $pkgmgrbinins"
  printf_green "Install silent cmd:         $pkgmgrbininssil"
  printf_green "Remove cmd:                 $pkgmgrbindel"
  printf_green "Remove silent cmd:          $pkgmgrbinremsil"
  printf_green "Update cmd:                 $pkgmgrbinupd"
  printf_green "Update silent cmd:          $pkgmgrbinupdsil"
  printf_green "Search cmd:                 $pkgmgrbinsea"
  printf_green "Clean cache cmd:            $pkgmgrbincle"
  printf_green "Make cache cmd:             $pkgmgrbincac"
  printf_green "Python:                     $(command -v python3 || command -v python2 || __not_installed)"
  printf_green "PIP:                        $(command -v pip3 || command -v pip || __not_installed)"
  printf_green "CPAN:                       $(command -v cpan || __not_installed)"
  printf_green "Gem:                        $(command -v gem || __not_installed)"
  printf_green "NPM:                        $(command -v node || __not_installed)"
  if [ -n "$DISTRO" ]; then
    printf_green "Distribution:               $DISTRO"
    printf_green "Distro Version:             $DISTRO_VERSION"
    [ -z "$CODENAME" ] ||
      printf_green "Release version:            $CODENAME"
  elif cmd_exists lsb_release; then
    printf_green "Distribution:               $(lsb_release -a 2>dev >null | grep -i Distributor | awk '{print $3}')"
    printf_green "Codename:                   $(lsb_release -a 2>dev >null | grep -i Codename | awk '{print $2}')"
    printf_green "Release version:            $(lsb_release -a 2>dev >null | grep -i Release | awk '{print $2}')"
  fi
  printf_green "Kernel version              $(uname -r)"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exportpkg() {
  [[ "$(uname -s)" =~ Darwin* ]] && DISTRO=MacOS
  [[ "$(uname -s)" =~ ^MING*|WIN*|MSYS* ]] && DISTRO=Windows
  local pkgdir="$HOME/.local/tmp/${DISTRO:-}"
  local pkglist="$pkgdir/$(hostname -s).list"
  mkdir -p "$pkgdir"
  printf_green "Exporting package list to:"
  printf_green "$pkglist"
  pkgmgrexport >"$pkglist"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
PKMGR_CONFIG_FILE="settings.conf"
PKMGR_CONFIG_DIR="$HOME/.config/myscripts/pkmgr"
PKMGR_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/pkmgr/backups"
PKMGR_OPTIONS_DIR="$HOME/.local/share/myscripts/pkmgr/options"
PKMGR_TEMP_FILE="${TMPDIR:-/tmp}/pkmgr"
PKMGR_NOTIFY_ENABLED="yes"
PKMGR_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
PKMGR_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$PKMGR_NOTIFY_CLIENT_ICON}"
PKMGR_FORCE_INSTALL="false"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="$*"
SHORTOPTS="c,v,h,f"
LONGOPTS="options,config,version,help,force,enable-aur"
ARRAY="check alias available install remove list curl script dotfiles upgrade export clean init makecache search "
ARRAY+="required silent cpan pip gem npm info version "

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$PKMGR_CONFIG_DIR/$PKMGR_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$PKMGR_OPTIONS_DIR/options" ] || __list_options "$PKMGR_OPTIONS_DIR" &>/dev/null
[ -f "$PKMGR_OPTIONS_DIR/array" ] || __list_array "$PKMGR_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$PKMGR_CONFIG_DIR/$PKMGR_CONFIG_FILE" ]; then
  . "$PKMGR_CONFIG_DIR/$PKMGR_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$PKMGR_OPTIONS_DIR" "$ARRAY"
    __list_options "$PKMGR_OPTIONS_DIR"
    __list_available >"$PKMGR_OPTIONS_DIR/available"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  -f | --force)
    shift 1
    export FORCE_INSTALL="true"
    ;;
  --enable-aur)
    shift 1
    ENABLE_AUR="true"
    ;;
  -a | --all)
    INSTALL_ALL="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${PKMGR_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${PKMGR_NOTIFY_CLIENT_ICON}"
if [ "$PKMGR_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
export SUDO_USER
if [[ "$(__devnull2 python3 -V)" =~ "Python 3" ]]; then
  PYTHONVER="python3"
  PIP="pip3"
  PATH="${PATH}:$(python3 -c 'import site; print(site.USER_BASE)')/bin"
elif [[ "$(__devnull2 python2 -V)" =~ "Python 2" ]]; then
  PYTHONVER="python"
  PIP="pip"
  PATH="${PATH}:$(python -c 'import site; print(site.USER_BASE)')/bin"
fi
if cmd_exists pacman; then
  PYTHONVER="python"
  PIP="pip3"
fi
[ -f "$PKMGR_TEMP_FILE" ] && __rm_rf "$PKMGR_TEMP_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Variables - Distro specific
case "$(uname -s)" in                                                                                                             #
Linux)                                                                                                                            #
  if [ -f "$(command -v apt-get)" ]; then                                                                                         #
    export DEBIAN_FRONTEND=noninteractive                                                                                         #
    export APT_OPTS="-o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold""                                   #
    dotfilesrepo="$REPODF/apt"                                                                                                    #
    pkgmgrbin="sudo -E /usr/bin/apt-get"                                                                                          #
    pkgmgrbinins="$pkgmgrbin install"                                                                                             #
    pkgmgrbininssil="$pkgmgrbin install $APT_OPTS --ignore-missing -yy -qq --allow-unauthenticated --assume-yes"                  #
    pkgmgrbinremsil="$pkgmgrbin remove -yy -qq --assume-yes --purge"                                                              #
    pkgmgrbinupdsil="$pkgmgrbin dist-upgrade $APT_OPTS --ignore-missing -yy -qq --allow-unauthenticated --assume-yes"             #
    pkgmgrbinupdcron="$pkgmgrbin dist-upgrade $APT_OPTS --ignore-missing -yy --allow-unauthenticated --assume-yes"                #
    pkgmgrbindel="$pkgmgrbin remove --purge"                                                                                      #
    pkgmgrbinsea="sudo -E /usr/bin/apt-cache search"                                                                              #
    pkgmgrbinupd="$pkgmgrbin dist-upgrade"                                                                                        #
    pkgmgrbincle="$pkgmgrbin clean"                                                                                               #
    pkgmgrbincac="$pkgmgrbin update"                                                                                              #
    pkmgrcheckupdates() { $pkgmgrbin update >/dev/null && $pkgmgrbin --just-print upgrade | grep "Inst " | wc -l; }             #
    pkgmgrexport() { dpkg -l | grep ^ii | awk '{print $2}' | sed "s#:.*##g" | sort -u; }                                          #
  elif [ -f "$(command -v apt)" ]; then                                                                                           #
    export DEBIAN_FRONTEND=noninteractive                                                                                         #
    export APT_OPTS="-o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold""                                   #
    dotfilesrepo="$REPODF/apt"                                                                                                    #
    pkgmgrbin="sudo -E /usr/bin/apt"                                                                                              #
    pkgmgrbinins="$pkgmgrbin install"                                                                                             #
    pkgmgrbininssil="$pkgmgrbin install $APT_OPTS --ignore-missing -yy -qq --allow-unauthenticated --assume-yes"                  #
    pkgmgrbinremsil="$pkgmgrbin remove -yy -qq --assume-yes --purge"                                                              #
    pkgmgrbinupdsil="$pkgmgrbin dist-upgrade $APT_OPTS --ignore-missing -yy -qq --allow-unauthenticated --assume-yes"             #
    pkgmgrbinupdcron="$pkgmgrbin dist-upgrade $APT_OPTS --ignore-missing -yy --allow-unauthenticated --assume-yes"                #
    pkgmgrbindel="$pkgmgrbin remove --purge"                                                                                      #
    pkgmgrbinsea="sudo -E /usr/bin/apt-cache search"                                                                              #
    pkgmgrbinupd="$pkgmgrbin dist-upgrade"                                                                                        #
    pkgmgrbincle="$pkgmgrbin clean"                                                                                               #
    pkgmgrbincac="$pkgmgrbin update"                                                                                              #
    pkmgrcheckupdates() { $pkgmgrbin update >/dev/null && $pkgmgrbin --just-print upgrade | grep "Inst " | wc -l; }             #
    pkgmgrexport() { dpkg -l | grep ^ii | awk '{print $2}' | sed "s#:.*##g" | sort -u; }                                          #
  elif [ -f "$(command -v pacman)" ]; then                                                                                        #
    dotfilesrepo="$REPODF/pacman"                                                                                                 #
    pkgmgrbin="sudo -E /usr/bin/pacman"                                                                                           #
    pkgmgrbinins="$pkgmgrbin -S --noconfirm --overwrite='*'"                                                                      #
    pkgmgrbininssil="$pkgmgrbin -S --noconfirm --needed --overwrite='*' "                                                         #
    pkgmgrbinremsil="$pkgmgrbin -R --noconfirm"                                                                                   #
    pkgmgrbinupdsil="$pkgmgrbin -Syyu --noconfirm"                                                                                #
    pkgmgrbinupdcron="$pkgmgrbin -Syyu --noconfirm"                                                                               #
    pkgmgrbindel="$pkgmgrbin -R"                                                                                                  #
    pkgmgrbinsea="$pkgmgrbin -Ss"                                                                                                 #
    pkgmgrbinupd="$pkgmgrbin -Syyu --needed --overwrite='*'"                                                                      #
    pkgmgrbincle="$pkgmgrbin -Scc --noconfirm"                                                                                    #
    pkgmgrbincac="$pkgmgrbin -Syy"                                                                                                #
    pkmgrcheckupdates() { $pkgmgrbin -Qu 2>/dev/null | wc -l; }                                                                 #
    pkgmgrexport() { pacman -Qqe | grep -v "$(pacman -Qqm)" && echo '###' && pacman -Qqet | grep -v "$(pacman -Qqm)" | sort -u; } #
  elif [ -f "$(command -v pamac)" ]; then                                                                                         #
    dotfilesrepo="$REPODF/pacman"                                                                                                 #
    pkgmgrbin="sudo /usr/bin/pamac"                                                                                               #
    pkgmgrbinins="$pkgmgrbin install --noconfirm"                                                                                 #
    pkgmgrbininssil="$pkgmgrbin install --noconfirm"                                                                              #
    pkgmgrbinremsil="$pkgmgrbin remove --noconfirm"                                                                               #
    pkgmgrbinupdsil="$pkgmgrbin upgrade -a"                                                                                       #
    pkgmgrbinupdcron="$pkgmgrbin upgrade -a"                                                                                      #
    pkgmgrbindel="$pkgmgrbin remove"                                                                                              #
    pkgmgrbinsea="$pkgmgrbin search -a"                                                                                           #
    pkgmgrbinupd="$pkgmgrbin upgrade -a"                                                                                          #
    pkgmgrbincle="$pkgmgrbin clean"                                                                                               #
    pkgmgrbincac="$pkgmgrbin checkupdates"                                                                                        #
    pkmgrcheckupdates() { echo 0; }                                                                                               #
    pkgmgrexport() { pacman -Qqet | grep -v "$(pacman -Qqm)" | sort -u; }                                                         #
  elif [ -f "$(command -v dnf)" ]; then                                                                                           #
    dotfilesrepo="$REPODF/yum"                                                                                                    #
    pkgmgrbin="sudo /usr/bin/dnf"                                                                                                 #
    pkgmgrbinins="$pkgmgrbin install"                                                                                             #
    pkgmgrbininssil="$pkgmgrbin install -y -q"                                                                                    #
    pkgmgrbinremsil="$pkgmgrbin remove -y -q"                                                                                     #
    pkgmgrbinupdsil="$pkgmgrbin update -y -q"                                                                                     #
    pkgmgrbinupdcron="$pkgmgrbin update -y"                                                                                       #
    pkgmgrbindel="$pkgmgrbin remove"                                                                                              #
    pkgmgrbinsea="$pkgmgrbin search"                                                                                              #
    pkgmgrbinupd="$pkgmgrbin update"                                                                                              #
    pkgmgrbincle="$pkgmgrbin clean"                                                                                               #
    pkgmgrbincac="$pkgmgrbin makecache"                                                                                           #
    pkmgrcheckupdates() { $pkgmgrbin check-update -q | grep -v Security | wc -l; }                                              #
    pkgmgrexport() { rpm -qa --qf '%{name}\n' | grep -v gpg-pubkey | sort -u; }                                                   #
  elif [ -f "$(command -v yum)" ]; then                                                                                           #
    dotfilesrepo="$REPODF/yum"                                                                                                    #
    pkgmgrbin="sudo /usr/bin/yum"                                                                                                 #
    pkgmgrbinins="$pkgmgrbin install"                                                                                             #
    pkgmgrbininssil="$pkgmgrbin install -y -q"                                                                                    #
    pkgmgrbinremsil="$pkgmgrbin remove -y -q"                                                                                     #
    pkgmgrbinupdsil="$pkgmgrbin install -y -q"                                                                                    #
    pkgmgrbinupdcron="$pkgmgrbin install -y"                                                                                      #
    pkgmgrbindel="$pkgmgrbin remove"                                                                                              #
    pkgmgrbinsea="$pkgmgrbin search"                                                                                              #
    pkgmgrbinupd="$pkgmgrbin update"                                                                                              #
    pkgmgrbincle="$pkgmgrbin clean"                                                                                               #
    pkgmgrbincac="$pkgmgrbin makecache"                                                                                           #
    pkmgrcheckupdates() { $pkgmgrbin check-update -q | grep -v Security | wc -l; }                                              #
    pkgmgrexport() { rpm -qa --qf '%{name}\n' | grep -v gpg-pubkey | sort -u; }                                                   #
  elif [ -f "$(command -v xbps-install)" ]; then                                                                                  #
    dotfilesrepo="$REPODF/xbps"                                                                                                   #
    pkgmgrbin="sudo /usr/bin/xbps-install"                                                                                        #
    pkgmgrbinins="$pkgmgrbin -S"                                                                                                  #
    pkgmgrbininssil="$pkgmgrbin -Sy"                                                                                              #
    pkgmgrbinremsil="sudo -H /usr/bin/xbps-remove -y"                                                                             #
    pkgmgrbinupdsil="$pkgmgrbin -Syu"                                                                                             #
    pkgmgrbinupdcron="$pkgmgrbin -Syu"                                                                                            #
    pkgmgrbindel="sudo -H /usr/bin/xbps-remove"                                                                                   #
    pkgmgrbinsea="sudo -H /usr/bin/xbps-query -Rs"                                                                                #
    pkgmgrbinupd="$pkgmgrbin -Syu "                                                                                               #
    pkgmgrbincle="sudo -H /usr/bin/xbps-remove -O"                                                                                #
    pkgmgrbincac="$pkgmgrbin -S"                                                                                                  #
    pkmgrcheckupdates() { echo 0; }                                                                                             #
    pkgmgrexport() { xbps-query -l; }                                                                                             #
  fi                                                                                                                              #
  ;;                                                                                                                              #
Darwin)                                                                                                                           #
  if [ -f "$(command -v brew)" ]; then                                                                                            #
    dotfilesrepo="$REPODF/brew"                                                                                                   #
    if [ "$1" = "--cask" ]; then                                                                                                  #
      pkgmgrbin="sudo -u $USER brew --cask"                                                                                       #
    else                                                                                                                          #
      pkgmgrbin="sudo -u $USER brew"                                                                                              #
    fi                                                                                                                            #
    pkgmgrbinins="$pkgmgrbin install"                                                                                             #
    pkgmgrbininssil="$pkgmgrbin install -f"                                                                                       #
    pkgmgrbinremsil="$pkgmgrbin remove -f"                                                                                        #
    pkgmgrbinupdsil="$pkgmgrbin upgrade -f"                                                                                       #
    pkgmgrbinupdcron="$pkgmgrbin upgrade -f"                                                                                      #
    pkgmgrbindel="$pkgmgrbin remove"                                                                                              #
    pkgmgrbinsea="$pkgmgrbin search"                                                                                              #
    pkgmgrbinupd="$pkgmgrbin upgrade"                                                                                             #
    pkgmgrbincle="$pkgmgrbin cleanup"                                                                                             #
    pkgmgrbincac="$pkgmgrbin update"                                                                                              #
    pkmgrcheckupdates() { echo 0; }                                                                                             #
    pkgmgrexport() { $pkgmgrbin list --cask && $pkgmgrbin list --formula | sort -u; }                                             #
  fi                                                                                                                              #
  ;;                                                                                                                              #
CYGWIN* | MINGW32* | MSYS* | MINGW*)                                                                                              #
  dotfilesrepo="$REPODF/win"                                                                                                      #
  pkgmgrbin="choco"                                                                                                               #
  pkgmgrbinins="choco install"                                                                                                    #
  pkgmgrbininssil="choco install -yf"                                                                                             #
  pkgmgrbinremsil="choco remove -f"                                                                                               #
  pkgmgrbinupdsil="choco update -yf"                                                                                              #
  pkgmgrbinupdcron="choco update -yf"                                                                                             #
  pkgmgrbindel="choco remove"                                                                                                     #
  pkgmgrbinsea="choco search"                                                                                                     #
  pkgmgrbinupd="choco update"                                                                                                     #
  pkgmgrbincle="choco cleanup"                                                                                                    #
  pkmgrcheckupdates() { echo 0; }                                                                                               #
  pkgmgrexport() { echo not enabled; }                                                                                            #
  ;;                                                                                                                              #
*)                                                                                                                                #
  printf_exit "Unknown OS or OS not supported"                                                                                    #
  ;;                                                                                                                              #
esac                                                                                                                              #
if [ -f "$(command -v yay)" ] && [ "$ENABLE_AUR" = "true" ]; then                                                                 #
  dotfilesrepo="$REPODF/pacman"                                                                                                   #
  pkgmgrbin="sudo -HE -u $USER /usr/bin/yay"                                                                                      #
  pkgmgrbinins="$pkgmgrbin -S --cleanafter --overwrite='*'"                                                                       #
  pkgmgrbininssil="$pkgmgrbin -Sy --needed --noconfirm --cleanafter --overwrite='*'"                                              #
  pkgmgrbinremsil="$pkgmgrbin -Ry --noconfirm --needed --noconfirm"                                                               #
  pkgmgrbinupdsil="$pkgmgrbin -Syyu --noconfirm"                                                                                  #
  pkgmgrbinupdcron="$pkgmgrbin -Syyu --noconfirm"                                                                                 #
  pkgmgrbindel="$pkgmgrbin -R"                                                                                                    #
  pkgmgrbinsea="$pkgmgrbin -Ss"                                                                                                   #
  pkgmgrbinupd="$pkgmgrbin -Syyu --needed --overwrite='*'"                                                                        #
  pkgmgrbincle="$pkgmgrbin -Scc --noconfirm"                                                                                      #
  pkgmgrbincac="$pkgmgrbin -Syy"                                                                                                  #
  pkmgrcheckupdates() { $pkgmgrbin -Qum 2>/dev/null | wc -l; }                                                                  #
  pkgmgrexport() { pacman -Qqet | grep -v "$(pacman -Qqm)" | sort -u; }                                                           #
fi                                                                                                                                #
pkginit="$pkgmgrbincle ; $pkgmgrbincac ; $pkgmgrbinupdsil"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
check)
  UPDATECHECKFILE="${CACHE_DIR:-$HOME/.cache}/updatechecheck"
  if [ "$1" = "force" ] || [ "$FORCE" = "yes" ]; then
    __rm_rf "$UPDATECHECKFILE" && run_updatechecheck
  fi
  if [ ! -f "$UPDATECHECKFILE" ] && ! __find_mtime "$UPDATECHECKFILE" "3600"; then
    run_updatechecheck >"$UPDATECHECKFILE" 2>/dev/null
  fi
  cat "$UPDATECHECKFILE"
  exit
  ;;

available)
  shift 1
  run_install_available "$APPNAME"
  ;;

aliases)
  shift 1
  if [ -d "$HOME/.config/bash/local" ] && __devnull grep userbashprofilelocal "$HOME/.bashrc"; then
    ALIASFILE="$HOME/.config/bash/local/pkmgr.bash"
  else
    ALIASFILE="$HOME/.bash_profile"
  fi
  [ "$1" = "help" ] && printf_help "Print to terminal or --save to export to bash_profile"
  if [ "$1" = "--save" ]; then
    printf_green "Saving the aliases to your bash profile"
    if grep -vq "# pkmgr aliases" "$ALIASFILE"; then
      echo "# pkmgr aliases - Do not remove this line" >>"$ALIASFILE"
      __aliases >>"$ALIASFILE"
      printf_custom "5" "$ALIASFILE"
    fi
  else
    __aliases | printf_readline "2"
    printf_custom "3" "add --save to save this to the alias file"
    printf_custom "5" "$ALIASFILE"
  fi
  ;;

cron)
  shift 1
  [ "$1" = "help" ] && printf_help "Options are add, remove, or run"
  __schedule "$@"
  ;;

ask)
  shift 1
  if [ -n "$DISPLAY" ]; then
    __attemp_install_menus "$@"
  else
    __check_app "$@" && printf_green "Installed: $*" || printf_exit 1 1 "Install of $* failed"
  fi
  echo
  ;;

install | -i)
  shift 1
  [ "$1" = "help" ] && printf_help "Install a package"
  am_i_online --error || exit 1
  $pkgmgrbinins "${@}" && exit 0 || exit 1
  set --
  ;;

remove | -r)
  shift 1
  [ "$1" = "help" ] && printf_help "Remove a package"
  $pkgmgrbindel "${@}" && exit 0 || exit 1
  set --
  ;;

list)
  shift 1
  [ "$1" = "help" ] && printf_help "Install package via a list: pkmgr list ./listToInstall"
  am_i_online --error || exit 1
  PCKLIST="$(grep -Ev '^$|^#' "$1" | sort -u | tr '\n' ' ' && echo)"
  declare -a LISTARRAY=$PCKLIST
  for pkg in ${LISTARRAY[*]}; do
    __execute "$pkgmgrbininssil $pkg" "Installing $pkg"
  done
  ;;

curl)
  shift 1
  [ "$1" = "help" ] && printf_help "pkmgr curl arch min or pkmgr curl fullURLtoList"
  am_i_online --error || exit 1
  curl_run "$@"
  set --
  PCKLIST="$(grep -Ev '^$|^#' "$PKMGR_TEMP_FILE" | sort -u | tr '\n' ' ' && echo)"
  declare -a LISTARRAY=$PCKLIST
  for pkg in ${LISTARRAY[*]}; do
    __execute "$pkgmgrbininssil $pkg" "Installing $pkg"
  done
  [ -n "$VDEBUG" ] || __rm_rf "$PKMGR_TEMP_FILE"
  ;;

dotfiles)
  shift 1
  [ "$1" = "help" ] && printf_help "pkmgr dotfiles git"
  am_i_online --error || exit 1
  dotfiles_run "$@"
  PCKLIST="$(grep -Ev '^$|^#' "$PKMGR_TEMP_FILE" | sort -u | tr '\n' ' ' && echo)"
  declare -a LISTARRAY=$PCKLIST
  for pkg in ${LISTARRAY[*]}; do
    __execute "$pkgmgrbininssil $pkg" "Installing $pkg"
  done
  [ -n "$VDEBUG" ] || __rm_rf "$PKMGR_TEMP_FILE"
  ;;

script)
  shift 1
  [ "$1" = "help" ] && printf_help "pkmgr script ./myScript or fullURLtoScript"
  am_i_online --error || exit 1
  script_run "$@"
  set --
  ;;

upgrade | update | -u)
  shift 1
  [ "$1" = "help" ] && printf_help "Update your system"
  am_i_online --error || exit 1
  if [ -f "$(command -v systemmgr)" ]; then
    sudo systemmgr install installer
  fi
  $pkgmgrbinupd
  ;;

export | -x)
  shift 1
  [ "$1" = "help" ] && printf_help "Export installed packages to a list"
  exportpkg
  ;;

clean | -c)
  shift 1
  [ "$1" = "help" ] && printf_help "Clean up package manager files"
  $pkgmgrbincle
  ;;

init | -in)
  shift 1
  [ "$1" = "help" ] && printf_help "Initialize the system by making the cache and updating"
  am_i_online --error || exit 1
  __execute "$pkginit" "Initializing System"
  ;;

makecache | -ca)
  shift 1
  [ "$1" = "help" ] && printf_help "Create the cache for the package manager"
  __devnull $pkgmgrbincac || exit 1
  ;;

search | -s)
  shift 1
  [ "$1" = "help" ] && printf_help "Search for a package"
  declare -a LISTARRAY="$*"
  for pkg in ${LISTARRAY[*]}; do
    $pkgmgrbinsea "$pkg" | grep -z "$pkg" | printf_readline || printf_error "$pkg not found"
  done
  ;;

required)
  shift 1
  [ "$1" = "help" ] && printf_help "Install required packages"
  am_i_online --error || exit 1
  declare -a LISTARRAY="$*"
  for pkg in ${LISTARRAY[*]}; do
    __execute "$pkgmgrbininssil $pkg" "Installing $pkg" || exit 1
  done
  ;;

silent-install)
  shift 1
  [ "$1" = "help" ] && printf_help "Silently install packages"
  am_i_online --error || exit 1
  declare -a LISTARRAY="$*"
  for pkg in ${LISTARRAY[*]}; do
    __devnull $pkgmgrbininssil "$pkg" && exit 0 || exit 1
  done
  ;;

silent-remove)
  shift 1
  [ "$1" = "help" ] && printf_help "Silently remove packages"
  declare -a LISTARRAY="$*"
  for pkg in ${LISTARRAY[*]}; do
    __devnull $pkgmgrbinremsil "*$pkg*" && exit 0 || exit 1
  done
  ;;

silent-upgrade | silent-update)
  shift 1
  [ "$1" = "help" ] && printf_help "Silently upgrade your system"
  am_i_online --error || exit 1
  if [ -f "$(command -v systemmgr)" ]; then
    __devnull sudo systemmgr install installer
  fi
  __devnull $pkgmgrbinupdsil && exit 0 || exit 1
  ;;

cpan | perl)
  shift 1
  case $1 in
  install)
    shift 1
    [ "$1" = "help" ] && printf_help "install perl modules via cpan"
    am_i_online --error || exit 1
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      cpan_run "$pkg"
    done
    ;;

  remove)
    shift 1
    [ "$1" = "help" ] && printf_help "Remove perl modules via cpan"
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      cpan_remove "$pkg"
    done
    ;;

  *)
    [ "$1" = "help" ] && printf_help "install perl modules via cpan"
    am_i_online --error || exit 1
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      cpan_run "$pkg"
    done
    ;;
  esac
  ;;

pip | python)
  shift 1
  case $1 in
  install)
    shift 1
    [ "$1" = "help" ] && printf_help "Install python modules via pip"
    am_i_online --error || exit 1
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      pip_run "$pkg"
    done
    ;;
  remove)
    shift 1
    [ "$1" = "help" ] && printf_help "Remove python modules via pip"
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      pip_remove "$pkg"
    done
    ;;
  *)
    [ "$1" = "help" ] && printf_help "Install python modules via pip"
    am_i_online --error || exit 1
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      pip_run "$pkg"
    done
    ;;
  esac
  ;;

gem | ruby)
  shift 1
  case $1 in
  install)
    shift 1
    [ "$1" = "help" ] && printf_help "Install ruby modules via rubygems"
    am_i_online --error || exit 1
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      gem_run "$pkg"
    done
    ;;

  remove)
    shift 1
    [ "$1" = "help" ] && printf_help "Remove ruby modules via rubygems"
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      gem_remove "$pkg"
    done
    ;;

  *)
    [ "$1" = "help" ] && printf_help "Install ruby modules via rubygems"
    am_i_online --error || exit 1
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      gem_run "$pkg"
    done
    ;;
  esac
  ;;

npm | node)
  shift 1
  case $1 in
  install)
    shift 1
    [ "$1" = "help" ] && printf_help "Install node package via npm"
    am_i_online --error || exit 1
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      npm_run "$pkg"
    done
    ;;

  remove)
    shift 1
    [ "$1" = "help" ] && printf_help "Remove node package via npm"
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      npm_remove "$pkg"
    done
    ;;

  *)
    [ "$1" = "help" ] && printf_help "Install node package via npm"
    am_i_online --error || exit 1
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      npm_run "$pkg"
    done
    ;;
  esac
  ;;

silent)
  shift 1
  case $1 in
  install)
    shift 1
    [ "$1" = "help" ] && printf_help "Silently install packages"
    am_i_online --error || exit 1
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      __devnull $pkgmgrbininssil "$pkg" && exit 0 || exit 1
    done
    ;;

  remove)
    shift 1
    [ "$1" = "help" ] && printf_help "Silently remove packages"
    declare -a LISTARRAY="$*"
    for pkg in ${LISTARRAY[*]}; do
      __devnull $pkgmgrbinremsil "*$pkg*" && exit 0 || exit 1
    done
    ;;

  upgrade | update)
    shift 1
    [ "$1" = "help" ] && printf_help "Silently upgrade your system"
    am_i_online --error || exit 1
    if [ -f "$(command -v systemmgr)" ]; then
      __devnull sudo systemmgr install installer
    fi
    __devnull $pkgmgrbinupdsil && exit 0 || exit 1
    ;;

  *)
    [ "$1" = "help" ] && printf_help "Silently install packages | defaults to a silent update"
    am_i_online --error || exit 1
    if [ -z "$1" ]; then
      __devnull $pkgmgrbinupdsil && exit 0 || exit 1
    else
      declare -a LISTARRAY="$*"
      for pkg in ${LISTARRAY[*]}; do
        __devnull $pkgmgrbininssil "$pkg" && exit 0 || exit 1
      done
    fi
    ;;
  esac
  ;;

info)
  shift 1
  [ "$1" = "help" ] && printf_help "Show info about your system"
  show_info
  ;;

version)
  shift 1
  run_install_version "$@"
  exit
  ;;

*)
  __help
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
