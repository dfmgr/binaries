#!/usr/bin/env bash

#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103200630-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : displayselect --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 06:30 EDT
# @File          : displayselect
# @Description   : A UI for detecting and selecting all displays
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
twoscreen() {
  mirror=$(printf "no\\nyes" | dmenu -i -p "Mirror displays?")
  # Mirror displays using native resolution of external display and a scaled
  # version for the internal display
  if [ "$mirror" = "yes" ]; then
    external=$(echo "$screens" | dmenu -i -p "Optimize resolution for:")
    internal=$(echo "$screens" | grep -v "$external")
    res_external=$(xrandr --query | sed -n "/^$external/,/\+/p" | tail -n 1 | awk '{print $1}')
    res_internal=$(xrandr --query | sed -n "/^$internal/,/\+/p" | tail -n 1 | awk '{print $1}')
    res_ext_x=$(echo $res_external | sed 's/x.*//')
    res_ext_y=$(echo $res_external | sed 's/.*x//')
    res_int_x=$(echo $res_internal | sed 's/x.*//')
    res_int_y=$(echo $res_internal | sed 's/.*x//')
    scale_x=$(echo "$res_ext_x / $res_int_x" | bc -l)
    scale_y=$(echo "$res_ext_y / $res_int_y" | bc -l)
    xrandr --output "$external" --auto --scale 1.0x1.0 --output "$internal" --auto --same-as "$external" --scale "$scale_x"x"$scale_y"
  else
    primary=$(echo "$screens" | dmenu -i -p "Select primary display:")
    secondary=$(echo "$screens" | grep -v "$primary")
    direction=$(printf "left\\nright" | dmenu -i -p "What side of $primary should $secondary be on?")
    xrandr --output "$primary" --auto --scale 1.0x1.0 --output "$secondary" --"$direction"-of "$primary" --auto --scale 1.0x1.0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
morescreen() { # If multi-monitor is selected and there are more than two screens.
  primary=$(echo "$screens" | dmenu -i -p "Select primary display:")
  secondary=$(echo "$screens" | grep -v "$primary" | dmenu -i -p "Select secondary display:")
  direction=$(printf "left\\nright" | dmenu -i -p "What side of $primary should $secondary be on?")
  tertiary=$(echo "$screens" | grep -v "$primary" | grep -v "$secondary" | dmenu -i -p "Select third display:")
  xrandr --output "$primary" --auto --output "$secondary" --"$direction"-of "$primary" --auto --output "$tertiary" --"$(printf "left\\nright" | grep -v "$direction")"-of "$primary" --auto
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
multimon() { # Multi-monitor handler.
  case "$(echo "$screens" | wc -l)" in
  1) xrandr $(echo "$allposs" | grep -v "$screens" | awk '{print "--output", $1, "--off"}' | tr '\n' ' ') ;;
  2) twoscreen ;;
  *) morescreen ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get all possible displays
allposs=$(xrandr -q | grep "connected")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get all connected screens.
screens=$(echo "$allposs" | grep " connected" | awk '{print $1}')
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get user choice including multi-monitor and manual selection:
chosen=$(printf "%s\\nmulti-monitor\\nmanual selection" "$screens" | dmenu -i -p "Select display arangement:") &&
  case "$chosen" in
  "manual selection")
    arandr
    exit
    ;;
  "multi-monitor") multimon ;;
  *) xrandr --output "$chosen" --auto --scale 1.0x1.0 $(echo "$allposs" | grep -v "$chosen" | awk '{print "--output", $1, "--off"}' | tr '\n' ' ') ;;
  esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#setbg
#remaps
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
