#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103201718-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : mpd-notify --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 17:18 EDT
# @File          : mpd-notify
# @Description   : mpd notfication script
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ ! -t 0 ] && { [ "$1" = "--term" ] || [ $# = 0 ]; }; then
  myterminal -e "$APPNAME $*"
  exit
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cmd_exists --ask mpd mpc
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -d "$HOME/.config/mpd/mpd-notify" ] || printf_exit "1" "1" "Please install my mpd dotfiles | dfmgr install mpd"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
daemonName="mpd-notify"
daemonDir="$HOME/.config/mpd/mpd-notify"
CONFIG="$daemonDir/mpd-notify.cfg"
MPDSERVER="${MPDSERVER:-localhost}"
MPDSERVER_PORT=${MPDSERVER_PORT:-6600}
NOTIFYSONG=true
STATUSNOTIF=true
pidFile="$daemonDir/$daemonName.pid"
logFile="$daemonDir/$daemonName.log"
runInterval=1
logMaxSize="100"
myPid="$(echo $$)"
curPid="$(ps -ux | grep -v "$myPid" | grep 'mpd-notify run' | grep -v ' grep ' | awk '{print $2}' | head -n 1)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$daemonDir/mpd-notify.cfg" ] && . "$daemonDir/mpd-notify.cfg"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$pidFile" ] && [ -z "$curPid" ]; then
  oldPid="$(<"$pidFile")"
elif [ -n "$curPid" ]; then
  oldPid="$curPid"
else
  oldPid=""
fi
#printf_debug "Old:$oldPid" "Cur:$curPid" "Pid:$myPid"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
log() { echo "$*" >>"$logFile"; }
__mpc() { mpc -h "$MPDSERVER" -p "$MPDSERVER_PORT" "$@"; }
__mpc_status() { __mpc status && return 0 || return 1; }
__getpid() {
  curPid="$(ps -ux | grep -v "$myPid" | grep 'mpd-notify run' | grep -v ' grep ' | awk '{print $2}' | head -n 1)"
  if [ -n "$curPid" ]; then
    echo 0
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
getFile() {
  file="$(__mpc -f %file% | head -n 1)"
  albumPath="$(echo "$file" | sed 's/$(basename "$file")//')"
  __mpc -f %file% | head -n 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
getArtAlb() {
  __mpc -f "%artist% - %album%" | head -n 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
scrapeDiscogs() {
  artAlb=$(getArtAlb 2>/dev/null)
  getArt="$(python3 "$daemonDir""/cogsCover.py" "$artAlb" "$DISCOGSKEY" "$DISCOGSSECRET" 2>/dev/null)"
  if [ -n "$getArt" ]; then
    log "$getArt"
    __cp_rf ${TMP:-/tmp}/image.jpg "$coverPath" >/dev/null 2>&1
    __rm_rf ${TMP:-/tmp}/image.jpg >/dev/null 2>&1
  fi
}

notifyStatus() {
  if $STATUSNOTIF; then
    if [[ $curStatus != "$newStatus" ]]; then
      if [[ $newStatus -eq 0 ]]; then
        notifications "MPD" "Paused"
      else
        notifications "MPD" "Playing: $newTitleArtist"
      fi
    fi
  fi
}

findCover() {
  coverPath=
  maxFile=
  maxRes=
  for file in "$MUSFOLDER$albumPath"*; do
    if [[ "$file" == *".jpg" ]] || [[ "$file" == *".jpeg" ]] || [[ "$file" == *".png" ]]; then
      curRes=$(identify -format "%W" "$file")
      if [[ -z $maxFile ]]; then
        maxFile="$file"
        maxRes="$curRes"
      elif [[ $curRes -gt $maxRes ]]; then
        maxFile="$file"
        maxRes="$curRes"
      fi
    fi
  done

  coverPath="$maxFile"
  if [[ "$coverPath" == *".png" ]]; then
    newPath="$(echo $coverPath | sed 's/png/jpg/g')"
    convert "$coverPath" "$newPath"
    coverPath=$newPath
  fi

  if [[ -z "$coverPath" ]]; then
    coverPath=$MUSFOLDER$albumPath"cover.jpg"
    if $AUTOSCRAPE; then
      scrapeDiscogs
    fi
  fi
}

setWallpaper() {
  curRes=$(xdpyinfo | grep dimensions | grep -E -o "   .+x" | sed -r 's/x.+?$//' | sed -r 's/^.+[^0-9]//g')
  dimensions=$(xdpyinfo | grep dimensions | awk '{print $2}')
  if $WALLPAPER; then
    if [[ $maxRes -ge $curRes ]]; then
      feh --bg-scale "$coverPath" >/dev/null 2>&1
    else
      if $CENTERED; then
        if $COMMON; then
          commonColor="$(convert "$coverPath" -colors 2 -depth 8 -unique-colors -format "%c" histogram:info: | grep -Eo "#.{6}" | tail -n 1)"
          convert "$coverPath" -gravity center -background "$commonColor" -extent $dimensions "${TMP:-/tmp}/cover.jpg"
          feh --bg-center "${TMP:-/tmp}/cover.jpg" >/dev/null 2>&1
        else
          convert "$coverPath" -gravity center -background "#$MATCOLOR" -extent $dimensions "${TMP:-/tmp}/cover.jpg"
          feh --bg-center "${TMP:-/tmp}/cover.jpg" >/dev/null 2>&1
        fi
      else
        feh --bg-tile "$coverPath" >/dev/null 2>&1
      fi
    fi
  fi
}

notifySong() {
  # Compare old and new songs.
  if [[ $currTitleArtist != "$newTitleArtist" ]]; then
    findCover
    if [[ -e $coverPath ]]; then # If there's a cover...
      setWallpaper
    fi
    if $NOTIFYSONG; then
      notifications "MPD" "$newTitleArtist"
    fi
    log "*** $(date +"%Y-%m-%d %H:%M") - Now playing: $newTitleArtist from $MPDSERVER:$MPDSERVER_PORT"
  fi
}

notifyVolume() {
  if [[ $curVol != "$newVol" ]]; then
    notifications "MPD" "$newVol"
  fi
}
#############
setupDaemon() {
  if [ ! -f "$logFile" ]; then
    touch "$logFile"
  else
    # Check to see if we need to rotate the logs.
    size=$(($(ls -l "$logFile" | cut -d " " -f 5) / 1024))
    if [[ "$size" -gt "$logMaxSize" ]]; then
      __rm_rf "$logFile"
      touch "$logFile"
    fi
  fi
  __devnull __mpc_status
  if [[ $? -ne 0 ]]; then
    printf_info "MPD not running. Attempting to start..."
    [ -n "$MPDSERVER" ] && true || __start mpd
    if [[ $? -ne 0 ]]; then
      printf_exit "Unable to start MPD. Please do it yourself then start mpd-notify."
    else
      printf_green "Everything is good!"
    fi
  fi
  if [ -z "$MPDSERVER" ]; then __running mpd || printf_exit "1" "1" "Failed to start mpd"; fi
  sleep 3
}

startDaemon() {
  if [ "$(ps -ux | grep 'mpd-notify run' | grep -v ' grep ' | wc -l)" -gt 2 ]; then
    printf_exit "2" "1" "ERROR: $daemonName is already running."
  else
    printf_green " *Starting $daemonName."
    setupDaemon
    echo "$myPid" >"$pidFile"
    log '*** '"$(date +"%Y-%m-%d %H:%M")"": Starting up $daemonName."
    log '*** '"connected to $MPDSERVER"
    notifications "MPD" "Connected to $MPDSERVER\n$(__mpc status)"
    loop
  fi
}

stopDaemon() {
  if checkDaemon; then
    echo "Stopping $daemonName"
    log '*** '"$(date +"%Y-%m-%d %H:%M")"": $daemonName stopped."
    for pid in $oldPid $(ps -ux | grep 'mpd-notify run' | grep -v ' grep ' | awk '{print $2}'); do
      kill -s 15 "$pid" &>/dev/null
    done
    __rm_rf "$pidFile"
    notifications "MPD" "Stopping notifications"
  else
    printf_exit "1" "1" "ERROR: $daemonName is not running."
  fi
}

statusDaemon() {
  if checkDaemon; then
    notifications "MPD" "Connected to $MPDSERVER\n$(__mpc status)"
    export MPD_NOTIFY_STATUS="running"
    printf_return "2" "0" "$daemonName is running: $curPid."
  else
    export MPD_NOTIFY_STATUS="stopped"
    printf_return "1" "1" "$daemonName is not running."
  fi
}

restartDaemon() {
  if checkDaemon; then
    stopDaemon
    startDaemon &
    disown
  else
    printf_red "$daemonName isn't running."
    startDaemon
  fi
}

checkDaemon() {
  if [[ "$(__getpid)" = 0 ]]; then
    return 0
  else
    return 1
  fi
  return $?
}

loop() {
  # Just get the song title and artist.
  currentSong=$(__devnull2 __mpc)
  currTitleArtist="$(__devnull2 __mpc | head -n 1)"
  # Via mpc call and awk, get the status of mpd. For some reason, comparing the two as strings would not work. Converting their status to integers and comparing those, does.
  if [[ $(echo "$currentSong" | awk '/\[(paused|playing)\]/ {print $1}') == "[playing]" ]]; then
    curStatus=1
  elif [[ $(echo "$currentSong" | awk '/\[(paused|playing)\]/ {print $1}') == "[paused]" ]]; then
    curStatus=0
  fi
  curVol=$(echo "$currentSong" | grep -o -E "volume.+?%")
  # zzz
  sleep 1
  newSong=$(__devnull2 __mpc)
  newTitleArtist="$(__devnull2 __mpc | head -n 1)"
  if [[ $(echo "$newSong" | awk '/\[(paused|playing)\]/ {print $1}') == "[playing]" ]]; then
    newStatus=1
  elif [[ $(echo "$newSong" | awk '/\[(paused|playing)\]/ {print $1}') == "[paused]" ]]; then
    newStatus=0
  fi
  newVol=$(echo "$newSong" | grep -o -E "volume.+?%")
  # Get the path of the currently playing song as well as the cover.
  albumPath=$(getFile | sed -r 's/\/[^/]*$//')"/"
  albumPath="$(__devnull2 __mpc -f %file% | head -n 1)"
  notifyStatus
  notifySong
  notifyVolume
  loop
}
__toggle() {
  checkDaemon && status="running" || status="stopped"
  [ "$status" = "stopped" ] && action=start || action=stop
  if [ "$1" = "--ask" ]; then
    [ "$status" = "stopped" ] && echo off || echo on
    exit
  fi
  if [ -n "$1" ]; then [ "$status" = "stopped" ] && $APPNAME run || stopDaemon; fi
}
__term() {
  shift $#
  while :; do
    # show menu
    checkDaemon
    __toggle
    clear
    shift 1
    printf_newline "\n\n\n\n"
    printf_head "mpd-notify Menu"
    printf_yellow "Current status: $status"
    printf_green "a. Start"
    printf_green "b. Stop"
    printf_green "c. Restart"
    printf_green "d. Status"
    printf_green "e. Toggle $action"
    printf_green "z. or escape to Exit"
    printf_green "---------------------------------"
    printf_read_question_nt "6" "Enter your choice [a-z] : " "1" "main" "-s"
    printf_newline

    # take action
    case "$main" in
    a) $APPNAME run &>/dev/null ;;
    b) stopDaemon &>/dev/null ;;
    c) restartDaemon &>/dev/null ;;
    d)
      statusDaemon
      printf_pause
      ;;
    e) toggle run ;;
    '\E' | $'\e' | z) clear && break ;;
    *) shift ;;
    esac
    clear
    printf_newline "\n\n"
    printf_counter "2" "3" "Re-loading menu in"
  done
  clear
}

##################
#    ArgParse    #
##################
case "$1" in
start)
  shift 1
  exec $APPNAME run
  ;;
run)
  shift 1
  startDaemon &
  #disown
  ;;
stop)
  shift 1
  stopDaemon
  ;;
status)
  shift 1
  if [ "$1" = "--ask" ]; then
    shift $# && checkDaemon && echo "running" || echo "stopped"
    exit
  fi
  statusDaemon
  ;;
restart)
  shift 1
  restartDaemon
  ;;
toggle)
  shift 1
  __toggle "${1:-run}"
  ;;
--term | term)
  shift 1
  __term
  ;;
*)
  checkDaemon && status="running" || status="stopped"
  printf_yellow "Current status: $status"
  printf_pause "Error: usage $APPNAME { start | stop | restart | status | term }"
  ;;
esac
exit 0
# end
