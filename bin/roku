#!/usr/bin/env bash

APPNAME="$(basename $0)"
SCRIPTDIR="$(dirname "${BASH_SOURCE[0]}")"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 022420211808-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : roku
# @Created     : Mon, Dec 31, 2019, 00:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : home automation - roku script
# @Help        : https://github.com/tispratik/docs-1/blob/master/develop/guides/remote-api-ecp.md
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# functions
urlcheck() { __urlcheck "$1"; }
hostname2ip() { __hostname2ip "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
main() {
  # variables
  unset roku_device roku_command roku_option
  local setopts="$1"
  local state="${TMPDIR:-/tmp}/automate_roku"
  local roku_device="$(hostname2ip ${ROKU_DEVICE:-$3})"
  local roku_device_name="${ROKU_DEVICE:-$3}"
  local roku_command="$1"
  local roku_option="$2"
  local api_url="http://$roku_device:8060"
  touch "$state"

  [ -z "$roku_device" ] && printf_exit "Please enter the hostname of your roku"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # functions
  __curlcmd() { curl --disable -LSsfk --connect-timeout 3 --retry 0 --fail "$@"; }
  __curlapi() { __curlcmd -d '' "$@"; }
  __status_ok() { printf_green "Telling $roku_device_name to $1"; }
  __status_failed() { printf_error "Failed to send $1 to $roku_device_name"; }
  getstate() { cat "$state"; }
  roku_play() {
    __devnull __curlapi "$api_url/keypress/play" && echo play >"$state" &&
      __status_ok "play" || __status_failed "play"
  }
  roku_stop() {
    __devnull __curlapi "$api_url/keypress/stop" && echo stop >"$state" &&
      __status_ok "stop" || __status_failed "stop"
  }
  roku_pause() {
    __devnull __curlapi "$api_url/keypress/play" && echo pause >"$state" &&
      __status_ok "pause" || __status_failed "pause"
  }
  roku_toggle() {
    if [ "$(getstate)" = "stop" ]; then
      roku_play
    elif [ "$(getstate)" = "play" ]; then
      roku_stop
    elif [ "$(getstate)" = "pause" ] || [ "$(getstate)" = "toggle" ]; then
      roku_pause
    else
      printf_exit "Can not get state"
    fi
  }

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # main
  if [ ! -s "$state" ]; then echo toggle >"$state"; fi

  case "$setopts" in
  play)
    shift 1
    roku_play
    ;;

  stop)
    shift 1
    roku_stop
    ;;

  pause)
    shift 1
    roku_pause
    ;;

  toggle)
    shift 1
    toggle
    echo toggle >"$state"
    ;;

  state)
    case "$2" in
    text) echo -e "$(getstate)" ;;
    json | *) echo -e '{"status":"'$(getstate)'"}' ;;
    esac
    ;;

  cmd | command)
    shift 1
    [ -z "$roku_command" ] && printf_exit "Please enter the the command you want to send to your roku"
    [ -z "$roku_option" ] && printf_exit "Please enter the the command you want to send to your roku"
    __devnull __curlapi "$api_url/$roku_command/$roku_option" && echo "$roku_option" >"$state" &&
      __status_ok "$*" || __status_failed "$*"
    ;;

  *)
    roku_toggle
    ;;

  esac

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#execute
main "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
