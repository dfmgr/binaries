#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 011320210115-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : backupapp
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : backup files and folders
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Set functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_installdirs "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ $# -lt 2 ]; then printf_red "Not enough arguments given!" && __help; fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check for needed applications

__require_app tar

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application

backupapp() {

  local filename count backupdir rmpre4vbackup myappdirtmp
  [ ! -z "$2" ] && local myappdir="$*" || local myappdir="$APPDIR"
  [ ! -z "$1" ] && local myappname="$1" && shift || local myappname="$APPNAME"
  local logdir="$HOME/.local/log/backups"
  local curdate="$(date +%Y-%m-%d-%H-%M-%S)"
  local filename="$myappname-$curdate.tar.gz"
  local backupdir="${MY_BACKUP_DIR:-$HOME/.local/backups/apps}"
  mkdir -p "$backupdir" "$logdir"

  _run_header() {
    printf_green "Starting backup"
    echo -e "##################################################################" >>"$logdir/$myappname.log"
    echo -e "# Started on $(date +'%A, %B %d, %Y %H:%M:%S')" >>"$logdir/$myappname.log"
    echo -e "# Backing up $myappdir" >>"$logdir/$myappname.log"
    echo -e "##################################################################\n" >>"$logdir/$myappname.log"
  }

  _run_footer() {
    echo -e "\n##################################################################" >>"$logdir/$myappname.log"
    echo -e "#Ended on $(date +'%A, %B %d, %Y %H:%M:%S')" >>"$logdir/$myappname.log"
    echo -e "##################################################################\n\n" >>"$logdir/$myappname.log"
    if [ "$exitCode" = 0 ]; then
      printf_green "The backup has completed successfully."
      printf_green "Saved to: $backupdir/$filename"
    else
      printf_red "The backup has failed to complete."
      printf_red "More information can be found in the log file:"
      printf_exit "$logdir/$myappname.log"
    fi
  }

  _run_backup() {
    tar cfzv "$backupdir/$filename" $backupfiles >>"$logdir/$myappname.log" 2>&1 || return 1
    exitCode=$?
  }

  _cleanup() {
    local leaveCount=5
    local fileCount=$(ls $backupdir/$myappname*.tar.gz 2>/dev/null | wc -l 2>/dev/null)
    local removeoldbackups=$(ls $backupdir/$myappname*.tar.gz 2>/dev/null)

    tailCount=$((fileCount - leaveCount))
    ls -t $removeoldbackups | tail -$tailCount 2>/dev/null | xargs rm -f
  }

  check_file_dir() {
    if [ -L "$1" ] || [ -f "$1" ] || [ -d "$1" ]; then
      return 0
    else
      return 1
    fi
  }

  for d in $myappdir; do
    check_file_dir "$d" && backupfiles+="$d " || backupfiles+=""
  done

  if [ -n "$backupfiles" ]; then
    _run_header
    _run_backup
    _run_footer
    _cleanup
  else
    printf_red "Nothing to back up"
    printf_green "$backupfiles"
    return 1
  fi

}

backupapp "$@"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
