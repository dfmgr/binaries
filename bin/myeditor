#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103201723-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : myeditor --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 17:23 EDT
# @File          : myeditor
# @Description   : Open up text editor
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MYTERMINAL_NOTIFICATIONS="no"
MYEDITOR_NOTIFICATIONS="${MYEDITOR_NOTIFICATIONS:-yes}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$HOME/.config/myeditor/settings" ] && . "$HOME/.config/myeditor/settings"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__config() {
  printf_green "Generating config file"
  __mkd "$HOME/.config/myeditor"
  echo -e '# Settings for myeditor
MYEDITOR="config"
EDITOR="'$EDITOR'"
MYEDITOR_NOTIFICATIONS="'$MYEDITOR_NOTIFICATIONS'"
  ' >"$HOME/.config/myeditor/settings"
  if [ -f "$HOME/.config/myeditor/settings" ]; then
    printf_green "File saved to: $HOME/.config/myeditor/settings"
    [ -n "$MYEDITOR_NOTIFICATIONS" ] && notifications "MyEditor" "Config file saved to:\n$HOME/.config/myeditor/settings"
  fi
  exit
}

__create_link() {
  case "$1" in
  *)
    if [ ! -z "$2" ]; then
      shift 1
      if cmd_exists "$1"; then
        printf_green "Linking $HOME/.local/bin/myeditor to $1"
        __ln_sf "$(command -v $1)" "$HOME/.local/bin/myeditor"
        exit 0
      else
        printf_green "Linking $HOME/.local/bin/myeditor to $EDITOR"
        __ln_sf "$EDITOR" "$HOME/.local/bin/myeditor"
        exit 0
      fi
    fi
    ;;
  esac
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ "$EDITOR" = "myeditor" ] && unset EDITOR
if [ "$MYEDITOR" != "config" ]; then
  if [ -f "$(command -v code 2>/dev/null)" ]; then
    export EDITOR="code"
  elif [ -f "$(command -v vscode 2>/dev/null)" ]; then
    export EDITOR="vscode"
  elif [ -f "$(command -v geany 2>/dev/null)" ]; then
    export EDITOR="geany"
  elif [ -f "$(command -v gedit 2>/dev/null)" ]; then
    export EDITOR="gedit"
  elif [ -f "$(command -v atom 2>/dev/null)" ]; then
    export EDITOR="atom"
  elif [ -f "$(command -v brackets 2>/dev/null)" ]; then
    export EDITOR="brackets"
  elif [ -f "$(command -v emacs 2>/dev/null)" ]; then
    export EDITOR="emacs"
  elif [ -f "$(command -v mousepad 2>/dev/null)" ]; then
    export EDITOR="mousepad"
  fi
  if [ -z "$DISPLAY" ]; then
    if [ -f "$(command -v vim 2>/dev/null)" ]; then
      export EDITOR="vim"
    elif [ -f "$(command -v nvim 2>/dev/null)" ]; then
      export EDITOR="nvim"
    elif [ -f "$(command -v emacs 2>/dev/null)" ]; then
      export EDITOR="emacs"
    elif [ -f "$(command -v nano 2>/dev/null)" ]; then
      export EDITOR="nano"
    fi
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -z "$EDITOR" ]; then
  [ "$MYEDITOR_NOTIFICATIONS" = "yes" ] && notifications "MyEditor" "No editors are installed"
  printf_exit 1 1 "No editors are installed"
fi
EDITOR_NAME="$(basename "$EDITOR" 2>/dev/null)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case $EDITOR in
nano | vim | emacs)
  EDITOR="myterminal -e $EDITOR"
  ;;
code | vscode)
  EDITOR="$EDITOR -w"
  ;;
esac

case $1 in
config | *-config)
  shift 1
  [ -e "$1" ] || __config
  ;;

create | link | *-create | *-link)
  shift 1
  __create_link "$@"
  ;;

*)
  [ "$MYEDITOR_NOTIFICATIONS" = "yes" ] && notifications "MyEditor" "Attempting to launch $EDITOR_NAME"
  if [ -f "$HOME/.local/bin/myeditor" ]; then
    __exec ~/.local/bin/myeditor "$@"
  else
    __exec $EDITOR "$@"
  fi
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
