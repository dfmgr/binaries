#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103201714-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : mpdclient --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 17:14 EDT
# @File          : mpdclient
# @Description   : A script to control a remote or local MPD daemon
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__check_app mpc
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SYSHOSTNAME="$(hostname -s)"
SYSMPDSERVER="$MPDSERVER"
MPDSTATUS="start"
TEMPDIR="${TMP:-/tmp}/mpdclient/$USER"
notify-daemon ask && NOTIFY="on" || NOTIFY="off"
if mpc -h "$SYSHOSTNAME" 2>/dev/null | grep -iq playing; then
  MPDSERVER="$SYSHOSTNAME"
else
  MPDSERVER="${MPDSERVER:-localhost}"
fi
export ORIG_MPDSERVER="$MPDSERVER"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [[ "$1" = *term ]]; then
  exec myterminal -e mpdclient &
  exit
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__devnull() {
  "$@" &>/dev/null &&
    printf_green "${cmd:-Command} sent successfully" ||
    printf_red "Failed to send ${cmd:-command}"
}
__devnull2() {
  "$@" 2>/dev/null &&
    printf_green "${cmd:-Command} sent successfully" ||
    printf_red "Failed to send ${cmd:-command}"
}
__server_failed() { printf_red "$ICON_ERROR Failed to connect to the server @ $MPDSERVER" && sleep 3 && return 1; }
__mpc() { mpc -h "$MPDSERVER" "$@" 2>/dev/null || return 1; }
is_up() { __mpc &>/dev/null && return 0 || __server_failed; }
is_up_mpd() { __get_status_pid "mpd" && return 0 || return 1; }
get_prev() { cat "$TEMPDIR/mpdclient_prev" 2>/dev/null; }
get_next() { cat "$TEMPDIR/mpdclient_next" 2>/dev/null; }
get_curr() { cat "$TEMPDIR/mpdclient_curr" 2>/dev/null; }
next() { echo -en "Next: $(get_next || echo Nothing is in the queue)\n"; }
playtime() { echo -en "Time: $(__mpc status | grep -Fi '[' | cut -d' ' -f5,6 | grep '^' || printf 'N/A')\n"; }
volume() { echo -en "Volume: $(__mpc status | grep -i volume | tr ':' ' ' | awk '{print $2}')\n"; }
stats() { echo -e "$(volume)  |  $(playtime)"; }
db_play() { echo -e "Total: $(__mpc stats | tail -n1 | sed 's#DB Play Time: ##g')"; }
db_songs() { echo -e "Songs: $(__mpc stats | grep Songs | awk '{print $2}')"; }
db_uptime() { echo -e "Uptime: $(__mpc stats | grep Uptime | sed 's#Uptime:       ###g')"; }

mpc_status() {
  status() {
    echo "MPD @ $MPDSERVER: $(db_uptime)"
    echo -e "$(db_songs)  |  $(db_play)"
    echo -e "$(stats)"
    if __mpc status | grep -iq playing >/dev/null 2>&1; then
      echo -n "Playing: "
    elif __mpc status | grep -iq stopped >/dev/null 2>&1; then
      echo -n "Stopped: "
    elif __mpc status | grep -iq paused >/dev/null 2>&1; then
      echo -n "Paused: "
    else
      echo -n ""
    fi
  }

  updating_db() { __mpc status | grep -qi updating && echo -e "Database is being updated"; }
  display() {
    status
    if __mpc status | head -n 1 | grep -iqv volume; then
      echo -en "$(__mpc status | head -n 1 | grep -Ev '[*]|volume')\n"
    else
      echo -e "MPD Server is stopped"
    fi
  }
  notify && display && next && updating_db && return 0 || return 1
}

notify() {
  # Order here matters
  currSong="$(get_curr && __mpc current | grep '^' >"$TEMPDIR/mpdclient_curr")"
  nextSong="$(get_next && __mpc queued | grep '^' >"$TEMPDIR/mpdclient_next")"
  if [ "$(get_curr)" != "$(get_prev)" ] && [ "$NOTIFY" = "on" ]; then
    __cmd_exists notifications && notifications "MPD Client" "Now playing $(get_curr)"
  fi
  prevSong="$(get_curr >"$TEMPDIR/mpdclient_prev" 2>/dev/null)"
}

notify_toggle() {
  if [ "$NOTIFY" = "on" ]; then
    export NOTIFY="off"
    export NOTIFYS="on"
    __cmd_exists notifications && notifications "MPD Client" "Notications have been disabled"
  elif [ "$NOTIFY" = "off" ]; then
    export NOTIFY="on"
    export NOTIFYS="off"
    __cmd_exists notifications && notifications "MPD Client" "Notications have been enabled"
  fi
  #printf_blue "prevSong:$prevSong\n\t\tcurrSong:$currSong\n\t\tnotification:$NOTIFY"
  printf_green "Notifications has been set to $NOTIFY"
  return
}

volume_toggle() {
  if __mpc volume | grep volume: | grep -Fq ' 0%'; then
    if [ -f "$TEMPDIR/volume" ]; then
      restore="$(cat "$TEMPDIR/volume" | sed 's#%##g')"
      __mpc volume "$restore"
    else
      __mpc volume 100
    fi
    export volume=mute
  else
    volume | awk '{print $2}' | sed 's#%##g' >"$TEMPDIR/volume"
    __mpc volume 0
    export volume=unmute
  fi
  return 0
}

client() {
  clear
  if [ -n "$MPDSERVER" ]; then
    if ping -c 1 "$MPDSERVER" &>/dev/null; then
      GETMPDSERVER="$MPDSERVER"
    elif __hostname2ip "$MPDSERVER" &>/dev/null; then
      GETMPDSERVER="$(__hostname2ip "$MPDSERVER")"
    fi
    CONNECT_TO="$GETMPDSERVER"
  else
    CONNECT_TO="localhost"
  fi
  if __cmd_exists ncmpcpp; then
    ncmpcpp -q -h $CONNECT_TO
  else
    clear
    printf_newline "\n\n\n\n"
    printf_counter "1" "5" "ncmpcpp is not installed"
    return 1
  fi
}

__repeat_toggle() {
  if __mpc status | grep -q 'repeat:.on'; then
    REPEAT=true
    REPEATS=off
  else
    REPEAT=false
    REPEATS=on
  fi
}

__mpd_status() {
  #if __local_sysname "$MPDSERVER"; then
  if is_up_mpd; then
    MPDSTATUS=stop
    printf_blue "local mpd server is running with pid: $(__get_pid_of mpd)"
  else
    MPDSTATUS=start
    #printf_red "local mpd server is stopped"
  fi
  #fi
  export MPDSTATUS
}

__mpd_toggle() {
  if __cmd_exists mpd; then
    local pid="$(__get_pid_of mpd)"
    if [ -n "$pid" ]; then
      kill -n 9 "$pid" &>/dev/null
      if is_up_mpd; then
        MPDSTATUS="stop"
      else
        MPDSTATUS="start"
        printf_green "mpd is stopped"
      fi
    else
      if is_up_mpd; then
        printf_green "mpd is running"
        MPDSTATUS=stop
      else
        mpd &>/dev/null &
        is_up_mpd && MPDSTATUS=stop || MPDSTATUS=start
        is_up_mpd && printf_green "mpd is running" || printf_error "Failed to start mpd"
      fi
    fi
    [ -n "$SYSMPDSERVER" ] && MPDSERVER="$SYSMPDSERVER" || printf_exit 1 1 "Can not connect to $MPDSERVER"
  else
    printf_error "mpd is not installed"
    return 1
  fi
}

__play_toggle() {
  if __mpc status | grep -iq playing >/dev/null 2>&1; then
    PLAYT=pause
  else
    PLAYT=play
  fi
}

__consume_toggle() {
  if __mpc status | grep -q 'consume:.on'; then
    TOGGLEC=off
  else
    TOGGLEC=on
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__mkd "$TEMPDIR"
[ -f "$TEMPDIR/mpdclient_prev" ] || echo "" >"$TEMPDIR/mpdclient_prev"
[ -f "$TEMPDIR/mpdclient_curr" ] || echo "" >"$TEMPDIR/mpdclient_curr"
[ -f "$TEMPDIR/mpdclient_next" ] || echo "" >"$TEMPDIR/mpdclient_next"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
while :; do
  clear
  shift 1
  printf_newline "\n\n\n"
  is_up || break
  __repeat_toggle
  __play_toggle
  __consume_toggle
  __mpd_status
  mpc_status | printf_readline "6"
  printf_newline
  printf_green "1. turn notifications ${NOTIFYS:-off}"
  printf_green "2. change mpd server"
  printf_green "3. ${MPDSTATUS} mpd server"
  printf_green "0. get MPD status"
  printf_green "/. ${volume:-mute} volume"
  printf_green "+. volume up +5"
  printf_green "-. volume down -5"
  printf_green "]. volume up +1"
  printf_green "[. volume down -1"
  printf_green "a. toggle: ${PLAYT:-play}"
  printf_green "b. turn consume ${TOGGLEC:-on}"
  printf_green "l. turn repeat ${REPEATS:-off}"
  printf_green "n. play next song"
  printf_green "p. play prev song"
  printf_green "r. play"
  printf_green "s. stop"
  printf_green "u. update database"
  printf_green "x. launch ncmpcpp"
  printf_green "y. send custom command to mpd"
  printf_green "z. quit"
  printf_newline
  printf_read_question "6" "Enter your choice  : " "1" "main" "-s"
  clear && printf_newline "\n\n\n"
  case "$main" in
  1)
    shift 1
    notify_toggle
    ;;
  2)
    OLDMPDSERVER="$MPDSERVER"
    printf_yellow "reset for $ORIG_MPDSERVER or local for localhost"
    printf_read_input "6" "Enter new hostname:" "120" "NEWMPDSERVER"
    [ -n "$NEWMPDSERVER" ] || NEWMPDSERVER="$OLDMPDSERVER"
    [ "$NEWMPDSERVER" = "local" ] && NEWMPDSERVER="$(hostname -s)"
    [ "$NEWMPDSERVER" = "reset" ] && NEWMPDSERVER="$ORIG_MPDSERVER"
    sleep 3
    if __local_sysname "$NEWMPDSERVER"; then
      if __cmd_exists mpd; then
        if is_up_mpd; then
          MPDSTATUS=stop
        else
          printf_green "starting the mpd server"
          mpd &>/dev/null &
          sleep 5
          is_up_mpd && MPDSTATUS=stop || MPDSTATUS=start
        fi
      else
        NEWMPDSERVER="$OLDMPDSERVER"
        printf_error "mpd is not installed"
      fi
    fi
    __mpc() { mpc -h "$NEWMPDSERVER" "$@" || return 1; }
    if is_up &>/dev/null; then
      MPDSERVER="$NEWMPDSERVER"
      printf_green "Successfully changed hostname to $MPDSERVER"
    else
      __mpc() { mpc -h "$OLDMPDSERVER" "$@" || return 1; }
      printf_red "Failed to change hostname to $NEWMPDSERVER"
      printf_red "Resetting back to $OLDMPDSERVER"
      MPDSERVER="$OLDMPDSERVER"
    fi
    ;;
  3)
    shift 1
    __mpd_toggle
    ;;
  0)
    __mpc status | printf_readline
    printf_pause
    ;;
  /)
    shift 1
    cmd="toggle volume"
    __devnull volume_toggle
    ;;
  +)
    shift 1
    cmd="volume +5"
    __devnull __mpc volume +5
    ;;
  -)
    shift 1
    cmd="volume -5"
    __devnull __mpc volume -5
    ;;
  ])
    shift 1
    cmd="volume +1"
    __devnull __mpc volume +1
    ;;

  [)
    shift 1
    cmd="volume -1"
    __devnull __mpc volume -1
    ;;
  a)
    shift 1
    cmd="$PLAYT"
    __devnull __mpc toggle
    ;;
  b)
    shift 1
    cmd="consume to $TOGGLEC"
    __devnull __mpc consume
    ;;
  l)
    shift 1
    cmd="repeat to $REPEATS"
    __devnull __mpc repeat
    ;;
  n)
    shift 1
    cmd="play next"
    __devnull __mpc next
    ;;
  p)
    shift 1
    cmd="play previous"
    __devnull __mpc prev
    ;;
  r)
    shift 1
    cmd="play"
    __devnull __mpc play
    ;;
  s)
    shift 1
    cmd="stop"
    __devnull __mpc stop
    ;;
  u)
    shift 1
    cmd="update"
    __devnull __mpc update
    ;;
  x)
    shift 1
    cmd="ncmpcpp"
    __devnull2 client
    ;;
  y)
    shift 1
    printf_read_input "6" "Enter command to send : " "120" "opts"
    if [ -n "$opts" ]; then
      printf_custom "26" "Results for $opts"
      __mpc "$opts" 2>/dev/null | printf_readline "3"
      printf_read_question "6" "Press enter to continue " "120"
    else
      clear
    fi
    ;;
  $'\E' | $'\e' | z)
    shift 1
    clear
    break
    ;;
  *) shift ;;
  esac
  printf_counter "5" "3" "Re-loading menu in"
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
