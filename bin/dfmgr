#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##Version      : 010820210439-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : dfmgr
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : DotFiles ManaGeR
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Set functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-applications.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
else
  mkdir -p "/tmp/CasjaysDev/functions"
  curl -LSs "$SCRIPTSFUNCTURL/$SCRIPTSFUNCTFILE" -o "/tmp/CasjaysDev/functions/$SCRIPTSFUNCTFILE" || exit 1
  . "/tmp/CasjaysDev/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

dfmgr_install

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

[ "$1" = "--version" ] && get_app_info "$APPNAME"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if cmd_exists jq; then
  API="$(curl -s "https://api.github.com/orgs/dfmgr/repos?per_page=1000" | jq -r '.[] | .name' 2>/dev/null)"
fi

__help() {
  printf_help "\n
\t\tA DotFiles Manager for all systems   |   Usage: dfmgr command
\t\tdfmgr version              - show the version info           | IE: dfmgr version bash
\t\tdfmgr available            - list available dotfiles         | IE: dfmgr available
\t\tdfmgr list                 - list installed dotfiles         | IE: dfmgr list
\t\tdfmgr search               - find a dotfile                  | IE: dfmgr search geany
\t\tdfmgr install              - install a dotfile               | IE: dfmgr install vim
\t\tdfmgr update               - update the dotfiles             | IE: dfmgr update
\t\tdfmgr personal             - update personal dotfiles        | IE: dfmgr personal
"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

dfmgr_available() {
  printf_custom "4" "$API"
}

dfmgr_list() {
  if [ -n "$1" ]; then
    if [ -d "$USRUPDATEDIR" ] && [ -n "$(ls -A "$USRUPDATEDIR/$1" 2>/dev/null)" ]; then
      file="$(ls -A "$USRUPDATEDIR/$1" 2>/dev/null)"
      if [ -f "$file" ]; then
        printf_green "Information about $1: \n$(bash -c "$file --version")"
      else
        printf_exit "File was not found is it installed?"
        exit
      fi
    fi
  else
    declare -a LSINST="$(ls "$USRUPDATEDIR/" 2>/dev/null)"
    if [ -z "$LSINST" ]; then
      printf_red "No dotfiles are installed"
      exit
    else
      for df in ${LSINST[*]}; do
        printf_green $df
      done
    fi
  fi
  exit
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

dfmgr_search() {
  declare -a LISTARRAY=$*
  for df in ${LISTARRAY[*]}; do
    echo $LIST | tr ' ' '\n' 2>/dev/null | grep --color=auto -Fi "$df" || printf_exit "That DotFile does not exist"
  done
  exit
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

dfmgr_instupdate() {
  declare -a LISTARRAY=$*
  for ins_upd in ${LISTARRAY[*]}; do
    if urlcheck "$REPO/$ins_upd/raw/master/install.sh"; then
      printf_yellow "Initializing the installer from"
      printf_purple "$REPO/$ins_upd"
      bash -c "$(curl -LSs $REPO/$ins_upd/raw/master/install.sh)"
      getexitcode "$ins_upd has been installed"
    else
      urlinvalid "$REPO/$ins_upd/raw/master/install.sh"
    fi
    echo ""
  done
}

df_personal() {
  shift 1
  dir="$HOME/.local/dotfiles/personal"
  if [ -f "$dir/install.sh" ]; then
    bash -c "$dir/install.sh"
    getexitcode "Personal dotfiles has been updated"
  elif [ -f "$dir/update.sh" ]; then
    bash -c "$dir/update.sh"
    getexitcode "Personal dotfiles has been updated"
  elif [ -d "$dir/.git" ]; then
    printf_purple "Updating your personal files"
    git -C "$dir" pull -q &&
      cp -Rfa "$dir"/etc/skel/. ~/ &&
      gpg --import "$dir"/tmp/*.gpg 2>/dev/null
    gpg --import "$dir"/tmp/*.sec 2>/dev/null &&
      gpg --import-ownertrust "$dir"/tmp/*.trust 2>/dev/null
    getexitcode "Personal dotfiles has been updated"
  else
    printf_red "Can't install your personal dotfiles"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

case "$1" in

help | h | --h*)
  __help
  ;;

list)
  shift 1
  dfmgr_list "$@"
  ;;

search)
  shift 1
  dfmgr_search "$@"
  ;;

available)
  shift 1
  available
  ;;

personal)
  shift 1
  df_personal
  ;;

install)
  shift 1
  [ -z "$1" ] && echo "$LIST" && exit 1
  [ "$1" = "--all" ] && declare -a LISTARRAY="$LIST" || declare -a LISTARRAY=$*
  for ins in ${LISTARRAY[*]}; do
    dfmgr_instupdate "$ins" 2>/dev/null
  done
  ;;

update)
  shift 1
  if [[ -n $* ]]; then
    dfmgr_instupdate "$@"
  elif [[ -d $USRUPDATEDIR && -n "$(ls -A $USRUPDATEDIR 2>/dev/null)" ]]; then
    for upd in $(ls $USRUPDATEDIR 2>/dev/null); do
      dfmgr_instupdate "$upd" 2>/dev/null
    done
  fi
  ;;

cron)
  shift 1
  if [[ $USER != "root" ]]; then
    if [[ -d $USRUPDATEDIR && -n "$(ls -A $USRUPDATEDIR)" ]]; then
      file="$(ls -A $USRUPDATEDIR/$1 2>/dev/null)"
      if [ -f "$file" ]; then
        $file --cron
      fi
    fi
  else
    if [[ -d $SYSUPDATEDIR && -n "$(ls -A $SYSUPDATEDIR)" ]]; then
      file="$(ls -A $SYSUPDATEDIR/$1 2>/dev/null)"
      if [ -f "$file" ]; then
        sudo $file --cron
      fi
    fi
  fi
  ;;

version)
  shift 1
  ANAME="$1"
  if [ -d "$USRUPDATEDIR" ] && [ -n "$(ls -A $USRUPDATEDIR/$1 2>/dev/null)" ]; then
    file="$(ls -A $USRUPDATEDIR/$1 2>/dev/null)"
    if [ -f "$file" ]; then
      printf_green "Information about $1: \n$(bash -c "$file --version")"
    fi
  elif [ -f "$(command -v $1 2>/dev/null)" ]; then
    printf_green "Information about $1: $(bash -c "$ANAME --version 2>/dev/null")"
  else
    printf_exit "File was not found is it installed?"
  fi
  printf_green "scripts version is $(cat ${SCRIPTSFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}/version.txt)"
  exit
  ;;

*)
  __help
  ;;

esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
