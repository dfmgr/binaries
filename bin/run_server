#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103201833-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : run_server --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 18:33 EDT
# @File          : run_server
# @Description   : Start an HTTP server from a directory
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__test_server() { netstatg $1 | grep -qi python && return 1 || return 0; }
__return_error() { printf '%s\n' "Failed to start server" &>>"$SERVER_LOG" && printf_exit 1 1 "Failed to start the server"; }
__netcat_serv() { while true; do nc -l "${port}" < .; done &>>"$SERVER_LOG" && echo netcat started &>>"$SERVER_LOG" || return 1; }
__js_serv() { cmd_exists http-server && http-server -a 0.0.0.0 -p ${port} &>>"$SERVER_LOG" && echo http-server started &>>"$SERVER_LOG"  || return 1; }
__php_serv() { cmd_exists php && php -S 0.0.0.0:${port} &>>"$SERVER_LOG" && echo php started &>>"$SERVER_LOG"  || return 1; }
__ruby_serv() { cmd_exists ruby && ruby -run -ehttpd . -p ${port}} &>>"$SERVER_LOG" && echo ruby started &>>"$SERVER_LOG" || return 1; }
__python3_serv() { cmd_exists python3 && python3 -m http.server --cgi --bind "$myip" "${port}" &>>"$SERVER_LOG" && echo Py3 started &>>"$SERVER_LOG" || return 1; }
__python2_serv() { cmd_exists python2 && python2 -m http.server --cgi --bind "$myip" "${port}" &>>"$SERVER_LOG" && echo Py2 started &>>"$SERVER_LOG" || return 1; }
__py_simple() { cmd_exists python && python -m SimpleHTTPServer "${port}" &>>"$SERVER_LOG" && echo "Py simple start" &>>"$SERVER_LOG" || return 1; }
__default_srv() { cmd_exists python2 && python2 -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "${port}" &>>"$SERVER_LOG" && echo "Default has started" || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
open_url() {
	[ -z "$SSH_CONNECTION" ] || return 
	if cmd_exists mybrowser; then mybrowser "$1"; 
	elif cmd_exists "xdg-open"; then xdg-open "$1"; 
	elif cmd_exists "open"; then open "$1"; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cmd_exists lsof

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ "$1" = "--bg" ]; then
  shift 1
  echo "launching background process"
  SERVER_LOG="${TMPDIR:-/tmp}/run_server_bg.log"
  $APPNAME "$*" &>"$SERVER_LOG" &
  disown
  exit $?
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

i=0
port="${1:-8000}" && shift 1
dir="$2"
myip=$(ifconfig | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}')
myhost="$(hostname -s)"
MAX_NUMBER_OF_TRIES=10
TMP_DIR="${TMPDIR:-/tmp}"
SERVER_LOG="${SERVER_LOG:-$TMPDIR/run_server_$port.log}"
[ -n "$dir" ] && [ -d "$dir" ] && shift 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if ! __test_server "$port"; then
  printf_error "Something appears to be running on $port"
  printf_yellow "Attempting another port"
  while true; do
    port=$((port + 1))
    __test_server "$port" && break
  done
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
printf '%s\n' "Starting the server on port $port" &>"$SERVER_LOG"
while [ $i -lt $MAX_NUMBER_OF_TRIES ]; do
  if [ "$(lsof -i -nP | grep "$port" | grep -i "python")" != "" ]; then
    open_url "http://$myip:${port}/"
    break
  fi
  i=$((i + 1))
  sleep 5
done &
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -n "$dir" ] && [ -d "$dir" ]; then 
printf_green "serving files from $dir"
cd "$dir"
fi
printf_yellow "Access from the network: http://$myip:$port"
printf_red "control-c to exit"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case "$1" in 
js)
  shift 1
  __js_serv || __return_error
  ;;
  
php)
  shift 1
  __php_serv || __return_error
  exit $?
  ;;

ruby)
  shift 1
  __ruby_serv || __return_error
  exit $?
  ;;
  
python2)
  shift 1
  __python2_serv || __return_error
  exit $?
  ;;
  
python3)
  shift 1
  __python3_serv || __return_error
  exit $?
  ;;

default)
  shift 1
  __default_srv || __return_error
  exit $?
  ;;

netcat | nc)
  shift 1
  __netcat_serv || __return_error
  exit $?
  ;;

*)
  __default_srv || __python3_serv || __python2_serv || __py_simple || __netcat_serv || __return_error
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
