#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : pasteit
# @Created     : Mon, Dec 31, 2019, 00:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : Post to a pastebin
# @Source      : https://github.com/glensc/pbin
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Set functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-applications.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
else
  mkdir -p "/tmp/CasjaysDev/functions"
  curl -LSs "$SCRIPTSFUNCTURL/$SCRIPTSFUNCTFILE" -o "/tmp/CasjaysDev/functions/$SCRIPTSFUNCTFILE" || exit 1
  . "/tmp/CasjaysDev/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

[ "$1" = "--version" ] && get_app_info "$APPNAME"
[ "$1" = "--help " ] && printf_exit "Pastes from STDIN or file from commandline argument to Stikked pastebin"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set -e
PROGRAM=${0##*/}

# can be overriden from env
: ${PASTE_URL='https://pastebin.casjay.in/api/create'}
#: ${PASTE_APIKEY='apikey'}

# filter url for printing (remove password)
print_url() {
  local url="$1"

  echo "$url" | sed -e 's;://[^@]*@;://;'
}

# paste. take input from stdin
pastebin() {
  # show params
  sed -e '/^$/d' >&2 <<-EOF
		${PASTE_APIKEY+apikey: "$PASTE_APIKEY"}
		${title+title: "$title"}
		${name+name: "$name"}
		${private+private: "$private"}
		${language+language: "$language"}
		${expire+expire: "$expire"}
		${reply+reply: "$reply"}
	EOF

  # do paste
  curl "$PASTE_URL${PASTE_APIKEY+?apikey=${PASTE_APIKEY}}" \
    ${title+-F title="$title"} \
    ${name+-F name="$name"} \
    ${private+-F private="$private"} \
    ${language+-F lang="$language"} \
    ${expire+-F expire="$expire"} \
    ${reply+-F reply="$reply"} \
    -F 'text=<-'
}

# try to resolve mime-type to language
mime_to_lang() {
  local mime="$1"

  awk -F ':' -vm="$mime" 'm==$1 {print $2}' <<-EOF
	application/javascript:javascript
	application/xml:xml
	text/html:html5
	text/x-c:c
	text/x-c++:cpp
	text/x-diff:diff
	text/x-lua:lua
	text/x-php:php
	text/x-python:python
	text/x-ruby:ruby
	text/x-shellscript:bash
	EOF
}

# detect filetype. outputs nothing if no file binary or no detected
detect_mimetype() {
  local file="$1" out

  out=$(file -L --mime-type "$file" 2>/dev/null || :)
  echo "${out#*: }"
}

usage() {
  echo "Usage: $PROGRAM [options] < [input_file]

Options:
  -a, --apikey    API key for the server
  -t, --title     title of this paste
  -n, --name      author of this paste
  -p, --private   should this paste be private
  -l, --language  language this paste is in
  -e, --expire    paste expiration in minutes
  -r, --reply     reply to existing paste
"
}

set_defaults() {
  unset title
  unset private
  unset language
  unset expire
  unset reply

  # default to user
  name=${SUDO_USER:-$USER}
}

set_defaults

# parse command line args
t=$(getopt -o h,t:,n:,p,l:,e:,r:,b:,a: --long help,title:,name:,private,language:,expire:,reply:,apikey: -n "$PROGRAM" -- "$@")
eval set -- "$t"

while :; do
  case "$1" in
  -h | --help)
    usage
    exit 0
    ;;
  -t | --title)
    shift
    title="$1"
    ;;
  -n | --name)
    shift
    name="$1"
    ;;
  -p | --private)
    private=1
    ;;
  -l | --language)
    shift
    language="$1"
    ;;
  -e | --expire)
    shift
    expire="$1"
    ;;
  -r | --reply)
    shift
    reply="$1"
    ;;
  -b)
    shift
    PASTE_URL="$1"
    ;;
  -a | --apikey)
    shift
    PASTE_APIKEY="$1"
    ;;
  --)
    shift
    break
    ;;
  *)
    echo >&2 "$PROGRAM: Internal error: [$1] not recognized!"
    exit 1
    ;;
  esac
  shift
done

printf "Paste endpoint: %s\n" "$(print_url "$PASTE_URL")"

# if we have more commandline arguments, set these as title
if [ "${title+set}" != "set" ]; then
  title="$*"
fi

# set language from first filename
if [ -n "$1" ] && [ "${language+set}" != "set" ]; then
  mime=$(detect_mimetype "$1")

  if [ -n "$mime" ]; then
    language=$(mime_to_lang "$mime")
  fi
fi

# take filenames from commandline, or from stdin
if [ $# -gt 0 ]; then
  paste=$(cat "$@")
else
  paste=$(cat)
fi

printf "%s" "$paste" | pastebin

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
