#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 010920210727-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : devenv
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : setup a development environment
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
devenvmgr_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if_sample() {
  if [ -f .env.sample ] || [ -f .env ]; then cp -Rf .env.sample .env; fi
  if [ -f .config.sample ] || [ -f .config ]; then cp -Rf .config.sample .config; fi
  if [ -f config.example.js ] || [ -f config.js ]; then cp -Rf config.example.js config.js; fi
  if [ -f .config.json.sample ] || [ -f .config.json ]; then cp -Rf .config.json.sample .config.json; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_static_site() {
  run_server ${1:-20000}
  exit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_new_site() {
  local sitedir
  printf_green "Enter the full path for your new project!"
  printf_read_question "3" "Enter location for your new site - enter . for current:" "120" "sitedir"
  [ -n "$sitedir" ] || printf_exit "Something went wrong"
  [ -d "$sitedir" ] || __mkd "$sitedir"
  cd "$sitedir" || printf_exit 1 1 "$sitedir doesn't exist"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_jekyll() {
  local appname=jekyll
  local project=jekyll
  cmd_exists "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  if [ -f "$HOME/.config/screen/dev/$project" ]; then
    screen -c "$HOME/.config/screen/dev/$project"
  fi
  exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_hugo() {
  local appname=hugo
  local project=hugo
  cmd_exists "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  if [ -f "$HOME/.config/screen/dev/$project" ]; then
    screen -c "$HOME/.config/screen/dev/$project"
  fi
  exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_ruby() {
  local appname=ruby
  local project=ruby
  cmd_exists "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  if [ -f "$HOME/.config/screen/dev/$project" ]; then
    screen -c "$HOME/.config/screen/dev/$project"
  fi
  exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_python() {
  local appname=python
  local project=python
  cmd_exists "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  if [ -f "$HOME/.config/screen/dev/$project" ]; then
    screen -c "$HOME/.config/screen/dev/$project"
  fi
  exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_perl() {
  local appname=perl
  local project=perl
  cmd_exists "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  if [ -f "$HOME/.config/screen/dev/$project" ]; then
    screen -c "$HOME/.config/screen/dev/$project"
  fi
  exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_php() {
  local appname=php
  local project=php
  cmd_exists "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  if [ -f "$HOME/.config/screen/dev/$project" ]; then
    screen -c "$HOME/.config/screen/dev/$project"
  fi
  exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_node() {
  local appname=node || appname=node || appname=npm
  local project=node
  cmd_exists "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  [ -f package.json ] || npm init
  if [ -f "$HOME/.config/screen/dev/$project" ]; then
    screen -c "$HOME/.config/screen/dev/$project"
  fi
  npm init
  exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_vuecli() {
  local appname=vue
  local project=node
  cmd_exists "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  [ -f package.json ] || printf_red "The package.json file already exits" && exit 1
  if [ -f "$HOME/.config/screen/dev/$project" ]; then
    screen -c "$HOME/.config/screen/dev/$project"
  fi
  "$appname" create
  exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_reactcli() {
  local appname=create-react-app
  local project=javascript
  cmd_exists "$appname" || printf_exit "$node is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  [ -f package.json ] || printf_red "The package.json file already exits" && exit 1
  if [ -f "$HOME/.config/screen/dev/$project" ]; then
    screen -c "$HOME/.config/screen/dev/$project"
  fi
  $appname
  exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_expresscli() {
  local appname=express-generator
  local project=javascript
  cmd_exists "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$appname" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  [ -f package.json ] || printf_red "The package.json file already exits" && exit 1
  if [ -f "$HOME/.config/screen/dev/$project" ]; then
    screen -c "$HOME/.config/screen/dev/$project"
  fi
  $appname
  exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_create-project() {
  local appname=create-project
  local project=javascript
  cmd_exists "$appname" || printf_exit "$appname is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$project" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  [ -f package.json ] || printf_red "The package.json file already exits" && exit 1
  if [ -f "$HOME/.config/screen/dev/$project" ]; then
    screen -c "$HOME/.config/screen/dev/$project"
  fi
  "$appname"
  exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_mevn() {
  local appname=mevn
  local project=javascript
  cmd_exists "$git" || printf_exit "$git is not installed"
  if_sample
  if [[ $* = "--new" ]]; then echo "$project" && exit; fi
  if [[ $* = "--help" ]]; then __help; fi
  [ -f package.json ] || printf_red "The package.json file already exits" && exit 1
  if [ -f "$HOME/.config/screen/dev/$project" ]; then
    screen -c "$HOME/.config/screen/dev/$project"
  fi
  git clone -q https://github.com/icebob/vue-express-mongo-boilerplate ./
  exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_shellcheck() {
  printf_green "Generating .shellcheckrc"
  __cp_rf "$CASJAYSDEVDIR/templates/shellcheckrc" ./.shellcheckrc
  [ -f "./shellcheckrc" ] && \
    printf_green ".shellcheckrc has been generated" || \
    printf_exit 1 1 "Failed to create .shellcheckrc"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$1" = "--start" ]; then
  shift 1
  START="$1"

  case "$START" in
  jekyll)
    __cmd_exists jekyll || printf_exit 1 1 "jekyll can't be found"
    if [ -f ./_config.yml ]; then
      if __cmd_exists watchy; then
        watchy -w _config.yml -- jekyll serve --host=0.0.0.0
      elif cmd_exists jekyll; then
        jekyll serve --host=0.0.0.0
      else printf_exit "There was a problem staring - no config found"; fi
    else
      printf_exit "There was a problem starting - no config found"
    fi
    ;;

  *)
    printf_red "No parameters specified"
    exit
    ;;
  esac
fi

case "$1" in
static)
  shift 1
  __run_new_site && __run_static_site "$@"
  ;;
jekyll)
  shift 1
  __run_new_site && __run_jekyll "$@"
  ;;

hugo)
  shift 1
  __run_new_site && __run_hugo "$@"
  ;;

ruby)
  shift 1
  __run_new_site && __run_ruby "$@"
  ;;

python)
  shift 1
  __run_new_site && __run_python "$@"
  ;;

perl)
  shift 1
  __run_new_site && __run_perl "$@"
  ;;

php)
  shift 1
  __run_new_site && __run_php "$@"
  ;;

node)
  shift 1
  __run_new_site && __run_node "$@"
  ;;

vue)
  shift 1
  __run_new_site && __run_vuecli "$@"
  ;;

react)
  shift 1
  __run_new_site && __run_reactcli "$@"
  ;;

express)
  shift 1
  __run_new_site && __run_expresscli "$@"
  ;;

create-project)
  shift 1
  __run_new_site &&  __run_create-project "$@"
  ;;

mevn)
  shift 1
  __run_new_site && __run_mevn "$@"
  ;;
gen-shellrc)
  shift 1
  __run_new_site && __gen_shellcheck
  ;;
*)
  shift --
  __help "$@"
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
