#!/usr/bin/env bash

APPNAME="mpdclient"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 012920210415-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : mpdclient
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : A script to control a remote or local MPD daemon
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

shopt -s extglob
trap '' SIGINT
trap '' SIGQUIT
trap '' SIGTSTP # display message and pause

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__check_app mpc
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
TEMPDIR="${TMP:-/tmp}/mpdclient/$USER"
MPDSERVER="${MPDSERVER:-localhost}"
notify-daemon ask && NOTIFY="on" || NOTIFY="off"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [[ "$1" = *term ]]; then exec myterminal -e "$APPNAME" & exit; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__devnull() { "$@" >/dev/null 2>&1 && printf_green "Command sent successfully" || printf_red "Failed to send command"; }
__devnull2() { "$@" 2>/dev/null && printf_green "Command sent successfully" || printf_red "Failed to send command"; }
__server_failed() { printf_red "$ICON_ERROR Failed to connect to mpdserver @ $MPDSERVER" && sleep 3 && return 1; }
__mpc() { mpc -h "$MPDSERVER" "$@" || return 1; }
is_up() { __mpc &>/dev/null && return 0 || __server_failed; }
get_prev() { cat "$TEMPDIR/mpdclient_prev" 2>/dev/null; }
get_next() { cat "$TEMPDIR/mpdclient_next" 2>/dev/null; }
get_curr() { cat "$TEMPDIR/mpdclient_curr" 2>/dev/null; }
next() { echo -en "Next: $(get_next || echo Nothing is in the queue)\n"; }
playtime() { echo -en "Time: $(__mpc status | grep -Fi '[' | cut -d' ' -f5,6 | grep '^' || printf 'N/A')\n"; }
volume() { echo -en "Volume: $(__mpc status | grep -i volume | tr ':' ' ' | awk '{print $2}')\n"; }
stats() { echo -e "$(volume)  |  $(playtime)"; }
db_play() { echo -e "Total: $(__mpc stats | tail -n1 | sed 's#DB Play Time: ##g')"; }
db_songs() { echo -e "Songs: $(__mpc stats | grep Songs | awk '{print $2}')"; }
db_uptime() { echo -e "Uptime: $(__mpc stats | grep Uptime | sed 's#Uptime:       ###g')"; }
mpc_status() {
  status() {
    echo "MPD @ $MPDSERVER: $(db_uptime)"
    echo -e "$(db_songs)  |  $(db_play)"
    echo -e "$(stats)"
    if __mpc status | grep -iq playing >/dev/null 2>&1; then
      echo -n "Playing: "
    elif __mpc status | grep -iq stopped >/dev/null 2>&1; then
      echo -n "Stopped: "
    elif __mpc status | grep -iq paused >/dev/null 2>&1; then
      echo -n "Paused: "
    else
      echo -n ""
    fi
  }

  display() {
    status
    if __mpc status | head -n 1 | grep -iqv volume; then
      echo -en "$(__mpc status | head -n 1 | grep -Ev '[*]|volume')\n"
    else
      echo -e "MPD Server is stopped"
    fi
  }

  notify && display && next && return 0 || return 1
}

notify() {
  # Order here matters
  currSong="$(get_curr && __mpc current | grep '^' >"$TEMPDIR/mpdclient_curr")"
  nextSong="$(get_next && __mpc queued | grep '^' >"$TEMPDIR/mpdclient_next")"
  if [ "$(get_curr)" != "$(get_prev)" ] && [ "$NOTIFY" = "on" ]; then
    __cmd_exists notifications && notifications "MPD Client" "Now playing $(get_curr)"
  fi
  prevSong="$(get_curr >"$TEMPDIR/mpdclient_prev" 2>/dev/null)"
}

notify_toggle() {
  if [ "$NOTIFY" = "on" ]; then
    export NOTIFY="off"
    export NOTIFYS="on"
    __cmd_exists notifications && notifications "MPD Client" "Notications have been disabled"
  elif [ "$NOTIFY" = "off" ]; then
    export NOTIFY="on"
    export NOTIFYS="off"
    __cmd_exists notifications && notifications "MPD Client" "Notications have been enabled"
  fi
  #printf_blue "prevSong:$prevSong\n\t\tcurrSong:$currSong\n\t\tnotification:$NOTIFY"
  printf_green "Notifications has been set to $NOTIFY"
  return
}

volume_toggle() {
  if __mpc volume | grep volume: | grep -Fq ' 0%'; then
    if [ -f "$TEMPDIR/volume" ]; then
      restore="$(cat "$TEMPDIR/volume" | sed 's#%##g')"
      __mpc volume "$restore"
    else
    __mpc volume 100
    fi
  else
    volume | awk '{print $2}' | sed 's#%##g' > "$TEMPDIR/volume"
    __mpc volume 0
  fi
  return 0
}

client() {
  clear
  if [ -n "$MPDSERVER" ]; then
    GETMPDSERVER="$(__hostname2ip "$MPDSERVER" || return 1)"
    CONNECT_TO="$GETMPDSERVER"
  else
    CONNECT_TO="localhost"
  fi

  if __cmd_exists ncmpcpp; then
      ncmpcpp -q -h $CONNECT_TO
  elif __cmd_exists mpc; then
      mpc -q -h $CONNECT_TO
  else
    printf_newline "\n\n"
    printf_counter "1" "5" "ncmpcpp is not installed"
    clear
    return 1
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__mkd "$TEMPDIR"
[ -f "$TEMPDIR/mpdclient_prev" ] || echo "" >"$TEMPDIR/mpdclient_prev"
[ -f "$TEMPDIR/mpdclient_curr" ] || echo "" >"$TEMPDIR/mpdclient_curr"
[ -f "$TEMPDIR/mpdclient_next" ] || echo "" >"$TEMPDIR/mpdclient_next"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

while :; do
  clear
  shift 1
  printf_newline "\n\n\n\n"
  is_up || break
  mpc_status | printf_readline "6"
  printf_newline
  printf_green "1. turn notifications ${NOTIFYS:-off}"
  printf_green "/. mute/unmute volume"
  printf_green "+. volume up +5"
  printf_green "-. volume down -5"
  printf_green "]. volume up +1"
  printf_green "[. volume down -1"
  printf_green "a. toggle"
  printf_green "b. consume"
  printf_green "n. next"
  printf_green "p. prev"
  printf_green "r. play"
  printf_green "s. stop"
  printf_green "u. update database"
  printf_green "x. launch ncmpcpp"
  printf_green "y. send command to mpd"
  printf_green "z. quit"
  printf_newline
  printf_read_question "6" "Enter your choice  : " "1" "main" "-s"
  printf_newline
  case "$main" in
  1)
    shift 1
    notify_toggle
    ;;
  /)
    shift 1
    __devnull volume_toggle
    ;;
  +)
    shift 1
    __devnull __mpc volume +5
    ;;
  -)
    shift 1
    __devnull __mpc volume -5
    ;;
  ])
    shift 1
    __devnull __mpc volume +1
    ;;

  [)
    shift 1
    __devnull __mpc volume -1
    ;;
  a)
    shift 1
    __devnull __mpc toggle
    ;;
  b)
    shift 1
    __devnull __mpc consume
    ;;
  n)
    shift 1
    __devnull __mpc next
    ;;
  p)
    shift 1
    __devnull __mpc prev
    ;;
  r)
    shift 1
    __devnull __mpc play
    ;;
  s)
    shift 1
    __devnull __mpc stop
    ;;
  u)
    shift 1
    __devnull __mpc update
    ;;
  x)
    shift 1
    __devnull2 client
    ;;
  y)
    shift 1
    printf_read_question "6" "Enter command to send : " "120" "opts"
    clear
    printf_newline "\n\n\n"
    printf_custom "26" "Results for $opts"
    __mpc "$opts" 2>/dev/null | printf_readline "3"
    printf_read_question "6" "Press enter to continue " "120"
    ;;
  $'\E' | $'\e' | z)
    shift 1
    clear
    break
    ;;
  *) shift ;;
  esac
  printf_counter "5" "1" "Re-loading menu in"
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
