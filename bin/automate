#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202103271625-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103271625-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : automate --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 27, 2021 16:25 EDT
# @File          : automate
# @Description   : Script to control roku and hue devices
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$AUTOMATE_CONFIG_DIR/$AUTOMATE_CONFIG_FILE"
  [ -d "$AUTOMATE_CONFIG_DIR" ] || mkdir -p "$AUTOMATE_CONFIG_DIR"
  [ -d "$AUTOMATE_CONFIG_BACKUP_DIR" ] || mkdir -p "$AUTOMATE_CONFIG_BACKUP_DIR"
  [ -f "$AUTOMATE_CONFIG_DIR/$AUTOMATE_CONFIG_FILE" ] &&
    cp -Rf "$AUTOMATE_CONFIG_DIR/$AUTOMATE_CONFIG_FILE" "$AUTOMATE_CONFIG_BACKUP_DIR/$AUTOMATE_CONFIG_FILE.$$"
  cat <<EOF >"$AUTOMATE_CONFIG_DIR/$AUTOMATE_CONFIG_FILE"
# Settings for automate
AUTOMATE_NOTIFY_ENABLED="yes"
AUTOMATE_NOTIFY_MESG=""
AUTOMATE_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
AUTOMATE_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$AUTOMATE_NOTIFY_CLIENT_ICON}"
AUTOMATE_CACHE_DIR="\$HOME/.cache/automate"
AUTOMATE_STATE_FILE="\$AUTOMATE_CACHE_DIR/state"

EOF
  if [ -f "$AUTOMATE_CONFIG_DIR/$AUTOMATE_CONFIG_FILE" ]; then
    printf_green "Your config file for automate has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
getstate() { cat "$AUTOMATE_STATE_FILE"; }
roku_play() { roku play; }
roku_stop() { roku stop; }
roku_pause() { roku pause; }
hue_play() { hue play; }
hue_stop() { hue stop; }
automate_play() { roku_play && hue_play && echo play >$AUTOMATE_STATE_FILE || return 1; }
automate_stop() { roku_stop && hue_stop && echo stop >$AUTOMATE_STATE_FILE || return 1; }
automate_pause() { roku pause && hue toggle && echo pause >$AUTOMATE_STATE_FILE || return 1; }
automate_toggle() {
  if [ "$(getstate)" = play ]; then
    automate_stop || exitCode=1
  elif [ "$(getstate)" = stop ]; then
    automate_play || exitCode=1
  elif [ "$(getstate)" = pause ] || [ "$(getstate)" = "toggle" ]; then
    automate_pause || exitCode=1
  else
    printf_exit "Can not get state from $AUTOMATE_STATE_FILE"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
AUTOMATE_CONFIG_FILE="settings.conf"
AUTOMATE_CONFIG_DIR="$HOME/.config/myscripts/automate"
AUTOMATE_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/automate/backups"
AUTOMATE_OPTIONS_DIR="$HOME/.local/share/myscripts/automate/options"
AUTOMATE_NOTIFY_ENABLED="yes"
AUTOMATE_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
AUTOMATE_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$AUTOMATE_NOTIFY_CLIENT_ICON}"
AUTOMATE_CACHE_DIR="$HOME/.cache/automate"
AUTOMATE_STATE_FILE="$AUTOMATE_CACHE_DIR/state"
AUTOMATE_NOTIFY_MESG=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="$*"
SHORTOPTS="c,v,h"
LONGOPTS="options,config,version,help"
ARRAY=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$AUTOMATE_CONFIG_DIR/$AUTOMATE_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$AUTOMATE_OPTIONS_DIR/options" ] || __list_options "$AUTOMATE_OPTIONS_DIR" &>/dev/null
[ -f "$AUTOMATE_OPTIONS_DIR/array" ] || __list_array "$AUTOMATE_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$AUTOMATE_CONFIG_DIR/$AUTOMATE_CONFIG_FILE" ]; then
  . "$AUTOMATE_CONFIG_DIR/$AUTOMATE_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$AUTOMATE_OPTIONS_DIR" "$ARRAY"
    __list_options "$AUTOMATE_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${AUTOMATE_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${AUTOMATE_NOTIFY_CLIENT_ICON}"
if [ "$AUTOMATE_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash curl || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
mkdir -p "$AUTOMATE_CACHE_DIR"
[ -f "$HOME/.cache/automate" ] &&
  mv -f "$HOME/.cache/automate" "$AUTOMATE_STATE_FILE" ||
  touch "$AUTOMATE_STATE_FILE"
[ -s "$AUTOMATE_STATE_FILE" ] || echo toggle >$AUTOMATE_STATE_FILE
setopts="$1"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$setopts" in
play)
  shift 1
  state="play"
  automate_play
  ;;
stop)
  shift 1
  state="stop"
  automate_stop
  ;;
pause)
  shift 1
  state="pause"
  automate_pause
  ;;
toggle)
  shift 1
  state="$(getstate)"
  automate_toggle && echo toggle >$AUTOMATE_STATE_FILE
  ;;
state)
  case "$2" in
  text)
    shift 2
    echo -e "$(getstate)"
    ;;
  json | *)
    shift 2
    echo -e '{"status":"'$(getstate)'"}'
    ;;
  esac
  ;;
*)
  automate_toggle
  ;;
esac
if [ "$AUTOMATE_NOTIFY_ENABLED" = yes ]; then
  [ -z "$AUTOMATE_NOTIFY_MESG" ] || __notifications "$AUTOMATE_NOTIFY_MESG: $state"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
