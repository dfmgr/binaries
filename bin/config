#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103200620-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : config --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 06:20 EDT
# @File          : config
# @Description   : Add dotfiles/config files to a git repo
# @TODO          :
# @Other         :
# @Resource      : https://www.atlassian.com/git/tutorials/dotfiles
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="$(cat ${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/helpers/config/array)"
LIST="$(cat ${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/helpers/config/list)"
HELP="$(cat ${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/helpers/config/help)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [[ $EUID -eq 0 ]]; then
  printf_head "You are running as root as such this will allow full system access"
  CONFIG_HOME="/"
else
  CONFIG_HOME=$HOME
fi
gitdir="${CONFIG_REPO:-$HOME/.local/dotfiles/config}"
backupdir="${CONFIG_BACKUP_DIR:-$HOME/.local/backups/config}"
logdir="${CONFIG_LOG_DIR:-$HOME/.local/log/config}"
logfile="$logdir/config.log"
mkdir -p "$logdir" "$backupdir"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_online_check() { am_i_online --error && return 0 || return 1; }
_stow() { eval git --git-dir="$gitdir/" --work-tree="$CONFIG_HOME" "${@}"; }
_checkout() { _stow checkout "${@}" || _backup "${@}"; }
_symlink() { ls -ltra "$1" | grep '\->' | awk -F'-> ' '{print $2}' | sed 's#'$CONFIG_HOME'/##g'; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_backup() {
  mkdir -p "$backupdir"
  _stow checkout 2>/dev/null | awk '{print $2}' | grep -E '^' |
    rsync -a --remove-source-files --files-from="-" $CONFIG_HOME "$backupdir/"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
git_remote() {
  if [ -z "$1" ]; then
    printf_read_input "3" "Enter the url to your git repo:" 120 "url"
    _stow remote add origin "$url"
  else
    _stow remote "$@"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
gitconfig_local() {
  cat <<EOF >"$gitdir/config.local"
[color "branch"]
  current = green bold
  local = green
  remote = yellow

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[status]
  submoduleSummary = 1

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[color "diff"]
  frag = magenta
  meta = yellow
  new = green
  old = red
  newMoved = cyan
  oldMoved = blue

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[color "status"]
  added = green reverse
  changed = yellow reverse
  untracked = red reverse

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[diff]
  colorMoved = zebra
  submodule = log

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[diff "bin"]
  textconv = hexdump -v -C

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#pretty log
[pretty]
  custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Aliases
g   = "!(){ git --git-dir="$gitdir/" --work-tree="$CONFIG_HOME" log --graph --pretty=custom; };f"
l   = "!f(){ git --git-dir="$gitdir/" --work-tree="$CONFIG_HOME" log --pretty=custom; };f"
s   = "!f(){ git --git-dir="$gitdir/" --work-tree="$CONFIG_HOME" status -s -b; };f"
p   = "!f(){ git --git-dir="$gitdir/" --work-tree="$CONFIG_HOME" push; };f"

EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
git_init() {
  local choice="" email="" name=""
  if [ ! -f $CONFIG_HOME/.gitignore ]; then
    echo "$gitdir" >$CONFIG_HOME/.gitignore
    echo "*/.git/*" >$CONFIG_HOME/.gitignore
  else
    grep -q "$gitdir" $CONFIG_HOME/.gitignore 2>/dev/null || echo "$gitdir" >>$CONFIG_HOME/.gitignore
    grep -q '/.git/' $CONFIG_HOME/.gitignore 2>/dev/null || echo "*/.git/*" >>$CONFIG_HOME/.gitignore
  fi
  printf_read_question "4" "Do you already have a dotfiles repo: [y/N]" "1" "choice" "-s"
  if printf_answer_yes "$choice"; then
    printf_read_input "4" "What is the repo url:" "120" "url"
    git clone --bare "$url" "$gitdir" -q
    _checkout
    _stow config --local status.showUntrackedFiles no
  else
    mkdir -p "$gitdir"
    git init --bare "$gitdir" -q
    gitconfig_local
    _stow config --local status.showUntrackedFiles no
    _stow config --local commit.gpgSign false
    printf_read_question "4" "Would you like to add a remote git repo: [y/N]" "1" "choice" "-s"
    if printf_answer_yes "$choice"; then
      printf_read_input "4" "Enter the url to your git repo:" "120" "url"
      _stow remote add origin "$url"
    else
      printf_green "You did not add a remote git repo"
    fi
    printf_read_input "4" "Enter your name:" "120" "name"
    printf_read_input "4" "Enter email address:" "120" "email"
    _stow config --local user.name "$name"
    _stow config --local user.email "$email"
    _stow config --local include.path "$gitdir/config.local"
    _stow add -f $CONFIG_HOME/.gitignore
    _stow commit -q -m "'🏠🐜❗ Added .gitignore 🏠🐜❗'"
  fi
  exit "$?"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -d "$gitdir" ] && [ -f "$gitdir/config" ] || git_init
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case "$1" in
--config)
  printf_green "Regenerating the config file"
  shift 1
  gitconfig_local
  exit
  ;;

--system)
  shift 1
  if [ "$1" = "--help" ]; then
    printf_custom "41" "Allows you to keep your system settings in a git repo"
    printf_green "Usage: config --system commands"
    printf_exit "See config help for commands"
    __help
  fi
  __requiresudo true
  gitdir="/root/.local/dotfiles/system/$(hostname -s)"
  ;;

--name)
  shift 1
  if [ -z "${CONFIG_CUSTOM_REPO:-$1}" ] || [ -z "${CONFIG_CUSTOM_CONFIG_HOME:-$2}" ] || [ -z "$3" ]; then
    printf_custom "41" "This allows the use of a custom git dir"
    printf_green "Usage: config --custom gitdir commands"
    printf_exit "See config help for commands"
    exit 1
  fi
  name="$1"
  gitdir="$CONFIG_HOME/.local/dotfiles/system/$name"
  if [ -d "$gitdir" ]; then
    printf_red "Error: $gitdir already in use"
    exit 1
  fi
  shift
  ;;

--custom)
  shift 1
  if [ -z "${CONFIG_CUSTOM_REPO:-$1}" ] || [ -z "${CONFIG_CUSTOM_CONFIG_HOME:-$2}" ] || [ -z "$3" ]; then
    printf_custom "41" "This allows the use of a custom git dir and home dir"
    printf_green "Usage: config --custom gitdir homedir commands"
    printf_exit "See config help for commands"
  fi
  gitdir="${CONFIG_CUSTOM_REPO:-$1}"
  shift
  CONFIG_HOME="${CONFIG_CUSTOM_CONFIG_HOME:-$1}"
  shift 1
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case "$1" in
init)
  shift 1
  git_init
  ;;

local)
  shift 1
  _stow config --local "$@"
  ;;

log | l)
  shift 1
  _stow log --graph --pretty=custom "$@"
  exit
  ;;

status | s)
  shift 1
  _stow status -s -b "$@"
  exit
  ;;

restore | reset)
  shift 1
  _stow reset -- "$@"
  ;;

rm | remove)
  shift 1
  _stow rm -r "$@"
  ;;

add | stow)
  shift 1
  printf_green "'🏠🐜❗ Adding files to repo - this may take a moment 🏠🐜❗'"
  declare -a args="$*"
  for f in ${args[*]}; do
    if [ -L "$f" ]; then
      [ ! -L "$(_symlink "$f")" ] &&
        [ -e "$(_symlink "$f")" ] &&
        _stow add "$f" &&
        _stow add "$(_symlink "$f")"
    else
      _stow add -f "$f"
    fi
  done
  [ $? = 0 ] && printf_green "Don't forget to run config commit"
  #_stow commit -q -m "'🏠🐜❗ Added Files 🏠🐜❗'"
  ;;

commit)
  shift 1
  printf_green "'🏠🐜❗ Committing files to repo 🏠🐜❗'"
  _stow commit -q -m "'🏠🐜❗ Added files to repo 🏠🐜❗'"
  ;;

checkout)
  shift 1
  _checkout "$*"
  ;;

remote)
  shift 1
  if _online_check; then
    git_remote "$*"
  fi
  ;;

pull)
  shift 1
  if _online_check; then
    _stow pull "$*"
  fi
  ;;

push)
  shift 1
  if _online_check; then
    _stow push "$*" || _stow push --set-upstream origin master "$@"
  fi
  ;;

set)
  shift 1
  _stow config "$*"
  ;;

help | -h* | --h*)
  shift 0
  __help
  ;;

*)
  shift 0
  [ -z "$1" ] && __help
  exit 0
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
