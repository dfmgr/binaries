#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202104022137-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap '[ -f "$ASK_FOR_INPUT_TEMP_FILE" ] && rm -Rf "$ASK_FOR_INPUT_TEMP_FILE" &>/dev/null' EXIT

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202104022137-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : LICENSE.md
# @ReadME        : ask_for_input --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Apr 03, 2021 01:25 EDT
# @File          : ask_for_input
# @Description   : A simple script to ask a user for input
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE"
  [ -d "$ASK_FOR_INPUT_CONFIG_DIR" ] || mkdir -p "$ASK_FOR_INPUT_CONFIG_DIR"
  [ -d "$ASK_FOR_INPUT_CONFIG_BACKUP_DIR" ] || mkdir -p "$ASK_FOR_INPUT_CONFIG_BACKUP_DIR"
  [ -f "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE" ] &&
    cp -Rf "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE" "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE.$$"
  cat <<EOF >"$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE"
# Settings for ask_for_input
ASK_FOR_INPUT_TEMP_FILE="${TMPDIR:-/tmp}/ask_for_input"
ASK_FOR_INPUT_NOTIFY_ENABLED="yes"
ASK_FOR_INPUT_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
ASK_FOR_INPUT_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$ASK_FOR_INPUT_NOTIFY_CLIENT_ICON}"

EOF
  if [ -f "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE" ]; then
    printf_green "Your config file for ask_for_input has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
ASK_FOR_INPUT_CONFIG_FILE="settings.conf"
ASK_FOR_INPUT_CONFIG_DIR="$HOME/.config/myscripts/ask_for_input"
ASK_FOR_INPUT_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/ask_for_input/backups"
ASK_FOR_INPUT_OPTIONS_DIR="$HOME/.local/share/myscripts/ask_for_input/options"
ASK_FOR_INPUT_TEMP_FILE="${TMPDIR:-/tmp}/ask_for_input"
ASK_FOR_INPUT_NOTIFY_ENABLED="yes"
ASK_FOR_INPUT_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
ASK_FOR_INPUT_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$ASK_FOR_INPUT_NOTIFY_CLIENT_ICON}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="$*"
SHORTOPTS="c,v,h"
LONGOPTS="options,config,version,help"
ARRAY=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$ASK_FOR_INPUT_OPTIONS_DIR/options" ] || __list_options "$ASK_FOR_INPUT_OPTIONS_DIR" &>/dev/null
[ -f "$ASK_FOR_INPUT_OPTIONS_DIR/array" ] || __list_array "$ASK_FOR_INPUT_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE" ]; then
  . "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$ASK_FOR_INPUT_OPTIONS_DIR" "$ARRAY"
    __list_options "$ASK_FOR_INPUT_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${ASK_FOR_INPUT_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${ASK_FOR_INPUT_NOTIFY_CLIENT_ICON}"
if [ "$ASK_FOR_INPUT_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
message="$1"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
if cmd_exists zenity; then
  REPLY="$(zenity --entry --text "$message")"
elif cmd_exists gdialog; then
  REPLY="$(gdialog --erase-on-exit --stdout --inputbox "$message" 0 0)"
elif cmd_exists dialog; then
  REPLY="$(dialog --erase-on-exit --stdout --inputbox "$message" 0 0)"
else
  if [ -t 0 ]; then
    printf_read_input "4" "$message" "180" "REPLY" "-e"
  else
    myterminal -e ''$APPNAME' '$message''
  fi
fi
echo "$REPLY"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
