#!/usr/bin/env bash

APPNAME="mybluetooth"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 012920212145-git
# @Author        : Jason
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @Copyright     : Copyright (c) 2021, Casjays Developments
# @Created       : Friday Jan 29, 2021 21:45:36 EST
# @File          : mybluetooth
# @Description   : control bluetooth devices
# @Other         : work-in-progress
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set functions
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check for needed applications
cmd_exists bluetoothctl || printf_exit 1 1 "bluetoothctl is not installed"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set options
OPTIONS="$1" && shift 1

# Import existing config
export MYTERMINAL_NOTIFICATIONS="no"
if [ -f "$HOME/.config/mybluetooth/${1:-main}" ]; then
  printf_read_question "6" "I found a settings file for $1: Should I use that?" "1" YN "-s" || \
    printf_read_error "YN="y""
  if printf_answer_yes "$YN"; then
    . "$HOME/.config/mybluetooth/${1}"
  fi
fi

# Set device
[ -z $MY_BT_DEVICE ] && \
  MY_BT_DEVICE="$1" && shift 1 && echo "$1" | grep -q ':' || \
  MY_BT_DEVICE="${MY_BT_DEVICE:-0C:FC:83:99:BC:9A}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ok_msg() { printf_green "$1" && return 0; }
__fail_msg() { printf_exit "1" "1" "$ICON_ERROR $1"; }

__config() {
  local appname="${1:-settings}"
  printf_green "Generating the config file for ${1:-main}"
  __mkd "$HOME/.config/mybluetooth"
  echo '# Settings for mybluetooth - '${1:-main}'
CONFIGNAME="'${1:-main}'"
MY_BT_DEVICE="'${MY_BT_DEVICE}'"
' >"$HOME/.config/mybluetooth/$appname"
  if [ -f "$HOME/.config/mybluetooth/$appname" ]; then
    printf_green "File has been saved to"
    printf_green "$HOME/.config/mybluetooth/$appname"
  else
    printf_error "Failed to generate the file"
    return 1
  fi
  exit $?
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
case $OPTIONS in
config)
  shift 1
  [ "$1" = "--help" ] && printf_exit 3 0 "Usage: mybluetooth config name | IE: mybluetooth config speaker"
  __config "$@"
  exit $?
  ;;
*on | -*connect)
  shift 1
  bluetoothctl connect "$MY_BT_DEVICE" | grep -iq "Connection successful" >/dev/null 2>&1 &&
    __ok_msg "Connected" || __fail_msg "Connection failed"
  exit $?
  ;;

*off | *-disconnect)
  shift 1
  bluetoothctl disconnect "$MY_BT_DEVICE" | grep -iq "Successful disconnected" >/dev/null 2>&1 &&
    __ok_msg "Disconnected" || __fail_msg "Disconnection failed"
  exit $?
  ;;

*discover)
  shift 1
  case $1 in
  *on)
    shift 1
    bluetoothctl discoverable on | grep -iq "on succeeded" >/dev/null 2>&1 &&
      __ok_msg "Device is now in discoverable mode" || __fail_msg "Failed to initiate discovery mode"
    exit $?
    ;;

  *off)
    shift 1
    bluetoothctl discoverable off | grep -iq "off succeeded" >/dev/null 2>&1 &&
      __ok_msg "Device has ended discoverable mode" || __fail_msg "Failed to exit discovery mode"
    exit $?
    ;;
  esac
  ;;

add | pair)
  shift 1
  printf_yellow "Scanning for device"
  timeout 20 bluetoothctl scan on &>/dev/null
  bluetoothctl pair "$MY_BT_DEVICE" &>/dev/null &&
  bluetoothctl trust "$MY_BT_DEVICE" &>/dev/null &&
  printf_green "$MY_BT_DEVICE has been added"||
  printf_exit 1 1 "Failed to pair to $MY_BT_DEVICE"
  exit $?
  ;;

*status)
  shift 1
  printf_green "Bluetooth status"
  bluetoothctl info "$MY_BT_DEVICE" | printf_readline "4"
  exit $?
  ;;

remove | unpair)
  shift 1
  bluetoothctl remove "$MY_BT_DEVICE" | grep -q 'been removed' &&
    printf_green "$MY_BT_DEVICE has been removed"
  exit $?
  ;;

#search)
#  shift 1
#  bluetoothctl discover
#  ;;

*)
  shift
  printf_green "Available controller[s]"
  bluetoothctl list | printf_readline "4"
  printf_green "Bluetooth status"
  bluetoothctl info "$MY_BT_DEVICE" | printf_readline "4"
  printf_green "Paired devices"
  bluetoothctl paired-devices | printf_readline "4"
  exit
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
