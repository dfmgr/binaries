#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 012920210959-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : randomwallpaper
# @Created     : 08/18/2020
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : Set a random wallpaper
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main function
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -n "$WALLPAPERS" ] || printf_exit "No wallpaper directories specified"
[ -f "$HOME/.config/randomwallpaper/settings" ] && . "$HOME/.config/randomwallpaper/settings"
ROTATE_TIME="${ROTATE_TIME:-300}"

__config() {
  printf_green "Generating the config"
  __mkd "$HOME/.config/randomwallpaper"
  echo 'ROTATE_TIME='"${ROTATE_TIME:-300}"'' >"$HOME/.config/randomwallpaper/settings"
  printf_exit "2" "$?" "config should be in $HOME/.config/randomwallpaper/settings"
}

__startup() {
  printf_green "Adding the Notification Daemon to startup"
  cat <<EOF >"$HOME/.config/autostart/randomwallpaper.desktop"
#!/usr/bin/env xdg-open

[Desktop Entry]
Encoding=UTF-8
Version=0.9.4
Type=Application
Name=Wallpaper Changer
Icon=preferences-desktop-notification
Comment=Random Wallpaper
Exec=randomwallpaper --bg
RunHook=0
StartupNotify=false
Terminal=false
Hidden=false

EOF
  [ -f "$HOME/.config/autostart/randomwallpaper.desktop" ] &&
    printf_green "Successfully installed Notification Daemon" ||
    printf_error "Failed to install Notification Daemon"
  exit $?
}

background_job() {
  pid="$$"
  bpid="$!"
  pidfile="/tmp/randomwallpaper.$USER"
  sleeptime="${1:-$ROTATE_TIME}"
  __kill_proc() {
    kill -15 "$(cat /tmp/randomwallpaper.$USER)"
    rm -Rf "/tmp/randomwallpaper.$USER" && return 1
  }

  if [ -f "$HOME/.config/variety/variety.conf" ] &&
    grep '^change_enabled' "$HOME/.config/variety/variety.conf" 2>/dev/null | grep -iq True; then
    printf_error "Refusing to run: variety is already changing the wallpaper"
    return 1
  fi
  if [ -f "/tmp/randomwallpaper.$USER" ]; then
    kill -15 "$(cat "$pidfile" 2>/dev/null && sleep 3)" >/dev/null 2>&1
    rm -Rf "/tmp/randomwallpaper.$USER" 2>/dev/null
  fi
  shift 1
  notifications "Wallpaper Changer" "Enabling randomwallpaper background job: Changing every $sleeptime"
  trap 'rm -Rf /tmp/randomwallpaper.$USER' EXIT
  while :; do
    randomwallpaper "${1:-$RANDOMWALLPAPER}"
    echo "$pid" >"/tmp/randomwallpaper.$USER"
    sleep "$sleeptime" || __kill_proc
  done &
  bpid="$!"
  echo $bpid >>/tmp/randomwallpaper.$USER
}

__term() {
  while :; do
    # show menu
    clear
    shift 1
    printf_newline "\n\n\n\n"
    printf_head "Random Wall Paper Menu"
    printf_green "b. Change the wallpaper every 5 minutes"
    printf_green "y. change the wallpaper"
    printf_green "z. or escape to Exit"
    printf_green "---------------------------------"
    printf_read_question_nt "6" "Enter your choice [y-z] : " "1" "main" "-s"
    case "$main" in
    $'\E' | $'\e' | z | x | n)
      clear
      break
      ;;
    b)
      background_job "${ROTATE_TIME}"
      ;;
    *)
      randomwallpaper
      ;;
    esac
    printf_counter "5" "3" "Re-loading menu in"
  done
  clear
}

randomwallpaper() {
  if [ -d /usr/share/backgrounds ]; then
    for l in $(ls /usr/share/backgrounds); do
      [ -e "$WALLPAPERS/system/$l" ] || __ln_sf "/usr/share/backgrounds/$l" "$WALLPAPERS/system/$l"
    done
  fi
  if [ -d /usr/share/wallpapers ]; then
    for l in $(ls /usr/share/wallpapers); do
      [ -e "$WALLPAPERS/system/$l" ] || __ln_sf "/usr/share/wallpapers/$l" "$WALLPAPERS/system/$l"
    done
  fi

  send_notify_wp() {
    if command -v notifications >/dev/null 2>&1; then
      notifications "Wallpaper Changer" "Wallpaper has been changed to $SHORTNAME" || notifications "Wallpaper Changer" "Failed to change the wallpaper"
    fi
  }

  xfce_change_wp() {
    xfconf-query --channel xfce4-desktop --list | grep last-image | while read path; do
      xfconf-query --channel xfce4-desktop --property "$path" --set "$1"
    done
  }

  [ -n "$RAND" ] || exit 1
  if __cmd_exists variety >/dev/null 2>&1; then
    variety --set="$RAND" >/dev/null 2>&1 && send_notify_wp &

  elif __cmd_exists feh >/dev/null 2>&1; then
    feh --bg-fill "$RAND" >/dev/null 2>&1 && send_notify_wp

  elif __cmd_exists xwallpaper >/dev/null 2>&1; then
    xwallpaper --maximize "$RAND" >/dev/null 2>&1 && send_notify_wp

  elif __cmd_exists xfconf-query >/dev/null 2>&1 && [[ "$DESKTOP_SESSION" =~ "xfce4" ]]; then
    xfce_change_wp "$RAND" >/dev/null 2>&1 && send_notify_wp

  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# variables
if [ -f "$1" ]; then
  RANDOMWALLPAPER="$1"
  shift 1
elif [ -d "$1" ]; then
  RANDOMWALLPAPER="$(find -L "$1" -type f -iname "*.jpg" -or -iname "*.jpeg" -or -iname "*.png" -or -iname "*.tif" -or -iname "*.bmp" -or -iname "*.gif" -not -path "*/.git/*" | sort -R | tail -n 1)"
  shift 1
else
  SETRANDOM="$(find -L "$WALLPAPERS" -type f -iname "*.jpg" -or -iname "*.jpeg" -or -iname "*.png" -or -iname "*.tif" -or -iname "*.bmp" -or -iname "*.gif" -not -path "*/.git/*" | sort -R | tail -n 1)"
fi

RANDOMWALLPAPER="${RANDOMWALLPAPER:-$SETRANDOM}"
RAND="${RANDOMWALLPAPER}"
SHORTNAME="$(echo "${RAND/$WALLPAPERS/}" | sed 's#^/##g')"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# execute application
case $1 in
config)
  shift 1
  __config
  ;;
startup)
  shift 1
  __startup
  ;;
--term)
  shift 1
  __term
  ;;
--bg)
  shift 1
  background_job "${ROTATE_TIME}" "$@"
  ;;
*)
  randomwallpaper "$@"
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
