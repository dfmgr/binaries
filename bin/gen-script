#!/usr/bin/env bash

APPNAME="gen-script"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 020120210023-git
# @Author        : Jason
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @Copyright     : Copyright (c) 2021, Casjays Developments
# @Created       : Monday Feb 01, 2021 00:23:58 EST
# @File          : gen-script
# @Description   : create scripts
# @TODO          :
# @Other         :
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# I'm sure there is a better way to do this
if [ -d "$1" ]; then
  MYCURRDIR="$1"
  shift 1
elif [ "$1" = "-d" ] || [ "$1" = "-dir" ] || [ "$1" = "--dir" ]; then
  MYCURRDIR="$2"
  shift 2
  [ -d "$MYCURRDIR" ] || printf_exit "$MYCURRDIR doesn't seem to be a directory"
else
  MYCURRDIR="$PWD"
fi
if [ "$1" = "--skip" ]; then OVERWRITE="Y" && OPENEDIT="N" && shift 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# default variables
topdir="$(__git_top_dir "$MYCURRDIR" || echo $MYCURRDIR 2>/dev/null)"
GEN_SCRIPTS_YEAR="$(date +%Y 2>/dev/null)"
GEN_SCRIPTS_EMAIL="${USER}"
GEN_SCRIPTS_AUTHOR="${USER}"
GEN_SCRIPTS_COMPANY="${USER}"
GEN_SCRIPTS_VERSION="%m%d%Y%H%M-git"
GEN_SCRIPTS_DEFREADME="README"
GEN_SCRIPTS_DEFLICENSE="WTFPL"
GEN_SCRIPTS_DATEFMT="%A, %b %d, %Y %H:%M %Z"
GEN_SCRIPTS_COPYRIGHT="Copyright: (c) $GEN_SCRIPTS_YEAR $GEN_SCRIPTS_AUTHOR, $GEN_SCRIPTS_COMPANY"
GEN_SCRIPTS_CURRENT_DIR="$MYCURRDIR"

if [ -d "$HOME/.config/gen-script/files" ]; then
  GEN_SCRIPTS_TEMPLATE_DIR="$HOME/.config/gen-script/files"
else
  GEN_SCRIPTS_TEMPLATE_DIR="${GEN_SCRIPTS_TEMPLATE_DIR:-$CASJAYSDEVDIR/templates/scripts}"
fi
[ -f "$HOME/.config/gen-script/settings" ] && . "$HOME/.config/gen-script/settings"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application functions
__date() { date +"$1"; }
__filename() { basename "$1"; }

# Set up options
__header_opts() {
  local t=$(getopt -o h,d:,t:,c:,o:,r:,f: --long help,desc:,todo:,copy:,other:,res:,funct*: -n "$APPNAME" -- "$@")
  eval set -- "$t"
  while :; do
    case "$1" in
    -h | --help)
      __gen_header_help
      ;;
    -d | --desc)
      shift
      desc="$1"
      ;;
    -t | --todo)
      shift
      todo="$1"
      ;;
    -c | --copy)
      shift
      GEN_SCRIPTS_COPYRIGHT="$1"
      ;;
    -o | --other)
      shift
      other="$1"
      ;;
    -r | --res)
      shift
      res="$1"
      ;;
    -f | --funct*)
      shift
      showFunctions=true
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
    esac
    shift
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

__config() {
  printf_green "Generating the config and saving it to:"
  printf_cyan "$HOME/.config/gen-script/settings"
  __rm_rf "$HOME/.config/gen-script/settings"
  cat <<EOF >>"$HOME/.config/gen-script/settings"
GEN_SCRIPTS_EMAIL="${GEN_SCRIPTS_EMAIL}"
GEN_SCRIPTS_AUTHOR="${GEN_SCRIPTS_AUTHOR}"
GEN_SCRIPTS_COMPANY="${GEN_SCRIPTS_COMPANY}"
GEN_SCRIPTS_VERSION="%m%d%Y%H%M-git"
GEN_SCRIPTS_DEFREADME="README"
GEN_SCRIPTS_DEFLICENSE="WTFPL"
GEN_SCRIPTS_DATEFMT="%A, %b %d, %Y %H:%M %Z"
GEN_SCRIPTS_TEMPLATE_DIR="${GEN_SCRIPTS_TEMPLATE_DIR}"
GEN_SCRIPTS_COPYRIGHT="Copyright: (c) $GEN_SCRIPTS_YEAR $GEN_SCRIPTS_AUTHOR, $GEN_SCRIPTS_COMPANY"

EOF
  [ $? = 0 ] && printf_green "Settings have been saved" || printf_error "Failed to save the settings"
}

__copy_templates() {
  printf_green "Copying the files from:"
  printf_green "$CASJAYSDEVDIR/templates/scripts to $HOME/.config/gen-script/files/"
  __cp_rf "$CASJAYSDEVDIR/templates/scripts/." "$HOME/.config/gen-script/files/"
  [ $? -eq 0 ] && [ -d "$HOME/.config/gen-script/files" ] && printf_green "Copy succeeded" || printf_red "Copy failed"
}

__makefile() {
  local temp="$1"
  local new="$2"
  __cp_rf "$temp" "$new" || return 1
  __edit_header "$new" || return 1
  chmod -f 755 "$new" || return 1
  [ $? -ne 0 ] && printf_red "Failed to create $new" && return 1 || printf_green "Your file has been created"
  return $?
}

__edit_header() {
  local GEN_SCRIPTS_NEWFILE="$1"
  [ -f "$GEN_SCRIPTS_NEWFILE" ] && printf_green "Editing the header info" || printf_exit 1 1 "Failed to created the file"
  sed -i 's#Copyright (c) REPLACE_YEAR.*#'"${GEN_SCRIPTS_COPYRIGHT}"'#g' "$GEN_SCRIPTS_NEWFILE"
  sed -i 's#REPLACE_VERSION#'"$(__date "${GEN_SCRIPTS_VERSION}" 2>/dev/null)"'#g' "$GEN_SCRIPTS_NEWFILE" 2>/dev/null
  sed -i 's#REPLACE_FILENAME#'"$(__filename "$GEN_SCRIPTS_NEWFILE" 2>/dev/null)"'#g' "$GEN_SCRIPTS_NEWFILE" 2>/dev/null
  sed -i 's#REPLACE_VERSION#'"$(__date "${GEN_SCRIPTS_VERSION}" 2>/dev/null)"'#g' "$GEN_SCRIPTS_NEWFILE" 2>/dev/null
  sed -i 's#REPLACE_DATE#'"$(__date "${GEN_SCRIPTS_DATEFMT}" 2>/dev/null)"'#g' "$GEN_SCRIPTS_NEWFILE" 2>/dev/null
  sed -i 's#REPLACE_LICENSE#'"${GEN_SCRIPTS_DEFLICENSE}"'#g' "$GEN_SCRIPTS_NEWFILE" 2>/dev/null
  sed -i 's#REPLACE_AUTHOR#'"${GEN_SCRIPTS_AUTHOR}"'#g' "$GEN_SCRIPTS_NEWFILE" #2>/dev/null
  sed -i 's#REPLACE_EMAIL#'"${GEN_SCRIPTS_EMAIL}"'#g' "$GEN_SCRIPTS_NEWFILE" 2>/dev/null
  sed -i 's#REPLACE_YEAR#'"${GEN_SCRIPTS_YEAR}"'#g' "$GEN_SCRIPTS_NEWFILE" 2>/dev/null
  return $?
}

__gen_header_help() {
  printf_blue "-d: Description"
  printf_blue "-t: TODO"
  printf_blue "-c: Copyright"
  printf_blue "-o: Other"
  printf_blue "-r: Resources"
  printf_blue "-f: Include functions"
  printf_blue 'IE: gen-script header filename -d "My Descr" -c "My Copy" -t "My TODO" -o "OTHER" -r "RESOURCE"'
  exit 0
}
__gen_header() {
  local GEN_SCRIPTS_DEFREADME="$1 --help"
  local GEN_SCRIPTS_NEWFILE="$1" && shift 1
  __header_opts "$@"
  [ -n "$desc" ] || printf_yellow "Description: ${desc:-None provided}"
  [ -n "$todo" ] || printf_yellow "TODO: ${todo:-None provided}"

  echo '
#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="'"$(__filename $GEN_SCRIPTS_NEWFILE 2>/dev/null)"'"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts'

  cat <<EOF | tee
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : $(__date "${GEN_SCRIPTS_VERSION}" 2>/dev/null)
# @Author        : ${GEN_SCRIPTS_AUTHOR}
# @Contact       : ${GEN_SCRIPTS_EMAIL}
# @License       : ${GEN_SCRIPTS_DEFLICENSE}
# @ReadME        : ${GEN_SCRIPTS_DEFREADME}
# @Copyright     : ${GEN_SCRIPTS_COPYRIGHT}
# @Created       : $(__date "${GEN_SCRIPTS_DATEFMT}" 2>/dev/null)
# @File          : $(__filename $GEN_SCRIPTS_NEWFILE 2>/dev/null)
# @Description   : ${desc:-}
# @TODO          : ${todo:-}
# @Other         : ${other:-}
# @Resource      : ${res:-}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
EOF
  if [ "$showFunctions" = true ]; then __gen_functions; else printf_newline "\n\n"; fi
  printf_blue "Your header is ready for use\n\n"
}

__gen_functions() {
  echo '# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$HOME/.config/gen-script" ] && __rm_rf "$HOME/.config/gen-script" || __mkd "$HOME/.config/gen-script"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set vars base on files
[ -f "$topdir/README.md" ] && GEN_SCRIPTS_DEFREADME="$GEN_SCRIPTS_DEFREADME.md" || GEN_SCRIPTS_DEFREADME="$(basename "$1" 2>/dev/null) --help"
[ -f "$topdir/LICENSE.md" ] && GEN_SCRIPTS_DEFLICENSE="$GEN_SCRIPTS_DEFLICENSE.md" || GEN_SCRIPTS_DEFLICENSE="$GEN_SCRIPTS_DEFLICENSE"
[ -f "$topdir/version.txt" ] && GEN_SCRIPTS_VERSION="$(cat $topdir/version.txt 2>/dev/null)" || GEN_SCRIPTS_VERSION="$GEN_SCRIPTS_VERSION"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
case "$1" in
*config)
  shift 1
  __config
  exit
  ;;
*funct*)
  shift 1
  [ $# -lt 2 ] || printf_exit "Only takes a filename as an argument"
  printf_green "New functions info for ${1:-template}"
  __gen_functions ${1:-template}
  printf_green "End of functions"
  exit
  ;;

*header)
  shift 1
  #[[ $1 = *funct* ]] && showFunctions=true && shift 1
  [[ $1 != -* ]] && filename="$1" && shift 1 || filename="template"
  printf_green "New header info for $filename"
  __gen_header "$filename" "$@"
  exit
  ;;

*installers)
  case "$2" in
  *)
    if [ -f "${GEN_SCRIPTS_TEMPLATE_DIR}/installers/$2" ]; then
      template="${GEN_SCRIPTS_TEMPLATE_DIR}/installers/$2"
      dest="$3"
    fi
    ;;
  esac
  shift
  ;;

*os)
  case "$2" in
  *) ## Allows drop in without need to update this
    if [ -f "${GEN_SCRIPTS_TEMPLATE_DIR}/os/$2" ]; then
      template="${GEN_SCRIPTS_TEMPLATE_DIR}/os/$2"
      dest="$3"
    fi
    ;;
  esac
  shift
  ;;

*shell)
  case "$2" in
  *) ## Allows drop in without need to update this
    if [ -f "${GEN_SCRIPTS_TEMPLATE_DIR}/shell/$2" ]; then
      template="${GEN_SCRIPTS_TEMPLATE_DIR}/shell/$2"
      dest="$3"
    fi
    ;;
  esac
  shift
  ;;

*) ## Allows drop in without need to update this
  if [ -f "${GEN_SCRIPTS_TEMPLATE_DIR}/$1/$2" ]; then
    template="${GEN_SCRIPTS_TEMPLATE_DIR}/$2"
    dest="$3"
  elif [ -f "${GEN_SCRIPTS_TEMPLATE_DIR}/$1" ]; then
    template="${GEN_SCRIPTS_TEMPLATE_DIR}/$1"
    dest="$2"
  else
    printf_green "Using the default bash template"
    template="${GEN_SCRIPTS_TEMPLATE_DIR}/shell/bash"
    dest="$1"
  fi
  ;;
esac
shift

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Sanity check
[ -f "$template" ] || printf_exit "The template file doesn't exist"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# file and folder setup
filename="$(__basename ${dest:-newScript} 2>/dev/null)"
destfolder="$(__basedir $GEN_SCRIPTS_CURRENT_DIR/$filename 2>/dev/null)"
# # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate the file
if [ "$filename" = "newScript" ]; then
  printf_read_question "3" "What should we name this ?" "120" "tmpfilename" || tmpfilename="$filename"
  tmpfilename="$tmpfilename"
else
  tmpfilename="$filename"
fi
filename=${tmpfilename// /_}
if [ -f "$destfolder/$filename" ] && [ -z "$OVERWRITE" ]; then
  printf_read_question "3" "Should we overwrite this file?" "1" "YN" "-s"
  printf_answer_yes "$YN" || exit 1
fi
printf_green "Copying the file ${template//$GEN_SCRIPTS_TEMPLATE_DIR\//} to $destfolder/$filename"
__makefile "${template:?}" "$destfolder/$filename" || printf_exit 1 1 "Failed to create $destfolder/$filename"
[ -n "$OPENEDIT" ] || printf_read_question "3" "Should we edit this file?" "1" "EDIT" "-s"
printf_answer_yes "$EDIT" && $EDITOR "$destfolder/$filename"
printf_newline ""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
