#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202104010423-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap '[ -f "$VIDEOS_TMP_FILE" ] && rm -Rf "$VIDEOS_TMP_FILE" &>/dev/null' EXIT

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202104010423-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : videos --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Thursday, Apr 01, 2021 04:23 EDT
# @File          : videos
# @Description   : play videos
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$VIDEOS_CONFIG_DIR/$VIDEOS_CONFIG_FILE"
  [ -d "$VIDEOS_CONFIG_DIR" ] || mkdir -p "$VIDEOS_CONFIG_DIR"
  [ -d "$VIDEOS_CONFIG_BACKUP_DIR" ] || mkdir -p "$VIDEOS_CONFIG_BACKUP_DIR"
  [ -f "$VIDEOS_CONFIG_DIR/$VIDEOS_CONFIG_FILE" ] &&
    cp -Rf "$VIDEOS_CONFIG_DIR/$VIDEOS_CONFIG_FILE" "$VIDEOS_CONFIG_DIR/$VIDEOS_CONFIG_FILE.$$"
  cat <<EOF >"$VIDEOS_CONFIG_DIR/$VIDEOS_CONFIG_FILE"
# Settings for videos
# There isn't any options yet

EOF
  if [ -f "$VIDEOS_CONFIG_DIR/$VIDEOS_CONFIG_FILE" ]; then
    printf_green "Your config file for videos has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
VIDEOS_CONFIG_FILE="settings.conf"
VIDEOS_CONFIG_DIR="$HOME/.config/myscripts/videos"
VIDEOS_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/videos/backups"
VIDEOS_OPTIONS_DIR="$HOME/.local/share/myscripts/videos/options"
VIDEOS_TEMP_FILE="${TMPDIR:-/tmp}/videos"
VIDEOS_NOTIFY_ENABLED="yes"
VIDEOS_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
VIDEOS_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$VIDEOS_NOTIFY_CLIENT_ICON}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="${*}"
SHORTOPTS="c,v,h"
LONGOPTS="options,config,version,help"
ARRAY="show-none"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$VIDEOS_CONFIG_DIR/$VIDEOS_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$VIDEOS_OPTIONS_DIR/options" ] || __list_options "$VIDEOS_OPTIONS_DIR" &>/dev/null
[ -f "$VIDEOS_OPTIONS_DIR/array" ] || __list_array "$VIDEOS_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$VIDEOS_CONFIG_DIR/$VIDEOS_CONFIG_FILE" ]; then
  . "$VIDEOS_CONFIG_DIR/$VIDEOS_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$PROG" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$VIDEOS_OPTIONS_DIR" "$ARRAY"
    __list_options "$VIDEOS_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${VIDEOS_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${VIDEOS_NOTIFY_CLIENT_ICON}"
if [ "$VIDEOS_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
if [ -z "$DISPLAY" ]; then printf_exit "No display server found.......exiting $(sleep 2)"; fi
xine-ui() { xine || xine-ui || false; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
while :; do
  # show menu
  main=""
  clear
  shift 1
  printf_newline "\n\n\n\n"
  printf_head "Video applications Menu"
  printf_green "a. launch vlc"
  printf_green "b. launch mpv"
  printf_green "c. launch mplayer"
  printf_green "d. launch smtube"
  printf_green "e. launch smplayer"
  printf_green "f. launch xine-ui"
  printf_green "g. launch banshee"
  printf_green "h. launch bomi"
  printf_green "i. launch dragonplayer"
  printf_green "j. launch snappy"
  printf_green "k. launch celluloid"
  printf_green "l. launch parole"
  printf_green "m. launch xmbc"
  printf_green "n. launch kodi"
  printf_green "o. launch totem"
  printf_green "p. launch miro"
  printf_green "q. launch asciinema"
  printf_green "y. launch custom application"
  printf_green "z. or escape to Exit"
  printf_green "---------------------------------"
  printf_read_question_nt "6" "Enter your choice [a-z] : " "1" "main" "-s"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  case "$main" in

  a)
    shift 1
    __open_file_menus vlc "$@"
    ;;
  b)
    shift 1
    __open_file_menus mpv "$@"
    ;;
  c)
    shift 1
    __open_file_menus mplayer "$@"
    ;;
  d)
    shift 1
    __open_file_menus smtube "$@"
    ;;
  e)
    shift 1
    __open_file_menus smplayer "$@"
    ;;
  f)
    shift 1
    __open_file_menus xine-ui "$@"
    ;;
  g)
    shift 1
    __open_file_menus banshee "$@"
    ;;
  h)
    shift 1
    __open_file_menus bomi "$@"
    ;;
  i)
    shift 1
    __open_file_menus dragonplayer "$@"
    ;;
  j)
    shift 1
    __open_file_menus snappy "$@"
    ;;
  k)
    shift 1
    __open_file_menus celluloid "$@"
    ;;
  l)
    shift 1
    __open_file_menus parole "$@"
    ;;
  m)
    shift 1
    __open_file_menus xmbc "$@"
    ;;
  n)
    shift 1
    __open_file_menus kodi "$@"
    ;;
  o)
    shift 1
    __open_file_menus totem "$@"
    ;;
  p)
    shift 1
    __open_file_menus miro "$@"
    ;;
  q)
    shift 1
    __open_file_menus asciinema play "$@"
    ;;
  y)
    shift 1
    __custom_menus
    continue
    ;;
  $'\E' | $'\e' | z)
    clear
    break
    ;;
  *) shift ;;
  esac
  clear
  printf_newline "\n\n"
  printf_counter "5" "3" "Re-loading menu in"
done
clear
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
