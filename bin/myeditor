#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202104040050-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap 'exitCode=$?;[ -f "$MYEDITOR_TEMP_FILE" ] && rm -Rf "$MYEDITOR_TEMP_FILE" &>/dev/null' EXIT

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202104040050-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : myeditor --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Sunday, Apr 04, 2021 00:50 EDT
# @File          : myeditor
# @Description   : Open up text editor
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$MYEDITOR_CONFIG_DIR/$MYEDITOR_CONFIG_FILE"
  [ -d "$MYEDITOR_CONFIG_DIR" ] || mkdir -p "$MYEDITOR_CONFIG_DIR"
  [ -d "$MYEDITOR_CONFIG_BACKUP_DIR" ] || mkdir -p "$MYEDITOR_CONFIG_BACKUP_DIR"
  [ -f "$MYEDITOR_CONFIG_DIR/$MYEDITOR_CONFIG_FILE" ] &&
    cp -Rf "$MYEDITOR_CONFIG_DIR/$MYEDITOR_CONFIG_FILE" "$MYEDITOR_CONFIG_BACKUP_DIR/$MYEDITOR_CONFIG_FILE.$$"
  cat <<EOF >"$MYEDITOR_CONFIG_DIR/$MYEDITOR_CONFIG_FILE"
# Settings for myeditor
MYEDITOR_NAME="config"
MYEDITOR="$MYEDITOR"
MYEDITOR_OPTIONS=""
MYEDITOR_CONSOLE="$MYEDITOR_CONSOLE"
MYEDITOR_TEMP_FILE="${TMPDIR:-/tmp}/myeditor"
MYEDITOR_NOTIFY_ENABLED="yes"
MYEDITOR_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
MYEDITOR_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$MYEDITOR_NOTIFY_CLIENT_ICON}"

EOF
  if [ -f "$MYEDITOR_CONFIG_DIR/$MYEDITOR_CONFIG_FILE" ]; then
    printf_green "Your config file for myeditor has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_term() {
  cat <<EOF | tee
  #!/usr/bin/env sh
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202104040050-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : myeditor --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Sunday, Apr 04, 2021 00:50 EDT
# @File          : myeditor
# @Description   : Setup $EDITOR
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ ! -t 0 ]; then
  myterminal -e "$EDITOR \$MYEDITOR_OPTIONS \$*"
else
  $EDITOR \$MYEDITOR_OPTIONS \$*
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}

EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_link() {
  if [ -n "$2" ]; then
    shift 1
    if cmd_exists "$1"; then
      if [ "$MYEDITOR_CONSOLE" = "yes" ]; then
        printf_green "Generating the script for $EDITOR"
        __create_term >"$HOME/.local/bin/myeditor"
      fi
      printf_green "Linking $HOME/.local/bin/myeditor to $1"
      __ln_sf "$(command -v $1)" "$HOME/.local/bin/myeditor"
    else
      printf_green "Linking $HOME/.local/bin/myeditor to $EDITOR"
      __ln_sf "$EDITOR" "$HOME/.local/bin/myeditor"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
MYEDITOR_CONFIG_FILE="settings.conf"
MYEDITOR_CONFIG_DIR="$HOME/.config/myscripts/myeditor"
MYEDITOR_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/myeditor/backups"
MYEDITOR_OPTIONS_DIR="$HOME/.local/share/myscripts/myeditor/options"
MYEDITOR_TEMP_FILE="${TMPDIR:-/tmp}/myeditor"
MYEDITOR_NOTIFY_ENABLED="yes"
MYEDITOR_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
MYEDITOR_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$MYEDITOR_NOTIFY_CLIENT_ICON}"
MYEDITOR_CONSOLE="${MYEDITOR_CONSOLE}"
MYEDITOR="${MYEDITOR}"
MYEDITOR_OPTIONS="${MYEDITOR_OPTIONS}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="${*}"
SHORTOPTS="c,v,h,l:"
LONGOPTS="options,config,version,help,link:"
ARRAY=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$MYEDITOR_CONFIG_DIR/$MYEDITOR_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$MYEDITOR_OPTIONS_DIR/options" ] || __list_options "$MYEDITOR_OPTIONS_DIR" &>/dev/null
[ -f "$MYEDITOR_OPTIONS_DIR/array" ] || __list_array "$MYEDITOR_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$MYEDITOR_CONFIG_DIR/$MYEDITOR_CONFIG_FILE" ]; then
  . "$MYEDITOR_CONFIG_DIR/$MYEDITOR_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Locate an editor
[ "$MYEDITOR" != "myeditor" ] || unset MYEDITOR
if [ "$MYEDITOR_NAME" != "config" ] || [ -z "$MYEDITOR" ]; then
  if [ -f "$(command -v code 2>/dev/null)" ]; then
    MYEDITOR="code"
  elif [ -f "$(command -v vscode 2>/dev/null)" ]; then
    MYEDITOR="vscode"
  elif [ -f "$(command -v geany 2>/dev/null)" ]; then
    MYEDITOR="geany"
  elif [ -f "$(command -v gedit 2>/dev/null)" ]; then
    MYEDITOR="gedit"
  elif [ -f "$(command -v atom 2>/dev/null)" ]; then
    MYEDITOR="atom"
  elif [ -f "$(command -v brackets 2>/dev/null)" ]; then
    MYEDITOR="brackets"
  elif [ -f "$(command -v emacs 2>/dev/null)" ]; then
    MYEDITOR="emacs"
  elif [ -f "$(command -v mousepad 2>/dev/null)" ]; then
    MYEDITOR="mousepad"
  fi
  if [ -z "$DISPLAY" ]; then
    if [ -f "$(command -v vim 2>/dev/null)" ]; then
      MYEDITOR="vim"
    elif [ -f "$(command -v nvim 2>/dev/null)" ]; then
      MYEDITOR="nvim"
    elif [ -f "$(command -v emacs 2>/dev/null)" ]; then
      MYEDITOR="emacs"
    elif [ -f "$(command -v nano 2>/dev/null)" ]; then
      MYEDITOR="nano"
    fi
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MYEDITOR_NAME="$(basename "$MYEDITOR" 2>/dev/null)"
export EDITOR="$MYEDITOR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case $MYEDITOR_NAME in
nano | vim | emacs | nvim)
  MYEDITOR_CONSOLE="yes"
  ;;
code | vscode)
  MYEDITOR_OPTIONS="-w"
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$PROG" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$MYEDITOR_OPTIONS_DIR" "$ARRAY"
    __list_options "$MYEDITOR_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  -l | --link)
    shift 1
    __create_link "${1:-$EDITOR}"
    shift 1
    exit $?
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${MYEDITOR_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${MYEDITOR_NOTIFY_CLIENT_ICON}"
if [ "$MYEDITOR_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
if [ -z "$MYEDITOR" ]; then
  __notifications "No editors are installed"
  printf_newline "\n\n\n"
  printf_red "No editors are installed"
  printf_pause 1 "Press any key to exit this window"
  exit
fi
ARGS="$*"
OPEN="$MYEDITOR_OPTIONS $ARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
__notifications "Attempting to launch $MYEDITOR_NAME"
if [ -f "$HOME/.local/bin/myeditor" ]; then
  __exec "$HOME/.local/bin/myeditor" "$@"
elif [ "$MYEDITOR_CONSOLE" = "yes" ]; then
  if [ ! -t 0 ]; then
    myterminal -e "$EDITOR $OPEN"
  else
    $EDITOR $OPEN
  fi
else
  __exec $EDITOR $OPEN
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
