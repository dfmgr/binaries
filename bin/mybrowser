#!/usr/bin/env bash

PATH="$PATH:/usr/sbin"
APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 010920210727-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : mybrowser
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : setup browser
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$HOME/.config/mybrowser/settings" ] && . "$HOME/.config/mybrowser/settings"
MYBROWSER_NOTIFICATIONS="${MYBROWSER_NOTIFICATIONS:-yes}"

__config() {
  printf_green "Generating config file"
  __mkd "$HOME/.config/mybrowser"
  echo -e '# Settings for mybrowser
MYBROWSER="config"
BROWSER="'$BROWSER'"
MYBROWSER_NOTIFICATIONS="'$MYBROWSER_NOTIFICATIONS'"
  ' >"$HOME/.config/mybrowser/settings"
  if [ -f "$HOME/.config/mybrowser/settings" ]; then
    printf_green "File saved to: $HOME/.config/mybrowser/settings"
    [ -n "$MYBROWSER_NOTIFICATIONS" ] && notifications "MyBrowser" "Config file saved to:\n$HOME/.config/mybrowser/settings"
  fi
  exit
}

__create_link() {
  case "$1" in
  *)
    if [ ! -z "$2" ]; then
      shift 1
      if __cmd_exists "$1"; then
        printf_green "Linking $HOME/.local/bin/mybrowser to $1"
        __ln_sf "$(command -v $1)" "$HOME/.local/bin/mybrowser"
        exit 0
      else
        printf_green "Linking $HOME/.local/bin/mybrowser to $BROWSER"
        __ln_sf "$BROWSER" "$HOME/.local/bin/mybrowser"
        exit 0
      fi
    fi
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$MYBROWSER" != "config" ]; then
  if [ -n "$(command -v garcon-url-handler 2>/dev/null)" ]; then
    export BROWSER="garcon-url-handler --url"
  elif [ -n "$(command -v firefox 2>/dev/null)" ]; then
    export BROWSER="firefox"
  elif [ -n "$(command -v chromium 2>/dev/null)" ]; then
    export BROWSER="chromium"
  elif [ -n "$(command -v google-chrome 2>/dev/null)" ]; then
    export BROWSER="google-chrome"
  elif [ -n "$(command -v opera 2>/dev/null)" ]; then
    export BROWSER="opera"
  elif [ -n "$(command -v epiphany-browser 2>/dev/null)" ]; then
    export BROWSER="epiphany-browser"
  elif [ -n "$(command -v falkon 2>/dev/null)" ]; then
    export BROWSER="falkon"
  elif [ -n "$(command -v midori 2>/dev/null)" ]; then
    export BROWSER="midori"
  elif [ -n "$(command -v netsurf 2>/dev/null)" ]; then
    export BROWSER="netsurf"
  elif [ -n "$(command -v surf 2>/dev/null)" ]; then
    export BROWSER="surf"
  elif [ -n "$(command -v arora 2>/dev/null)" ]; then
    export BROWSER="arora"
  elif [ -f '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome' ]; then
    export BROWSER='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
  elif [ -f '/Applications/Firefox.app/Contents/MacOS/firefox-bin' ]; then
    export BROWSER='/Applications/Firefox.app/Contents/MacOS/firefox-bin'
  elif [ -f '/Applications/Opera.app/Contents/MacOS/Opera' ]; then
    export BROWSER='/Applications/Opera.app/Contents/MacOS/Opera'
  elif [ -f '/Applications/Brave\ Browser.app/Contents/MacOS/Brave\ Browser' ]; then
    export BROWSER='/Applications/Brave\ Browser.app/Contents/MacOS/Brave\ Browser'
  elif [ -f '/Applications/Tor\ Browser.app/Contents/MacOS/firefox' ]; then
    export BROWSER='/Applications/Tor Browser.app/Contents/MacOS/firefox'
  elif [ -f "$(command -v lynx 2>/dev/null)" ]; then
    export BROWSER="lynx"
  elif [ -f "$(command -v links 2>/dev/null)" ]; then
    export BROWSER="links"
  fi
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -z "$BROWSER" ]; then
  [ "$MYBROWSER_NOTIFICATIONS" = "yes" ] && notifications "MyBrowser" "No Browsers are installed"
  printf_exit 1 1 "No Browsers are installed"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case $1 in
*config)
  shift 1
  __config
  ;;

*create | *link)
  shift 1
  __create_link "$@"
  ;;

*)
  [ "$MYBROWSER_NOTIFICATIONS" = "yes" ] && notifications "MyBrowser" "Attempting to launch $BROWSER"
  if [ -f "$HOME/.local/bin/mybrowser" ]; then
    __devnull2 "$HOME/.local/bin/mybrowser" "$@"
  else
    devnull2 $BROWSER "$@"
  fi
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
