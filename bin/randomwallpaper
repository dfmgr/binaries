#!/usr/bin/env bash

APPNAME="$(basename $0)"
APPDIR="$(dirname $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 022420211808-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : randomwallpaper
# @Created     : 08/18/2020
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : Set a random wallpaper
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Init
WALLPAPERS="${WALLPAPERS:-$HOME/.local/share/wallpapers/system}"
[ -d "$WALLPAPERS/system " ] || __mkd "$WALLPAPERS/system"
if [ -d /usr/share/backgrounds ]; then
  for l in $(ls /usr/share/backgrounds); do
    [ -e "$WALLPAPERS/system/$l" ] || __ln_sf "/usr/share/backgrounds/$l" "$WALLPAPERS/system/$l"
  done
fi
if [ -d /usr/share/wallpapers ]; then
  for l in $(ls /usr/share/wallpapers); do
    [ -e "$WALLPAPERS/system/$l" ] || __ln_sf "/usr/share/wallpapers/$l" "$WALLPAPERS/system/$l"
  done
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# variables
if [ -f "$1" ]; then
  RANDOMWALLPAPER="$1"
  shift 1
elif [ -d "$1" ]; then
  RANDOMWALLPAPER="$(find -L "$1" -type f -iname "*.jpg" -or -iname "*.jpeg" -or -iname "*.png" -or -iname "*.tif" -or -iname "*.bmp" -or -iname "*.gif" -not -path "*/.git/*" | sort -R | tail -n 1)"
  shift 1
else
  RANDOMDIR="$(find -L $WALLPAPERS -maxdepth 1 -type d | sort -R | head -n1)"
  SETRANDOM="$(find -L "$RANDOMDIR" -type f -iname "*.jpg" -or -iname "*.jpeg" -or -iname "*.png" -or -iname "*.tif" -or -iname "*.bmp" -or -iname "*.gif" -not -path "*/.git/*" | sort -R | tail -n 1)"
fi

RANDOMWALLPAPER="${RANDOMWALLPAPER:-$SETRANDOM}"
RAND="${RANDOMWALLPAPER}"
SHORTNAME="$(echo "${RAND/$WALLPAPERS/}" | sed 's#^/##g')"

ROTATE_TIME="${ROTATE_TIME:-300}"
KILL_FILE="${TMP_DIR:-/tmp}/randomwallpaper.$USER.kill"
RUN_FILE="${TMP_DIR:-/tmp}/randomwallpaper.$USER"
NOTIFICATIONS="${NOTIFICATIONS:-enabled}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$HOME/.config/randomwallpaper/settings" ] && . "$HOME/.config/randomwallpaper/settings"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__config() {
  printf_green "Generating the config"
  __mkd "$HOME/.config/randomwallpaper"
  echo '# Randomwallpaper Settings
ROTATE_TIME='"${ROTATE_TIME:-300}"'
KILL_FILE="'${TMP_DIR:-/tmp}/randomwallpaper.$USER.kill'"
RUN_FILE="'${TMP_DIR:-/tmp}/randomwallpaper.$USER'"
NOTIFICATIONS="'${NOTIFICATIONS:-enabled}'"
' >"$HOME/.config/randomwallpaper/settings"
  printf_exit "2" "$?" "config saved to $HOME/.config/randomwallpaper/settings"
}

if [ "$NOTIFICATIONS" != "enabled" ]; then notification() { true "$@"; }; fi

__startup() {
  printf_green "Adding the randomwallpaper to startup"
  cat <<EOF >"$HOME/.config/autostart/randomwallpaper.desktop"
#!/usr/bin/env xdg-open

[Desktop Entry]
Encoding=UTF-8
Version=0.9.4
Type=Application
Name=Wallpaper Changer
Icon=preferences-desktop-notification
Comment=Random Wallpaper
Exec=randomwallpaper --bg
RunHook=0
StartupNotify=false
Terminal=false
Hidden=false

EOF
  [ -f "$HOME/.config/autostart/randomwallpaper.desktop" ] &&
    printf_green "Successfully installed randomwallpaper Daemon" ||
    printf_error "Failed to install randomwallpaper Daemon"
  exit $?
}

__variety() {
  if [ -f "$HOME/.config/variety/variety.conf" ] &&
    grep '^change_enabled' "$HOME/.config/variety/variety.conf" 2>/dev/null | grep -iq True; then
    variety -q &>/dev/null
    sed -i 's#change_enabled =.*#change_enabled = False#g' "$HOME/.config/variety/variety.conf"
    if grep '^change_enabled' "$HOME/.config/variety/variety.conf" 2>/dev/null | grep -iq True; then
      printf_error "Refusing to run: variety is already changing the wallpaper"
      return 1
    fi
    variety &>/dev/null &
  fi
}

__mesg_ok() { notifications "Wallpaper Changer" "Wallpaper has been changed to $SHORTNAME"; }
__mesg_fail() { notifications "Wallpaper Changer" "Failed to change the wallpaper"; }

__kill() {
  __getstatus
  if [ -f "$KILL_FILE" ]; then
    notifications "Wallpaper Changer" "Background service is shutting down"
    __rm_rf "$KILL_FILE" "$RUN_FILE"
    kill -9 "$PPID"
    return 1
  else
    return 0
  fi
}

__background_job() {
  __getstatus
  local ROTATE_TIME="${1:-$ROTATE_TIME}"
  local PPID=$$
  local PID=$!
  echo -e "$PPID\n$PID" >"$RUN_FILE"
  [ -f "$HOME/.config/randomwallpaper/settings" ] &&
    . "$HOME/.config/randomwallpaper/settings"
  randomwallpaper --bg -new
  sleep ${ROTATE_TIME:-300}
  __kill || exit 1
  __background_job
}

__getstatus() {
  if [ -f "$RUN_FILE" ]; then
    GETTPID=$(cat "$RUN_FILE" | head -n1)
    PSPID="$(ps -ux | grep -v grep | grep -q "$GETTPID" 2>/dev/null)"
    __get_status_pid "$GETTPID" && return 0 || return 1
  else
    return 1
  fi

}

__term() {
  local main sleeptime
  while :; do
    # show menu
    clear
    shift 1
    printf_newline "\n\n\n\n"
    printf_head "Random Wall Paper Menu"
    printf_newline
    __getstatus && printf_green "randomwallpapers is running" || printf_red "randomwallpapers is not running"
    printf_newline
    printf_green "a. Stop randomwallpaper"
    printf_green "b. Change the wallpaper every x minutes"
    printf_green "y. change the wallpaper"
    printf_green "z. or escape to Exit"
    printf_green "---------------------------------"
    printf_read_question_nt "6" "Enter your choice [y-z] : " "1" "main" "-s"
    case "$main" in
    a)
      randomwallpaper --bg --kill
      printf_green "randomwallpaper will be shutdown at the next rotation"
      sleep 3
      ;;
    b)
      printf_read_question_nt "6" "How often do you want it to change? [minutes]: " "3" "sleeptime" "-s"
      counter=$(echo $((60 * $sleeptime)))
      randomwallpaper --bg "$counter" &>/dev/null &
      printf_green "Started randomwallpaper in the background"
      printf_counter "5" "4" "exiting menu in"
      break
      ;;
    $'\E' | $'\e' | z | x | n)
      clear
      break
      ;;
    *)
      randomwallpaper
      ;;
    esac
    printf_counter "5" "3" "Re-loading menu in"
  done
  clear
}

__randomwallpaper() {
  local exitCode=0
  xfce_change_wp() {
    xfconf-query --channel xfce4-desktop --list | grep last-image | while read path; do
      xfconf-query --channel xfce4-desktop --property "$path" --set "$1"
    done
  }

  [ -n "$RAND" ] || exit 1
  if __cmd_exists variety; then
    variety --set="$RAND" &>/dev/null
  elif __cmd_exists feh; then
    feh --bg-fill "$RAND" &>/dev/null
  elif __cmd_exists xwallpaper; then
    xwallpaper --maximize "$RAND" &>/dev/null
  elif [[ "$DESKTOP_SESSION" =~ "xfce4" ]] && __cmd_exists xfconf-query; then
    xfce_change_wp "$RAND" &>/dev/null
  else
    return 1
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# execute application
__variety
case $1 in
*config)
  shift 1
  __config
  ;;
*startup | *enable)
  shift 1
  __startup
  ;;
*disable)
  __rm_rf "$HOME/.config/autostart/randomwallpaper.desktop"
  notifications "Wallpaper Changer" "Deleted the autostart service"
  ;;
*term)
  shift 1
  __term "$@"
  ;;
*bg)
  shift 1
  if [[ "$1" = *new ]]; then
    randomwallpaper
    exit
  fi
  if [[ "$1" = *status ]]; then
    if [ -f "$RUN_FILE" ]; then
      GETTPID=$(cat "$RUN_FILE" | head -n1)
      PSPID="$(ps -ux | grep -v grep | grep -q "$GETTPID" 2>/dev/null)"
      if __getstatus; then
        notifications "RandomWallPapers" "randomwallpapers is running with PID: $GETTPID"
        printf_exit 2 0 "randomwallpapers is running with PID: $GETTPID"
      else
        notifications "RandomWallPapers" "randomwallpapers appears to be stop"
        printf_exit 1 1 "randomwallpapers appears to be stop"
      fi
    else
      notifications "RandomWallPapers" "randomwallpapers appears to be stop"
      printf_exit 1 1 "randomwallpapers appears to be stop"
    fi
    exit $?
  fi
  if [[ "$1" = *stop ]] || [[ "$1" = *kill ]]; then
    printf_green "Killing background service" && touch "$KILL_FILE" && exit
  fi
  notifications "Wallpaper Changer" "Enabling randomwallpaper background job: Changing every $ROTATE_TIME"
  __rm_rf "$KILL_FILE" "$RUN_FILE"
  __background_job "${ROTATE_TIME}" "$@" &
  ;;
*)
  __randomwallpaper "$@" && __mesg_ok || __mesg_fail
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
