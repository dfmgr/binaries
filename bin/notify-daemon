#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103201737-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : notify-daemon --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 17:37 EDT
# @File          : notify-daemon
# @Description   : Start the notification daemon
# @TODO          : Clean code
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NOTIFYD_HOST="${NOTIFYD_HOST:-}"
NOTIFYD_PORT="${NOTIFYD_PORT:-65001}"
NOTIFYD_CONFIG_DIR="$HOME/.config/notify-daemon"
NOTIFYD_CONFIG_FILE="setting.conf"
NOTIFYD_TMP_DIR="${TMPDIR:-/tmp}/notifyd"
NOTIFYD_CLIENT_PATH="$NOTIFYD_TMP_DIR/client"
NOTIFYD_SERVER_PATH="$NOTIFYD_TMP_DIR/server"
NOTIFYD_KILL_PATH="$NOTIFYD_SERVER_PATH/server.kill"
NOTIFYD_LOG_FILE="$NOTIFYD_SERVER_PATH/server.log"
NOTIFYD_APPNAME="${notifyAppName:-$NOTIFY_CLIENT_NAME}"
NOTIFYD_URGENY="${notifyUrgency:-$NOTIFY_CLIENT_URGENY}"
NOTIFYD_ICON="${NOTIFY_CLIENT_ICON}"
NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
NOTIFY_CLIENT_URGENY="${NOTIFY_CLIENT_URGENY:-normal}"
NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-com.github.timecraft.notifier}"
NOTIFY_CONFIG_DIR="$HOME/.config/notifications"
NOTIFY_CONFIG_FILE="settings.conf"
notifyAppName="${NOTIFYD_APPNAME:-$PROG}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if pidof xfce4-notifyd &>/dev/null; then
  NOTIFYD=xfce4-notifyd
  PROCID=xfce4-notifyd
elif pidof dunst &>/dev/null; then
  NOTIFYD=dunst
  PROCID=dunst
elif pidof deadd-notification-center &>/dev/null; then
  NOTIFYD=deadd-notification-center
  PROCID=deadd-notification-center
else
  NOTIFYD=
  PROCID=
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$NOTIFY_CONFIG_DIR/$NOTIFY_CONFIG_FILE" ] &&
  . "$NOTIFY_CONFIG_DIR/$NOTIFY_CONFIG_FILE"
[ -f "$NOTIFYD_CONFIG_DIR/$NOTIFYD_CONFIG_FILE" ] &&
  . "$NOTIFYD_CONFIG_DIR/$NOTIFYD_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__config() {
  printf_green "Generating the config file"
  if [ ! -f "$NOTIFYD_CONFIG_DIR/$NOTIFYD_CONFIG_FILE" ]; then
    __rm_rf "$NOTIFYD_CONFIG_DIR/$NOTIFYD_CONFIG_FILE"
    __mkd "$NOTIFYD_CONFIG_DIR"
  fi
  cat <<EOF >"$NOTIFYD_CONFIG_DIR/$NOTIFYD_CONFIG_FILE"
# Settings for notify-daemon
NOTIFYD_HOST="${NOTIFYD_HOST}"
NOTIFYD_PORT="${NOTIFYD_PORT:-65001}"
NOTIFY_CONFIG_DIR="$HOME/.config/notifications"
NOTIFY_CONFIG_FILE="settings.conf"

#Uncomment and insert this into $NOTIFYD_CONFIG_DIR/notifyd
#if cmd_exists pathToDaemon; then
#  NOTIFYD="pathToDaemon"
#  PROCID="processName"
#  return 0
#else
#  return 1
#fi

EOF
  [ -f "$NOTIFYD_CONFIG_DIR/$NOTIFYD_CONFIG_FILE" ] &&
    printf_green "config saved to $NOTIFYD_CONFIG_DIR/$NOTIFYD_CONFIG_FILE" ||
    printf_error "Failed to save the configuration"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
netcat="$(command -v nc 2>/dev/null || command -v netcat 2>/dev/null || exit 1)"
__netcat_test() { cmd_exists $netcat || notifications "Daemon" "The program netcat is not installed"; }
__nc_send() { $netcat -c $1 $2 2>>"$_LOG" && true || $netcat -w 1 $1 $2 2>>"$_LOG" || return 1; }
__getstatus() { ps -ux | grep "$PROCID" | grep -qv 'grep ' && return 0 || return 1; }
__kill_server() {
  __netcat_kill "$NOTIFYD_PORT" &>/dev/null && printf_blue "Server has been stopped" || printf_red "Failed to stop"
  sleep 2
}

__running() {
  if [ -n "$PROCID" ] && pidof "$PROCID" >/dev/null 2>&1; then
    printf_green "${PROCID:-$NOTIFYD} is currently the notify daemon" &&
      notifications "Daemon" "${PROCID:-$NOTIFYD} is currently the notify daemon"
  elif pidof "$PROCID" >/dev/null 2>&1; then
    printf_error "Not running"
    notifications "Daemon" "notify-daemon is not running PROC should be ${PROCID:-$NOTIFYD}"
  else
    notifications "Daemon" "notify-daemon is not running PROC should be ${PROCID:-$NOTIFYD}"
  fi
}

__kill() {
  [ -d "$NOTIFYD_SERVER_PATH" ] || __mkd "$NOTIFYD_SERVER_PATH"
  notifications "Daemon" "Stopping the notify-daemon"
  printf_yellow "Stopping the notify-daemon"
  local pid="$(pidof "$PROCID")"
  kill -s KILL "$pid" >/dev/null 2>&1
  sleep 3
  local pid="$(pidof "$PROCID" &>/dev/null)"
  if [ -n "$pid" ]; then
    notifications "Daemon" "Failed to stop $PROCID"
    printf_red "Failed to stop $PROCID"
  fi
}

__start() {
  exec "$*" &>/dev/null &
  if [ "$?" = 0 ]; then
    notifications "Daemon" "$PROCID has been started as the notify daemon"
    exitCode=0
    disown
  else
    exitCode=1
  fi
  sleep 3
  return $exitCode
}

__restart() {
  __kill "$PROCID"
  __start "$1" || __start "$1"
  return $?
}

__client() {
  # local _SERVER="$NOTIFYD_HOST"
  # local _PORT="${NOTIFYD_PORT:-65001}"
  # local _TMP="${TMPDIR:-/tmp}/notifications"
  # local _PATH="$_TMP/notify-client.tmp)"
  # local _LOG="$_PATH.log"
  # __netcat_test
  # printf_green "Attempting to send message to $_SERVER on $_PORT"
  # printf "%s\n" "$1" "$2" >"${_PATH}" 2>>"$_LOG"
  # cat "$_PATH" 2>>"$_LOG" | __nc_send "$_SERVER" "$_PORT" 2>>"$_LOG"
  # [ $? = 0 ] && rm -Rf "$_PATH" || printf_error "Failed to send message: ensure the server is running"
  # return $?
  __netcat_test
  local title="$1"
  local msg="$2"
  local _PATH="$(mktemp $NOTIFYD_CLIENT_PATH/XXX.tmp)"
  local _LOG="$NOTIFYD_CLIENT_PATH/client.log"
  __mkd "$NOTIFYD_CLIENT_PATH"
  printf_green "Attempting to send '$msg' to $NOTIFYD_HOST on $NOTIFYD_PORT" 2>>"$_LOG"
  notifications "Daemon" "Attempting to send $msg to $NOTIFYD_HOST on $NOTIFYD_PORT" 2>>"$_LOG"
  printf "%s\n" "$title" "$msg" >"$_PATH" 2>>"$_LOG" &&
    cat "$_PATH" 2>>"$_LOG" | __nc_send "$NOTIFYD_HOST" "$NOTIFYD_PORT" 2>>"$_LOG" &&
    __rm_rf "$_PATH" && sleep 3 && return 0 || {
    notifications "Daemon" "Failed to send message: ensure the server is running"
    return 1
  }
}

__server() {
  echo ""
  __clean_return() { __rm_rf "$_PATH" "$_LOG" && return "$1"; }
  local _PORT="$NOTIFYD_PORT"
  local _TMP="$NOTIFYD_SERVER_PATH"
  local _PATH="$NOTIFYD_SERVER_PATH/msg.txt"
  local _LOG="$NOTIFYD_LOG_FILE"
  local _KILL="$NOTIFYD_KILL_PATH"
  __mkd "$_TMP"
  __netcat_test
  netstatg "$_PORT" &>/dev/null && printf_exit "Already Running" || printf_green "Launching server on port $_PORT"
  notifications "Daemon" "Starting notify-daemon server on port $_PORT"
  __rm_rf "$_KILL" "$_LOG" "$_PATH"
  while :; do
    cmdsPID="$$"
    echo "$cmdsPID" >>"$_LOG"
    $netcat -l -p "$_PORT" >"$_PATH" 2>>"$_LOG"
    echo "New notification in $_PATH" >>"$_LOG"
    local title="$(head -n1 "$_PATH")"
    local msg="$(tail -n1 "$_PATH")"
    notifications "$title" "$msg"
    __clean_return $?
    if [ -f "$_KILL" ]; then
      __kill_server &>/dev/null
      __rm_rf "$_LOG" "$_PATH"
      notifications "Daemon" "notify-daemon server is shutting down"
      break
    fi
  done
  __clean_return $?
}

__startup() {
  printf_green "Adding the Notification Daemon to startup"
  cat <<EOF >"$HOME/.config/autostart/notifyd.desktop"
#!/usr/bin/env xdg-open

[Desktop Entry]
Encoding=UTF-8
Version=0.9.4
Type=Application
Name=Notification Daemon
Icon=preferences-desktop-notification
Comment=Start notifyd
Exec=notify-daemon start
RunHook=0
StartupNotify=false
Terminal=false
Hidden=false

EOF

  __start "$NOTIFYD" && sleep 5
  [ -f "$HOME/.config/autostart/notifyd.desktop" ] &&
    printf_green "Successfuly installed Notification Daemon" ||
    printf_error "Failed to install Notification Daemon"
  __running && notifications "Daemon" "$PROCID has been enabled to start at login"
  exit $?
}

__server_enable() {
  printf_green "Enabling the Notification Daemon Server on port $NOTIFYD_PORT"
  cat <<EOF >"$HOME/.config/autostart/notifyd-server.desktop"
#!/usr/bin/env xdg-open

[Desktop Entry]
Version=1.1
Type=Application
Name=Notification Server
GenericName=NotificationServer
Comment=Start Notification Daemon Server.
Icon=preferences-desktop-notification
Exec=notify-daemon --server &
Path=~
Terminal=false
Actions=
Categories=System;GTK;X-XFCE;GNOME;
Keywords=xfce4-notify;notify;music;player;my;
StartupNotify=true
EOF
  sh -c "notify-daemon --server &"
  exit $?
}

__server_disable() {
  __rm_rf "$HOME/.config/autostart/notifyd-server.desktop"
  touch "$NOTIFYD_KILL_PATH"
  __client "Daemon" "Disabling server"
}

__xfce4_notifyd() {
  if [ -n "$PROCID" ] && __getstatus $PROCID; then
    NOTIFYD="$PROCID"
    PROCID="$PROCID"
    return 0
  elif [ -f /usr/lib/xfce4/notifyd/xfce4-notifyd ]; then
    NOTIFYD="/usr/lib/xfce4/notifyd/xfce4-notifyd"
    PROCID="xfce4-notifyd"
    return 0
  elif [ -f /usr/lib/x86_64-linux-gnu/xfce4/notifyd/xfce4-notifyd ]; then
    NOTIFYD="/usr/lib/x86_64-linux-gnu/xfce4/notifyd/xfce4-notifyd"
    PROCID="xfce4-notifyd"
    return 0
  else
    return 1
  fi
}

__dunst_notifyd() {
  if [ -n "$PROCID" ]; then
    NOTIFYD="$PROCID"
    PROCID="$PROCID"
    return 0
  elif cmd_exists dunst; then
    NOTIFYD="dunst"
    PROCID="dunst"
    return 0
  else
    return 1
  fi
}

__deadd_notifyd() {
  if [ -n "$PROCID" ]; then
    NOTIFYD="$PROCID"
    PROCID="$PROCID"
    return 0
  elif cmd_exists deadd-notification-center; then
    NOTIFYD="deadd-notification-center"
    PROCID="deadd-notification-center"
    return 0
  else
    return 1
  fi
}

__custom_notifyd() {
  if [ -f "$HOME/.config/notify-daemon/notifyd" ]; then
    source "$HOME/.config/notify-daemon/notifyd"
    [ -n "$PROCID" ] && [ -n "$NOTIFYD" ] && return 0 || return 1
  else
    return 1
  fi
}

_start_notifyd() {
  _run() { __start "$NOTIFYD" && return 0 || return 1; }
  if [ -z "$PROCID" ] && [ -z "$NOTIFYD" ]; then
    printf_red "Failed to find a notify daemon"
    printf_exit 1 1 "Please install: xfce4-notifyd, dunst, deadd or custom: see settings file for custom"
  else
    if ! __getstatus "$PROCID"; then
      printf_green "Attempting to start"
      #_run && return 0 || return 1
      while :; do _run && __getstatus "$PROCID" && break || return 1; done
    fi
    exitCode=$?
    if [ "$exitCode" = 0 ]; then
      printf_green "$PROCID has been started"
      notifications "Daemon" "$PROCID has been Started"
    else
      printf_exit "Failed to start ${PROCID:-$NOTIFYD}"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__custom_notifyd || __xfce4_notifyd || __dunst_notifyd || __deadd_notifyd
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case "$1" in
#### begin server
*server)
  case $2 in
  *stop | *kill)
    printf_green "Attempting to stop the server"
    shift 2
    touch "$NOTIFYD_KILL_PATH"
    __kill_server
    #__netcat_pids "$NOTIFYD_PORT"
    exit $?
    ;;
  *restart)
    printf_green "Attempting to restart the server"
    shift 2
    touch "$NOTIFYD_KILL_PATH"
    __kill_server
    sleep 5
    __server "$@"
    exit $?
    ;;
  *enable)
    shift 2
    __server_enable
    exit $?
    ;;
  *disable)
    shift 2
    __server_disable
    exit $?
    ;;
  *status)
    shift 2
    PID="$(__netcat_pids "$NOTIFYD_PORT")"
    printf_green "The server appears to be running on $NOTIFYD_PORT with PID: $PID"
    notifications "Daemon" "The server appears to be running on $NOTIFYD_PORT with PID: $PID"
    exit
    ;;
  start | *-start)
    shift 2
    __server "$@"
    ;;
  *)
    __server "$@"
    ;;
  esac
  ;;
#### end server
*term)
  shift 1
  declare main
  while :; do
    # show menu
    status="$(__getstatus && echo -n "Running $PROCID" || echo -e "Not Running")"
    clear
    shift
    printf_newline "\n\n\n\n"
    printf_head "Notify Daemon Menu"
    printf_green "Current Status: $status"
    printf_green "a. Start"
    printf_green "b. Stop"
    printf_green "c. Restart"
    printf_green "d. create a config file"
    printf_green "e. Status"
    printf_green "f. Test"
    printf_green "z. or escape to Exit"
    printf_green "---------------------------------"
    printf_read_question_nt "6" "Enter your choice [a-z] : " "1" "main" "-s"
    printf_newline
    # take action
    case "$main" in
    a)
      shift 1
      _start_notifyd
      ;;
    b)
      shift 1
      __kill "$PROCID"
      ;;
    c)
      shift 1
      __restart "$NOTIFYD"
      ;;
    d)
      shift 1
      __config
      ;;
    e)
      shift 1
      __running "$NOTIFYD"
      ;;
    f)
      shift 1
      notifications "Daemon" "Server is running: $PROCID"
      ;;
    $'\E' | $'\e' | z)
      shift 1
      clear
      break
      ;;
    *) shift ;;
    esac
    printf_newline "\n\n"
    printf_counter "5" "3" "Re-loading menu in"
  done
  clear
  ;;

config)
  shift 1
  __config
  ;;

ask)
  shift 1
  [ -n "$PROCID" ] && exit 0 || exit 1
  exit
  ;;

enable)
  shift 1
  __startup
  ;;

disable)
  printf_green "Disabling the notify daemon"
  __rm_rf "$HOME/.config/autostart/notifyd.desktop" &&
    __kill "$PROCID" &&
    printf_green "Successfuly Disabled the notify daemon" ||
    printf_error "Failed to disable notify daemon"
  exit $?
  ;;

restart)
  shift 1
  __restart "$NOTIFYD"
  ;;

stop)
  shift 1
  __kill "$PROCID"
  ;;

status)
  shift 1
  __running "$NOTIFYD"
  ;;

*client)
  shift 1
  if [ -z "$NOTIFYD_HOST" ]; then
    notifications "Daemon" "Please set NOTIFYD_HOST variable to your server"
    exit 1
  fi
  if [ ${#} -eq 0 ]; then
    if [ -p "/dev/stdin" ]; then
      title="${notifyAppName:-$APPNAME}"
      msg="$(</dev/stdin)"
    fi
  else
    if [ ${#} -eq 1 ]; then
      title="${notifyAppName:-$APPNAME}"
      msg="$*"
    else
      title="$1"
      shift 1
      msg="$*"
    fi
  fi
  __client "$title" "$msg" 2>/dev/null
  ;;

*start)
  _start_notifyd
  if ! __getstatus "$PROCID"; then _start_notifyd "$NOTIFYD"; fi
  ;;
*) __help ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
