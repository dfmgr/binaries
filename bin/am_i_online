#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202103262239-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103262239-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : am_i_online --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Friday, Mar 26, 2021 22:39 EDT
# @File          : am_i_online
# @Description   : Check for internet connection
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE"
  [ -d "$AM_I_ONLINE_CONFIG_DIR" ] || mkdir -p "$AM_I_ONLINE_CONFIG_DIR"
  [ -d "$AM_I_ONLINE_CONFIG_BACKUP_DIR" ] || mkdir -p "$AM_I_ONLINE_CONFIG_BACKUP_DIR"
  [ -f "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE" ] &&
    cp -Rf "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE" "$AM_I_ONLINE_CONFIG_BACKUP_DIR/$AM_I_ONLINE_CONFIG_FILE.$$"
  cat <<EOF >"$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE"
# Settings for am_i_online
AM_I_ONLINE_TEST_SITE="\${AM_I_ONLINE_TEST_SITE:-1.1.1.1}"
AM_I_ONLINE_TEST_SITE_PING="\${AM_I_ONLINE_TEST_SITE_PING:-1.1.1.1}"
AM_I_ONLINE_TEST_SITE_HTTP="\${AM_I_ONLINE_TEST_SITE_HTTP:-1.1.1.1}"
AM_I_ONLINE_TEST_SITE_HTTP_STATUS="\${AM_I_ONLINE_TEST_SITE_HTTP_STATUS:-[200|301]}"
AM_I_ONLINE_NOTIFY_ENABLED="\${AM_I_ONLINE_NOTIFY_ENABLED:-yes}"
AM_I_ONLINE_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$(basename "\$0")}"
AM_I_ONLINE_NOTIFY_CLIENT_ICON="\${AM_I_ONLINE_NOTIFY_CLIENT_ICON:-error}"
AM_I_ONLINE_OK_NAME="Great:"
AM_I_ONLINE_ERROR_NAME="Error:"
AM_I_ONLINE_ERROR_MSG="internet appears to be down and I require a working connection"
AM_I_ONLINE_OK_MSG="you seem to be connected to the internet"
EOF
  if [ -f "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE" ]; then
    printf_green "Your config file for am_i_online has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ignore any local network devices
__local_network() {
  if [ "$1" = "localhost" ] || [ "$1" = "$(hostname -s)" ] || [ "$1" = "$(hostname -f)" ] || [[ "$1" =~ *."$(hostname -d)" ]] ||
    [[ "$1" =~ 10.*.*.* ]] || [[ "$1" =~ 192.168.*.* ]] || [[ "$1" =~ 172.16.*.* ]] || [[ "$1" =~ 127.*.*.* ]]; then
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
AM_I_ONLINE_CONFIG_FILE="settings.conf"
AM_I_ONLINE_CONFIG_DIR="$HOME/.config/myscripts/am_i_online"
AM_I_ONLINE_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/am_i_online/backups"
AM_I_ONLINE_OPTIONS_DIR="$HOME/.local/share/myscripts/am_i_online/options"
AM_I_ONLINE_TEST_SITE="${AM_I_ONLINE_TEST_SITE:-1.1.1.1}"
AM_I_ONLINE_TEST_SITE_PING="${AM_I_ONLINE_TEST_SITE_PING:-1.1.1.1}"
AM_I_ONLINE_TEST_SITE_HTTP="${AM_I_ONLINE_TEST_SITE_HTTP:-1.1.1.1}"
AM_I_ONLINE_TEST_SITE_HTTP_STATUS="${AM_I_ONLINE_TEST_SITE_HTTP_STATUS:-[200|301]}"
AM_I_ONLINE_NOTIFY_ENABLED="${AM_I_ONLINE_NOTIFY_ENABLED:-yes}"
AM_I_ONLINE_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$(basename "$0")}"
AM_I_ONLINE_NOTIFY_CLIENT_ICON="${AM_I_ONLINE_NOTIFY_CLIENT_ICON:-error}"
AM_I_ONLINE_OK_NAME="${AM_I_ONLINE_OK_NAME:-Great:}"
AM_I_ONLINE_ERROR_NAME="${AM_I_ONLINE_ERROR_NAME:-Error:}"
AM_I_ONLINE_ERROR_MSG="${AM_I_ONLINE_ERROR_MSG:-internet appears to be down and I require a working connection}"
AM_I_ONLINE_OK_MSG="${AM_I_ONLINE_OK_MSG:-you seem to be connected to the internet}"
AM_I_ONLINE_SHOW_ERROR=""
AM_I_ONLINE_SHOW=""
AM_I_ONLINE_MESSAGE=""
AM_I_ONLINE_SHOW_CONSOLE=""

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="${*}"
SHORTOPTS="c,v,h,f,m:,s:"
LONGOPTS="options,config,version,help,error,show,console,force,message:,site:,code:"
ARRAY=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$AM_I_ONLINE_OPTIONS_DIR/options" ] || __list_options "$AM_I_ONLINE_OPTIONS_DIR" &>/dev/null
[ -f "$AM_I_ONLINE_OPTIONS_DIR/array" ] || __list_array "$AM_I_ONLINE_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE" ]; then
  . "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$AM_I_ONLINE_OPTIONS_DIR" "$ARRAY"
    __list_options "$AM_I_ONLINE_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  -f | --force)
    shift 1
    AM_I_ONLINE_FORCE_CONNECTION="true"
    ;;
  --error)
    shift 1
    AM_I_ONLINE_SHOW_ERROR="yes"
    ;;
  --show)
    shift 1
    AM_I_ONLINE_SHOW="yes"
    AM_I_ONLINE_SHOW_ERROR="yes"
    ;;
  --console)
    shift 1
    AM_I_ONLINE_SHOW_CONSOLE="yes"
    ;;
  -m | --message)
    shift 1
    AM_I_ONLINE_MESSAGE="$1"
    shift 1
    ;;
  -s | --site)
    shift 1
    site="$1"
    shift 1
    ;;
  --code)
    shift 1
    status="$1"
    shift 1
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${AM_I_ONLINE_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${AM_I_ONLINE_NOTIFY_CLIENT_ICON}"
if [ "$AM_I_ONLINE_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash curl ping || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
pingExit=
httpExit=
exitCode=
if [ -n "$AM_I_ONLINE_FORCE_CONNECTION" ] || __local_network "$site"; then
  httpExit=0
  pingExit=0
  AM_I_ONLINE_RUN=no
fi
options_used_message="PingSite:${site:-$AM_I_ONLINE_TEST_SITE_PING}|HTTPSite:${site:-$AM_I_ONLINE_TEST_SITE_HTTP}|StatusCode:$AM_I_ONLINE_TEST_SITE_HTTP_STATUS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
test_ping() {
  local definesite="${site:-$AM_I_ONLINE_TEST_SITE_PING}"
  local site="${definesite:-$AM_I_ONLINE_TEST_SITE}"
  timeout 1 ping -c1 "$site" &>/dev/null && true || false
  pingExit="$?"
}
test_http() {
  local definesite="${site:-$AM_I_ONLINE_TEST_SITE_HTTP}"
  local definestatus="${status}"
  local site="${site:-$AM_I_ONLINE_TEST_SITE}"
  local status="${definestatus:-$AM_I_ONLINE_TEST_SITE_HTTP_STATUS}"
  timeout 1 curl --disable -LSIs --max-time 1 "$site" | grep -e "HTTP/[0123456789]" | grep -E '${status}' -n1 &>/dev/null && true || false
  httpExit="$?"
}
if [ -z "$AM_I_ONLINE_RUN" ]; then
  test_ping || test_http
fi
if [ "$pingExit" = 0 ] || [ "$httpExit" = 0 ]; then
  export AM_I_ONLINE_NOTIFY_CLIENT_ICON="connect_established"
  if [ "$AM_I_ONLINE_SHOW" = "yes" ]; then
    printf_green "you seem to be connected to the internet"
    __notifications "$AM_I_ONLINE_OK_NAME" "${AM_I_ONLINE_MESSAGE:-$AM_I_ONLINE_OK_MSG}"
  elif [ "$AM_I_ONLINE_SHOW_CONSOLE" = "yes" ]; then
    printf_green "Options Used - $options_used_message"
    printf_green "you seem to be connected to the internet"
  fi
  exitCode=0
else
  if [ "$AM_I_ONLINE_SHOW_CONSOLE" = "yes" ]; then
    AM_I_ONLINE_SHOW_ERROR=no
    printf_green "Options Used - $options_used_message"
    printf_red "you appear to be offline" >&2
  fi
  if [ "$AM_I_ONLINE_SHOW_ERROR" = "yes" ]; then
    printf_return 1 1 "${AM_I_ONLINE_MESSAGE:-$AM_I_ONLINE_ERROR_MSG}" >&2
    __notifications "$AM_I_ONLINE_ERROR_NAME" "${AM_I_ONLINE_MESSAGE:-$AM_I_ONLINE_ERROR_MSG}"
  fi
  exitCode=1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
