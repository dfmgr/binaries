#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 010920210727-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : config
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : add config files to git repo - https://www.atlassian.com/git/tutorials/dotfiles
# @TODO        :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Set functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
dfmgr_install "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ARRAY="$(cat ${SCRIPTSFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}/helpers/config/array)"
LIST="$(cat ${SCRIPTSFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}/helpers/config/list)"
HELP="$(cat ${SCRIPTSFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}/helpers/config/help)"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [[ $EUID -eq 0 ]]; then
  printf_head "You are running as root as such this will allow full system access"
  HOME="/"
else
  HOME=$HOME
fi
gitdir="${CONFIG_REPO:-$HOME/.local/dotfiles}/config"
backupdir="${CONFIG_HOME:-$HOME/.local/backups}/config"
logdir="${LOGDIR:-$HOME/.local/log}/config"
logfile="$logdir/config.log"
mkdir -p $logdir $backupdir

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

_stow() { eval git --git-dir="$gitdir/" --work-tree="$HOME" "${@}"; }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

_backup() {
  mkdir -p "$backupdir"
  _stow checkout 2>&1 | grep -E '^\s+' | awk '{print $1}' |
    rsync -a --remove-source-files --files-from="-" ~/ "$backupdir/"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

_checkout() { _stow checkout "${@}" || _backup "${@}"; }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

git_remote() {
  if [ -z "$1" ]; then
    printf_read "Enter the url to your git repo:"
    read -r url
    _stow remote add origin "$url"
  else
    _stow remote "$@"
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

gitconfig_local() {
  cat <<EOF >"$gitdir/config.local"

[color "status"]
  added = green reverse
  changed = yellow reverse
  untracked = red reverse

#pretty log
[pretty]
  custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"

# Aliases
g   = log --graph --pretty=custom
l   = log --pretty=custom
p   = push
s = "!f(){ config status; };f"
EOF
}

git_init() {
  if [ ! -f .gitignore ]; then
    echo "$gitdir" >.gitignore
    echo "*/.git/*" >.gitignore
  else
    grep -q "$gitdir" ~/.gitignore 2>/dev/null || echo "$gitdir" >>.gitignore
    grep -q '/.git/' ~/.gitignore 2>/dev/null || echo "*/.git/*" >>.gitignore
  fi
  printf_question "4" "Do you already have a dotfiles repo: [y/N]"
  read -r -n 1 -s choice
  echo ""
  if [[ $choice == "y" || $choice == "Y" ]]; then
    printf_read "What is the repo url:"
    read -r -n 60 url
    git clone --bare "$url" "$gitdir" -q
    _checkout
    _stow config --local status.showUntrackedFiles no
  else
    mkdir -p "$gitdir"
    git init --bare "$gitdir" -q
    gitconfig_local
    _stow config --local status.showUntrackedFiles no
    _stow config --local commit.gpgSign false
    printf_question "Would you like to add a remote git repo: [y/N]"
    read -r -n 1 -s choice
    echo ""
    if [[ $choice == "y" || $choice == "Y" ]]; then
      printf_question "4" "Enter the url to your git repo:"
      read -r -n 60 url
      _stow remote add origin "$url"
    else
      printf_green "You did not add a remote git repo"
    fi
    printf_question "Enter your name:"
    read -r -n 80 name
    printf_question "Enter email address:"
    read -r -n 100 email
    _stow config --local include.path $gitdir/gitconfig.local
    _stow config --local user.name "$name"
    _stow config --local user.email "$email"
    _stow add -f ~/.gitignore
    _stow commit -q -m "'🏠🐜❗ Added .gitignore 🏠🐜❗'"
  fi
  exit "$?"
}

case "$1" in
--system)
  shift 1
  if [ "$1" = "--help" ]; then
    printf_custom "41" "Allows you to keep your system settings in a git repo"
    printf_green "Usage: config --system commands"
    printf_exit "See config help for commands"
    __help
  fi
  requiresudo true
  gitdir="/root/.local/dotfiles/system/$(hostname -s)"
  ;;

--name)
  shift 1
  if [ -z "${CONFIG_CUSTOM_REPO:-$1}" ] || [ -z "${CONFIG_CUSTOM_HOME:-$2}" ] || [ -z "$3" ]; then
    printf_custom "41" "This allows the use of a custom git dir"
    printf_green "Usage: config --custom gitdir commands"
    printf_exit "See config help for commands"
    exit 1
  fi
  name="$1"
  gitdir="$HOME/.local/dotfiles/system/$name"
  if [ -d "$gitdir" ]; then
    printf_red "Error: $gitdir already in use"
    exit 1
  fi
  shift
  ;;

--custom)
  shift 1
  if [ -z "${CONFIG_CUSTOM_REPO:-$1}" ] || [ -z "${CONFIG_CUSTOM_HOME:-$2}" ] || [ -z "$3" ]; then
    printf_custom "41" "This allows the use of a custom git dir and home dir"
    printf_green "Usage: config --custom gitdir homedir commands"
    printf_exit "See config help for commands"
  fi
  gitdir="${CONFIG_CUSTOM_REPO:-$1}"
  shift
  HOME="${CONFIG_CUSTOM_HOME:-$1}"
  shift 1
  ;;
esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ ! -d "$gitdir" ] && [ ! -f "$gitdir/config" ]; then
  git_init
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

case "$1" in

  init)
    shift 1
    git_init
    ;;

  local)
    shift 1
    _stow config --local "$@"
    ;;

  log | l)
    shift 1
    _stow log --pretty=custom "$@"
    ;;

  status | l)
    shift 1
    _stow status "$@"
    ;;

restore)
  shift 1
  _stow reset -- "$@"
  ;;

add | stow)
  shift 1
  declare -a args="$*"
  for f in ${args[*]}; do
    if [ -L "$f" ]; then
      [ ! -L "$(ls -ltra "$f" | grep '\->' | sed 's#.*-.##g' | sed 's#'$HOME'/##g' | sed 's# ##g')" ] &&
        [ -e "$(ls -ltra "$f" | grep '\->' | sed 's#.*-.##g' | sed 's#'$HOME'/##g' | sed 's# ##g')" ] &&
        _stow add "$f" &&
        _stow add "$(ls -ltra "$f" | grep '\->' | sed 's#.*-.##g' | sed 's#'$HOME'/##g' | sed 's# ##g')"
    else
      _stow add -f "$f"
    fi
  done
  [ $? = 0 ] && printf_green "Don't forget to run config commit"
  #_stow commit -q -m "'🏠🐜❗ Added Files 🏠🐜❗'"
  ;;

commit)
  shift 1
  _stow commit -q -m "'🏠🐜❗ Added files to repo 🏠🐜❗'"
  ;;

checkout)
  shift 1
  _checkout "$*"
  ;;

remote)
  shift 1
  git_remote "$*"
  ;;

pull)
  shift 1
  _stow pull "$*"
  ;;

push)
  shift 1
  _stow push "$*" || _stow push --set-upstream origin master "$@"
  ;;

set)
  shift 1
  _stow config "$*"
  ;;

help | -h* | --h*)
  shift 0
  __help
  ;;

*)
  shift 0
  [ -z "$1" ] && __help
  exit 0
  ;;

esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
