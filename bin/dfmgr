#!/usr/bin/env bash

APPNAME="$(basename $0)"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version     : 010920210727-git
# @Author      : Jason
# @Contact     : casjaysdev@casjay.net
# @File        : dfmgr
# @Created     : Wed, Aug 05, 2020, 02:00 EST
# @License     : WTFPL
# @Copyright   : Copyright (c) CasjaysDev
# @Description : DotFiles ManaGeR
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Set functions

SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
SCRIPTSFUNCTDIR="${SCRIPTSAPPFUNCTDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ -f "$PWD/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/functions/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/functions/$SCRIPTSFUNCTFILE"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
dfmgr_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if __api_test; then
  API="$(__curl_api "https://api.github.com/orgs/dfmgr/repos?per_page=1000" | jq -r '.[] | .name' 2>/dev/null)"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

__gpg_import() {
  gpg --import "$1"/*.gpg 2>/dev/null
  gpg --import "$1"/*.sec 2>/dev/null
  gpg --import "$1"/*.asc 2>/dev/null
  gpg --import-ownertrust "$1"/*.trust 2>/dev/null
  return 0
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

dfmgr_available() { printf_custom "4" "$API"; }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

dfmgr_list() {
  if [ $# = 0 ]; then
    run_install_list
  else
    run_install_list "$@"
  fi
  exit
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

dfmgr_search() {
  [ $# = 0 ] && printf_exit "Nothing to search for"
  for search in "$@"; do
    echo -n "$LIST" | tr ' ' '\n' 2>/dev/null | grep -Fi "$search" | printf_read "2" || printf_exit "That package does not exists"
  done
  exit
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

df_personal() {
  shift 1
  dir="$HOME/.local/dotfiles/personal"
  if [ -f "$dir/install.sh" ]; then
    bash -c "$dir/install.sh"
    __getexitcode "Personal dotfiles has been updated"
  elif [ -f "$dir/update.sh" ]; then
    bash -c "$dir/update.sh"
    __getexitcode "Personal dotfiles has been updated"
  elif [ -d "$dir/.git" ]; then
    printf_purple "Updating your personal files"
    git -C "$dir" pull -q &&
      cp -Rfa "$dir"/etc/skel/. ~/ &&
      __gpg_import "$dir/tmp" &&
      __getexitcode "Personal dotfiles has been updated"
  else
    printf_red "Can't install your personal dotfiles"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

case "$1" in

help | h | --h*)
  __help
  ;;

list)
  shift 1
  dfmgr_list "$@"
  ;;

search)
  shift 1
  dfmgr_search "$@"
  ;;

available)
  shift 1
  dfmgr_available
  ;;

personal)
  shift 1
  df_personal
  ;;

install)
  shift 1
  [ -z "$1" ] && echo "$LIST" && exit 1
  [ "$1" = "--all" ] && declare -a LISTARRAY="$LIST" || declare -a LISTARRAY="$*"
  printf_green "Installing Packages to $INSTDIR"
  for ins in ${LISTARRAY[*]}; do
    run_install_init "$ins" 2>/dev/null
  done
  ;;

update)
  shift 1
  printf_green "Updating Packages in $INSTDIR"
  if [[ -n $* ]]; then
    run_install_update "$@"
  elif [[ -d $USRUPDATEDIR && -n "$(ls -A $USRUPDATEDIR 2>/dev/null)" ]]; then
    for upd in $(ls $USRUPDATEDIR 2>/dev/null); do
      run_install_update "$upd" 2>/dev/null
    done
  fi
  ;;

updater | cron)
  shift 1
  cron_updater "$*"
  ;;

version)
  shift 1
  [ $# = 0 ] && "$APPNAME" --version
  run_install_version "$1"
  ;;

*)
  echo "$*"
  __help
  ;;

esac

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# end
