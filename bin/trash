#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="trash"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 030620210509-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : trash --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 06, 2021 05:09 EST
# @File          : trash
# @Description   : send files to trash
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Doesn't support options so lets remove them
while getopts ":*" opt; do
  case $opt in
  *) shift;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set variables
TrashDir="${TRASH_DIR:-$HOME/.local/share/Trash}"
RestoreDir="${RESTORE_DIR}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set functions
__refuse_home() { EXIT=1 && printf_error "Refusing to delete the home folder" && return 1; }
__refuse() { EXIT=1 && printf_error "Refusing to delete non-existant file or folder" && return 1; }
filename_trash() { get_name "$1" | sed 's#/#_-_#g' | sed 's#"##g'; }
filename_restore() { grep Path "$TrashDir/info/$(basename $1).trashinfo" 2>/dev/null | sed 's#Path=##g' | sed 's#"##g' || return 1; }
test_filedir() { for fd in "$@"; do [ -e "$fd" ] && EXIT=0 || __refuse; done; }
get_name() {
  dirname="$(dirname "$1" 2>/dev/null || return 1)"
  filename="$(basename $1 2>/dev/null || return 1)"
  files="$1"
  while [ "$files" ]; do
    file=${files%%;*}
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
    echo "$dirname/$filename"
  done
}
create_trash_file() {
  cat <<EOF >"$TrashDir/info/$(filename_trash "$1")-$(basename "$1").trashinfo"
[Trash Info]
Path=$(get_name "$1")
DeletionDate="$(date +'%Y-%m-%d-T%H:%M:%S')"
EOF
}
trash-put() {
  local EXIT=0
  local args="$*"
  while :; do
    for t in $args; do
      [ $# -ne 0 ] || break 2
      file="$t"
      test_filedir "$(get_name $file)" && printf_green "Removing $(get_name $file)" && create_trash_file "$file"
      #[[ $file =~ $HOME ]] && __refuse_home || break 2
      if [ -d "$file" ]; then
        __mkd "$TrashDir/files/$(filename_trash "$file")-$(basename "$file")"
        rsync -a "$file/." "$TrashDir/files/$(filename_trash "$file")-$(basename "$file")"
      else
        rsync -a "$file" "$TrashDir/files/$(filename_trash "$file")-$(basename "$file")"
      fi
      rm -Rf "$file"
      shift 1
    done
  done
  return "$EXIT"
}
trash-restore() {
  for r in "$@"; do
    local file="$(basename $(echo $r))"
    local restorefile="$(filename_restore "$r")"
    #echo "file:$file restore:$restorefile restorename:$restorename restoredir:$restoredir"
    if [ -e "$TrashDir/files/$file" ]; then
      local restorename="$(basename "$(echo "$restorefile" | sed 's#^/##g' | sed 's#_-_#/#g')")"
      local restoredir="$RestoreDir"
      __mkd "$restoredir/$(dirname "$restorename")"
      if [ -d "$TrashDir/files/$file" ]; then
        rsync -a "$TrashDir/files/$file/." "$restoredir/$restorefile/"
      else
        rsync -a "$TrashDir/files/$file" "$restoredir/$restorefile"
      fi
      [ "$?" = 0 ] && rm -Rf "$TrashDir/files/$file" "$TrashDir/info/$file.trashinfo" &&
        printf_green "Restored: $file to $restoredir/$restorefile" ||
        printf_exit "Failed to restore $file to $restoredir/$restorefile"
    else
      printf_red "$file doesn't exist"
    fi
  done
}
trash-list() {
  if [ "$(__count_files "$TrashDir/files/")" = 0 ]; then
    printf_green "There are no files in your Trash"
  else
    if [ $# = 0 ]; then
      find "$TrashDir/files"/* -type d 2>/dev/null | printf_readline "2" || return 1
      find "$TrashDir/files"/ -type f 2>/dev/null | printf_readline "3" || return 1
    else
      for ls in "$@"; do
        find "$TrashDir/files"/ -name $ls 2>/dev/null | printf_readline "3" || return 1
      done
    fi
  fi
}
trash-empty() {
  countfiles="$(find "$TrashDir/files"/* -type f 2>/dev/null | wc -l)"
  countfolders="$(find "$TrashDir/files"/* -type d 2>/dev/null | wc -l)"
  rm -Rf "$TrashDir/files/"
  rm -Rf "$TrashDir/info"
  __mkd "$TrashDir/files/" "$TrashDir/info"
  printf_yellow "Deleted $countfiles file[s] and $countfolders folder[s] from your system"
}
trash_no_files() {
  if [ "$(__count_files "$TrashDir/files/")" = 0 ]; then
    printf_green "There are no files in your Trash"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# main application
__mkd "$TrashDir/files/" "$TrashDir/info/"
case $1 in
list | ls)
  shift 1
  trash_no_files || trash-list "$@" 2>/dev/null
  ;;

restore | rs)
  shift 1
  trash-restore "$@" 2>/dev/null
  ;;

delete | rm)
  shift 1
  trash-put "$@" 2>/dev/null
  ;;

empty)
  shift 1
  trash_no_files || trash-empty 2>/dev/null
  ;;

*)
  [ $# -eq 0 ] && __help
  trash-put "$@" 2>/dev/null
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# end
