#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap '[ -f "$NOTES_TMP_FILE" ] && rm $NOTES_TMP_FILE' EXIT

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103201736-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : notes --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 20, 2021 17:36 EDT
# @File          : notes
# @Description   : Take notes using bash
# @TODO          : Refactor code
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Default variables
NOTES_PREV_MONTH="$(date --date="1 Month Ago" +%m).txt"
NOTES_NOTIFY="${NOTES_NOTIFY:-yes}"
NOTES_TMPDIR="${NOTES_TMPDIR:-$HOME/.local/tmp/notes}"
NOTES_FOLDER="${NOTES_FOLDER:-$(date +%Y)}"
NOTES_FILE="${NOTES_FILE:-$(date +%m).txt}"
NOTES_DIRECTORY="${NOTES_DIRECTORY:-"$HOME/.local/share/editors/notes"}"
NOTES_EDITOR="${NOTES_EDITOR:-vim}"
NOTES_SERVER_NAME="${NOTES_SERVER_NAME:-localhost}"
NOTES_SERVER_PORT="${NOTES_SERVER_PORT:-65000}"
NOTES_SERVER_DIRECTORY="${NOTES_SERVER_DIRECTORY:-$NOTES_DIRECTORY}"
NOTES_SERVER_TIMEOUT="${NOTES_SERVER_TIMEOUT:-600}"
NOTES_LOG_FILE="${NOTES_LOG_FILE:-$NOTES_TMPDIR/notes_server.log}"
NOTES_TMP_FILE="$(mktemp $NOTES_TMPDIR/notes.XXXXXX.txt 2>/dev/null)"
NOTES_PATH="${NOTES_PATH:-$NOTES_DIRECTORY/$NOTES_FOLDER/$NOTES_FILE}"
NOTES_SERVER_PATH="${NOTES_SERVER_PATH:-$NOTES_SERVER_DIRECTORY/$NOTES_FOLDER/$NOTES_FILE}"
NOTES_PREV_FILE="${NOTES_PREV_FILE:-$NOTES_SERVER_DIRECTORY/$NOTES_FOLDER/$NOTES_PREV_MONTH}"
NOTES_NOTIFY="${NOTES_NOTIFY:-yes}"
NOTES_DEDUP_NOTIFY="${NOTES_DEDUP_NOTIFY:-no}"
NOTES_CONFIG_FILE="${NOTES_CONFIG_FILE:-$HOME/.config/notes/settings.conf}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import settings
[ -f "$NOTES_CONFIG_FILE" ] && . "$NOTES_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__mkd "$NOTES_DIRECTORY"
__mkd "$NOTES_TMPDIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Tmux config
if [ ! -f "$NOTES_DIRECTORY/tmux.conf" ]; then
  if [ -f "$HOME/.config/tmux/tmux.conf" ]; then
    __cp_rf "$HOME/.config/tmux/tmux.conf" "$NOTES_DIRECTORY/tmux.conf"
  else
    __cp_rf "$CASJAYSDEVDIR/templates/tmux.conf" "$NOTES_DIRECTORY/tmux.conf"
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_notifications() { if [ "$NOTES_NOTIFY" = "yes" ]; then notifications "$@"; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__server_start() {
  notes server start &>/dev/null &
  disown || return 1
  sleep 3
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config file
gen_config() {
  __mkd "$HOME/.config/notes"
  echo '# configuration for notes
NOTES_FOLDER="$(date +%Y)"
NOTES_FILE="$(date +%m).txt"
NOTES_TMPDIR="'${NOTES_TMPDIR}'"
NOTES_DIRECTORY="'${NOTES_DIRECTORY:-$HOME/.local/share/editors/notes}'"
NOTES_EDITOR="'${NOTES_EDITOR:-vim}'"
NOTES_SERVER_NAME="'${NOTES_SERVER_NAME:-localhost}'"
NOTES_SERVER_PORT="'${NOTES_SERVER_PORT:-65000}'"
NOTES_SERVER_DIRECTORY="'${NOTES_DIRECTORY}'"
NOTES_SERVER_TIMEOUT="'${NOTES_SERVER_TIMEOUT:-600}'"
NOTES_LOG_FILE="'${NOTES_TMPDIR}/notes_server.log'"
NOTES_TMP_FILE="$(mktemp ${NOTES_TMPDIR}/notes.XXXXXX.txt 2>/dev/null)"
NOTES_PATH="${NOTES_DIRECTORY}/${NOTES_FOLDER}/${NOTES_FILE}"
NOTES_SERVER_PATH="${NOTES_SERVER_DIRECTORY}/${NOTES_FOLDER}/${NOTES_FILE}"
NOTES_NOTIFY="${NOTES_NOTIFY:-yes}"
NOTES_DEDUP_NOTIFY="${NOTES_DEDUP_NOTIFY:-no}"
' >"$NOTES_CONFIG_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# SystemD service file
systemd_service() {
  if [ -f "$HOME/.config/autostart/notes-server.desktop" ]; then
    printf_exit 1 1 "User autostart is enabled"
  fi
  [ -f "$1" ] && sudo rm -Rf "$1"
  echo '
[Unit]
Description=Notes Server
After=network.target

[Service]
#Type=simple
Type=dbus
Restart=always
RestartSec=5
KillMode=mixed
User='${USER:-daemon}'
Group='${USER:-daemon}'

Environment=HOME='${HOME}'
Environment=TERM='${TERM:-linux}'
Environment=NOTES_TMPDIR='${TMP:-/tmp/notes_server}'
Environment=NOTES_DIRECTORY='${HOME}/.local/share/editors/notes'
Environment=NOTES_LOG_FILE='${NOTES_TMPDIR}/notes_server.log'
Environment=NOTES_SERVER_NAME="$(hostname -f)"
Environment=NOTES_SERVER_PORT=65000
Environment=NOTES_TMP_FILE="$(mktemp $NOTES_TMPDIR/notes.XXXXXX.txt 2>/dev/null)"
Environment=NOTES_NOTIFY="'${NOTES_NOTIFY:-yes}'"

ExecStartPre=/usr/local/bin/notes server systemd run vars
ExecStopPost=/usr/bin/rm -Rf "$NOTES_TMPDIR $NOTES_LOG_FILE"
ExecStop=/usr/local/bin/notes server systemd run stop
ExecStart=/usr/local/bin/notes server systemd run start
ExecReload=/usr/local/bin/notes server systemd run restart
TimeoutSec=20
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
' | sudo tee "$1" &>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Enable user autostart
__server_enable() {
  if __system_service_exists notes_server.service; then
    printf_exit 1 1 "$ICON_WARN systemd service already exists"
  fi
  printf_green "Enabling the Notes Server on port $NOTES_SERVER_PORT"
  cat <<EOF >"$HOME/.config/autostart/notes-server.desktop"
#!/usr/bin/env xdg-open

[Desktop Entry]
Version=1.1
Type=Application
Name=Notes Server
GenericName=NotesServer
Comment=Start Notes Server.
Icon=geany
Exec=notes server start --loop &
Path=~
Terminal=false
Actions=
Categories=System;Development;GTK;X-XFCE;GNOME;
Keywords=notes;server;
StartupNotify=true
EOF
  __server_start --loop || false
  [ $? = 0 ] && printf_green "notes server has been installed for $USER" ||
    printf_error 1 1 "$ICON_WARN Failed to install the notes server for $USER"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__server_disable() {
  __notifications "NotesCLI" "Disabling notes server"
  printf_green "Disabling notes server"
  if [ -f "$HOME/.config/autostart/notes-server.desktop" ]; then
    __rm_rf "$HOME/.config/autostart/notes-server.desktop"
  fi
  if [ -f "/etc/systemd/system/notes_server.service" ] && user_is_root; then
    sudo rm -Rf "/etc/systemd/system/notes_server.service" &>/dev/null
    sudo systemctl daemon-reload &>/dev/null
  fi
  if [ -f "$HOME/.config/autostart/notes-server.desktop" ] || [ -f "/etc/systemd/system/notes_server.service" ]; then
    __notifications "NotesCLI" "Failed to disable the service"
    printf_red "Failed to disable the service"
  else
    __notifications "NotesCLI" "Service has been disabled"
    printf_green __notifications "NotesCLI" "Service has been disabled"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Netcat fix
netcat="$(command -v nc 2>/dev/null || command -v netcat 2>/dev/null)"
__netcat_test() { cmd_exists $netcat || printf_exit "The program netcat is not installed"; }
__nc_send() { $netcat -c $1 $2 2>>"$NOTES_LOG_FILE" && true || $netcat -w 1 $1 $2 2>>"$NOTES_LOG_FILE" || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__local() {
  if [ "$NOTES_SERVER_NAME" = "$(hostname -f)" ] || [ "$NOTES_SERVER_NAME" = "$(hostname -s)" ] ||
    [ "$NOTES_SERVER_NAME" = "localhost" ]; then
    return 1
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__notes() {
  unset TMUX
  eval tmux -f "${NOTES_DIRECTORY}/tmux.conf" new-session -D -A -s notes "${NOTES_EDITOR:-vim} ${1:-$NOTES_PATH}" &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__dedup() {
  local _MSG="$1"
  local _NOTESP=${2:-$NOTES_PATH}
  shift $#
  if grep -qx "$_MSG" "$_NOTESP"; then
    DEDUP=true
    if [ "${NOTES_DEDUP_NOTIFY:-$DEDUP_NOTIFY}" = "yes" ]; then
      _notifications "NotesCLI" "$_MSG already added to $_NOTESP"
    fi
    return 1
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#__update_notes "$message" "${NOTES_PATH}"
__update_notes() {
  if __dedup "$1" "$2"; then
    printf "%s\n" "$1" >>"${2:-$NOTES_PATH}" 2>>"${3:-$NOTES_LOG_FILE}" && exitCode=0 && _notifications "New Note" "$1\nposted to\n$2"
    if [ "$exitCode" -ne 0 ]; then _notifications "Failed to commit the note"; fi
  else
    exitCode=1
  fi
  return ${exitCode:-$?}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sync_tmp() {
  local _NOTESP="${1:-$NOTES_PATH}"
  local _TPATH="${2:-$_PATH}"
  shift
  if [ -n "$_TPATH" ]; then cat "$_NOTESP" "$_TPATH" >"$NOTES_TMPDIR/notes_cli.tmp" &&
    __mv_f "$NOTES_TMPDIR/notes_cli.tmp" "$_NOTESP"; fi
  [ -f "$NOTES_DIRECTORY/all.txt" ] && __sync_all && echo synced >>"$NOTES_LOG_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sync_all() {
  [ -z "$DEDUP" ] || return
  local exitCode=0
  local _NOTESP=${1:-$NOTES_PATH}
  local _NOTESA="${2:-$NOTES_DIRECTORY/all.txt}"
  local _NOTES_TMPFILE="${NOTES_TMPDIR:-/tmp}/notes.$$.tmp"
  local _ARCHIVE="$NOTES_DIRECTORY/archive/$(date +"%y-%m-%d")"
  [ -f "$_NOTESA" ] || touch "$_NOTESP"
  [ -f "$_NOTESA" ] || cat "$_NOTESP" | tee "$_NOTESA" &>/dev/null
  #cat "$_NOTESP" "$_NOTESA" | sort -u | sed '/^\#/d;/^$/d' >"$_NOTES_TMPFILE" || local exitCode=1
  if [ "$all" = "true" ]; then
    [ "$show" = "true" ] && printf_green "Archiving ${_NOTESA/$NOTES_DIRECTORY\//} to ${_ARCHIVE/$NOTES_DIRECTORY\//}"
    __mkd "$NOTES_DIRECTORY/archive"
    __cp_rf $_NOTESA "$_ARCHIVE"
    __cp_rf "$_NOTESA" "$_NOTESA.tmp"
    [ "$show" = "true" ] && printf_green "Syncing */*.txt to ${_NOTESA/$NOTES_DIRECTORY\//}"
    cat "$NOTES_DIRECTORY"/*/*.txt "$_NOTESA.tmp" | sed '/^\#/d;/^$/d' | sort -u | tee "$_NOTES_TMPFILE" &>/dev/null || local exitCode=1
  else
    [ "$show" = "true" ] && printf_green "Syncing ${_NOTESP/$NOTES_DIRECTORY\//} notes to ${_NOTESA/$NOTES_DIRECTORY\//}"
    cat "$_NOTESP" "$_NOTESA" | sed '/^\#/d;/^$/d' | sort -u | tee "$_NOTES_TMPFILE" &>/dev/null || local exitCode=1
  fi
  if [ -f "$_NOTES_TMPFILE" ]; then
    echo "### All Active notes as of $(date)" >"$_NOTESA" && cat "$_NOTES_TMPFILE" >>"$_NOTESA" || local exitCode=1
  fi
  __rm_rf "$_NOTES_TMPFILE" "$_NOTESA.tmp"
  if [ "$show" = "true" ]; then
    [ "$exitCode" = 0 ] && printf_green "Sync completed" || printf_error 1 "Sync failed"
  fi
  return "$exitCode"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Server function for user autostart
__server() {
  [ "$1" = "--loop" ] && NOTES_SERVER_LOOP="yes"
  local _PORT="$NOTES_SERVER_PORT"
  local _KILL="$NOTES_TMPDIR/kill_notes"
  local _TMPFILE="$NOTES_TMP_FILE"
  local NOTES_SERVER_LOOP="$NOTES_SERVER_LOOP"
  __mkd "$NOTES_TMPDIR"
  __netcat_test
  netstatg "$_PORT" &>/dev/null && printf_exit "Already Running" || printf_green "Launching server on port $_PORT"
  if [ "$NOTES_SERVER_LOOP" != "yes" ]; then
    _notifications "Notes Server" "Launching server on port $_PORT"
    echo "Starting notes server on port $_PORT" >>"$NOTES_LOG_FILE"
  fi
  timeout ${NOTES_SERVER_TIMEOUT:-600} $netcat -l -p $_PORT >"$_TMPFILE"
  message="$(<"$_TMPFILE")"
  if __dedup "$message" "$NOTES_PATH"; then
    __update_notes "$message" "$NOTES_PATH" "$NOTES_LOG_FILE"
  else
    errormsg="$message seemes to be duplicate"
  fi
  if [ -n "$message" ] && [ -z "$DEDUP" ]; then
    echo "New note: $message" >>"$NOTES_LOG_FILE"
  else
    echo "NotesCLI" "Problem receiving message: ${errormsg:-File is empty}" >>"$NOTES_LOG_FILE"
  fi
  __rm_rf "$_TMPFILE"
  if [ -f "$_KILL" ]; then
    rm -Rf "$_KILL"
    echo "Notes server is shutting down" >>"$NOTES_LOG_FILE"
    _notifications "Notes Server" "Notes server is shutting down"
    exit 5
  fi
  unset message
  __server --loop
  #notes --server --start --loop
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Server function for SystemD
__run_service() {
  local _PORT="$NOTES_SERVER_PORT"
  local _PATH="$NOTES_TMP_FILE"
  local NOTES_NOTIFY=${NOTES_NOTIFY:-yes}
  local DISPLAY="${DISPLAY:-:0.0}"
  local NOTES_SERVER_LOOP="$NOTES_SERVER_LOOP"
  kill -s KILL "$(netstatg $_PORT | awk '{print $7}' | head -n 1 | sed 's#/.*##g')" || true
  if [ "$NOTES_SERVER_LOOP" != "yes" ]; then
    echo "Launching server on port $_PORT"
    echo "Starting notes server on port $_PORT" >"$NOTES_LOG_FILE"
  fi
  rm -Rf "$NOTES_TMPDIR/kill_notes"
  rm -Rf "$_PATH"
  timeout ${NOTES_SERVER_TIMEOUT:-600} $netcat -l -p "$_PORT" >"$_PATH"
  if __file_not_empty "$_PATH"; then
    cat "$_PATH" >>"${NOTES_PATH}" 2>>"$NOTES_LOG_FILE" || echo "Failed to commit the note"
    echo "New note: $(cat $_PATH) in ${NOTES_PATH}"
  fi
  rm -Rf "$_PATH"
  notes --server --systemd --run --start
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Client function
__client() {
  __failed() {
    _notifications "${1:-NotesCLI}" "${2:-$MESSAGE Failed to send}"
    printf_red "failed to send message"
    return 1
  }
  __success() {
    _notifications "${1:-NotesCLI}" "${2:-$MESSAGE has been sent}"
    return 0
  }
  local MESSAGE="$1"
  local DEDUP_NOTIFY="${DEDUP_NOTIFY:-no}"
  local _SERVER="${NOTES_SERVER_NAME}"
  local _PORT=${NOTES_SERVER_PORT}
  local _PATH="$NOTES_TMP_FILE"
  __netcat_test
  printf_green "Attempting to send message to $_SERVER on $_PORT"
  if printf "%s\n" "$*" >"$_PATH" 2>>$NOTES_TMPDIR/notes_client &&
    cat "$_PATH" 2>>$NOTES_TMPDIR/notes_client | __nc_send "$_SERVER" "$_PORT" 2>>$NOTES_TMPDIR/notes_client; then
    __dedup "$MESSAGE" "$NOTES_PATH"
    __success "NotesCLI"
    exitCode=0
  else
    __failed "NotesCLI"
    exitCode=1
  fi
  if [ ${exitCode:-$?} = 0 ]; then
    if [ "$NOTES_NOTIFY" = "yes" ]; then
      if [ -z "$DEDUP" ]; then
        _notifications "New note" "$(cat $_PATH)\nPosted to: $NOTES_PATH"
      fi
    else
      _notifications "NotesCLI" "Sending of note failed"
    fi
  fi
  if [ -z "$DEDUP" ]; then
    __local && __sync_tmp "$NOTES_PATH" "$_PATH"
  fi
  rm -Rf "$_PATH"
  return "$?"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import previous month notes
__import() {
  if [ -f "$NOTES_PREV_FILE" ]; then
    if cat "$NOTES_PREV_FILE" | sed '/^\#/d;/^$/d' >>"${NOTES_PATH}"; then
      printf_green "Notes have been imported"
    else
      return 1
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# sync to all.txt
__run_sync() {
  shift $#
  if __find_mtime "${NOTES_PATH}" "1"; then
    __sync_all "$NOTES_PATH" "$NOTES_DIRECTORY/all.txt" 2>/dev/null
    [ $? = 0 ] && _notifications "NotesCLI" "Notes have been synced to all.txt"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list all notes
__list_all() {
  printf_green "All notes in $NOTES_DIRECTORY"
  find ${NOTES_DIRECTORY}/*/* ${NOTES_DIRECTORY}/all.txt -type f -iname "*.txt" -not -path "${NOTES_DIRECTORY}/archive/*" |
    sed 's#'$NOTES_DIRECTORY/'##g' | printf_column 6
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup
mkdir -p "${NOTES_DIRECTORY}/$NOTES_FOLDER"
if [ ! -f "$NOTES_PREV_FILE" ]; then
  echo -e "## Notes for $(date --date="1 Month Ago" +%B) created on $(date --date="1 Month Ago" +"%D at %H:%M") ##\n" >"$NOTES_PREV_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Previous month
if [ ! -f "$NOTES_PATH" ]; then
  if [ -s "$NOTES_PATH" ]; then
    printf_red "Refusing to import old notes into an none empty file"
    printf_green "You can do it manually by running $APPNAME --import"
  else
    printf_green "Assuming its a new month or new install"
    echo -e "## Notes for $(date +%B) created on $(date +"%D at %H:%M") ##\n" >"${NOTES_PATH}"
    __import && sleep 3
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Manual import
case $1 in
--import)
  shift 1
  __import
  exit $?
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
case "${SETOPTS:$1}" in
server | service | *-systemd | *-service)
  if [ "$2" = "--help" ]; then shift 1 && printf_help 'Usage: notes server  |  Start the server'; fi
  if [ "$2" = "--status" ]; then
    shift 1
    if netstatg "$NOTES_SERVER_PORT" &>/dev/null; then
      printf_green "The server is up and running on $NOTES_SERVER_PORT"
      _notifications "NoteServer" "The server is up and running on $NOTES_SERVER_PORT"
    else printf_exit 1 1 "$ICON_ERROR The notes server is not running"; fi
    exit $?
  fi
  if [ "$2" = "--kill" ]; then
    if netstatg "$NOTES_SERVER_PORT" &>/dev/null; then
      printf_red "Starting shutdown"
      shift 1
      touch "$NOTES_TMPDIR/kill_notes"
      __netcat_kill_server "$NOTES_SERVER_PORT" "printf_green" "printf_red"
    #kill -s 9 "$(netstatg $NOTES_SERVER_PORT | awk '{print $7}' | head -n 1 | sed 's#/.*##g')" || true
    else
      printf_red "Server is not running"
    fi
    exit $?
  fi

  # begin systemd 2 deep
  case "$2" in
  systemd | *-systemd)
    shift 1
    case $2 in
    *-install)
      shift 2
      NOTES_DIRECTORY="$NOTES_SERVER_DIRECTORY"
      systemd_service "/etc/systemd/system/notes_server.service" &&
        __devnull sudo systemctl daemon-reload &&
        __devnull sudo systemctl start notes_server &&
        __devnull sudo systemctl enable -f notes_server && printf_green "Service has been created" || printf_red "Failed to create service"
      ;;
    *-remove)
      shift 2
      __system_service_exists notes_server.service || printf_exit 1 0 "Notes server is not installed"
      __devnull sudo systemctl disable -f notes_server &&
        __devnull sudo systemctl daemon-reload &&
        __rm_rf /etc/systemd/system/notes_server.service && printf_green "Service has been deleted" || printf_red "Failed to delete service"
      ;;
    *-start)
      shift 2
      __system_service_exists notes_server.service || printf_exit 2 0 "Notes server is not installed"
      __devnull sudo systemctl start notes_server && printf_green "Service has been started" || printf_red "Failed to start service"
      ;;
    *-stop)
      shift 2
      __system_service_exists notes_server.service || printf_exit 2 0 "Notes server is not installed"
      __devnull sudo systemctl stop notes_server && printf_green "Service has been stopped" || printf_red "Failed to stop service"
      ;;
    *-restart)
      shift 2
      __system_service_exists notes_server.service || printf_exit 2 0 "Notes server is not installed"
      __devnull sudo systemctl restart notes_server && printf_green "Service has been restarted" || printf_red "Failed to restart service"
      ;;
    *-run) # SystemD run
      case $3 in
      *vars)
        shift 3
        __system_service_exists notes_server.service && printf_exit 2 0 "Notes server is not installed"
        export NOTES_NOTIFY NOTES_FOLDER NOTES_FILE NOTES_TMPDIR NOTES_DIRECTORY NOTES_EDITOR NOTES_PATH
        export NOTES_SERVER_NAME NOTES_SERVER_PORT NOTES_SERVER_DIRECTORY NOTES_LOG_FILE NOTES_TMP_FILE NOTES_SERVER_PATH
        ;;
      *-stop)
        shift 3
        __system_service_exists notes_server.service && printf_exit 2 0 "Notes server is not installed"
        touch "$NOTES_TMPDIR/kill_notes"
        __netcat_kill_server "$NOTES_SERVER_PORT"
        ;;
      *-start)
        shift 3
        __system_service_exists notes_server.service && printf_exit 2 0 "Notes server is not installed"
        if [ "$1" = "--loop" ]; then
          shift 1
          NOTES_SERVER_LOOP="yes"
        fi
        opts="$*"
        __run_service "$opts" 2>>"$NOTES_LOG_FILE"
        ;;
      *-restart)
        __system_service_exists notes_server.service && printf_exit 2 0 "Notes server is not installed"
        shift 3
        opts="$*"
        touch "$NOTES_TMPDIR/kill_notes"
        __netcat_kill_server "$NOTES_SERVER_PORT"
        __run_service "$opts" 2>>"$NOTES_LOG_FILE"
        ;;
      *)
        __system_service_exists notes_server.service && printf_exit 2 0 "Notes server is not installed"
        shift 2
        opts="$*"
        __run_service "$opts" 2>>"$NOTES_LOG_FILE"
        ;;
      esac
      ;;
    status | *)
      shift 2
      __system_service_exists notes_server.service || printf_exit 2 0 "Notes server is not installed"
      sudo systemctl status notes_server | printf_readline "255"
      ;;
    esac
    ;;
  # End Systemd

  *-start)
    shift 2
    if [ "$1" = "--loop" ]; then
      NOTES_SERVER_LOOP=yes
      _notifications "Notes Server" "Launching server on port $NOTES_SERVER_PORT"
      shift 1
    else
      printf_green "Starting notes server for $USER"
      printf_newline
    fi
    __server "$@" &>/dev/null
    sleep 3
    ;;

  *-enable)
    shift 2
    __server_enable
    ;;

  *-disable)
    shift 2
    __server_disable
    ;;

  edit | *-edit)
    shift 2
    if [ "$1" = prev ]; then
      ssh -qt "$NOTES_SERVER_NAME" notes open "$NOTES_PREV_FILE"
    elif [ "$1" = "all" ]; then
      ssh -qt "$NOTES_SERVER_NAME" notes all
    else ssh -qt "$NOTES_SERVER_NAME" notes; fi
    __run_sync
    ;;

  *)
    shift 1
    opts="$*"
    __server "$opts" 2>>"$NOTES_LOG_FILE"
    ;;
  esac
  ;;

client | *-client)
  shift 1
  [ "$1" = "--help" ] && printf_help 'Usage: notes client "my message"  |  Send your notes to the server'
  [ -n "$NOTES_SERVER_NAME" ] || printf_help "Please set NOTES_SERVER_NAME variable to your server"
  if [ ${#} -eq 0 ]; then
    if [ -p "/dev/stdin" ]; then
      message="$(cat </dev/stdin)"
    fi
  else
    message="$*"
  fi
  __client "$message" 2>/dev/null
  ;;

open | *-open)
  shift 1
  if [ "$1" = list ] || [ $# = 0 ]; then
    __list_all
  else
    if [ "$1" = "$NOTES_DIRECTORY/all.txt" ] || [[ "$1" = */all* ]] || [[ "$1" = all ]]; then
      filename="$NOTES_DIRECTORY/all.txt"
    elif [[ "$1" = prev ]]; then
      filename="$NOTES_PREV_FILE"
    elif [[ "$1" = cur ]]; then
      filename="$NOTES_PATH"
    else
      filepath="$(__get_full_file "$1")"
      filename="$NOTES_DIRECTORY/${1//$NOTES_DIRECTORY/$filename}"
    fi
    __notes "$filename" 2>/dev/null
  fi
  __run_sync
  ;;

all | *-all)
  shift 1
  __sync_all "${NOTES_PATH}" "${NOTES_DIRECTORY}/all.txt"
  __notes "${NOTES_DIRECTORY}/all.txt"
  ;;

sync | *-sync)
  shift 1
  [ "$1" = show ] && show=true && shift 1 || show=""
  [ "$1" = all ] && all=true && shift 1 || all=""
  __sync_all "${NOTES_PATH}" "${NOTES_DIRECTORY}/all.txt"
  ;;

config | *-config)
  shift 1
  gen_config && printf_green "config file was created in $NOTES_CONFIG_FILE"
  ;;

show | *-show)
  shift 1
  [ -f "$NOTES_PATH" ] && cat "$NOTES_PATH" 2>/dev/null | printf_readline "7" || printf_exit ""
  ;;

list | *-list)
  shift 1
  __list_all
  ;;

search)
  shift 1
  search_results="$(cat "$NOTES_DIRECTORY/all.txt" "$NOTES_PREV_FILE" "$NOTES_PATH" | grep -i "$1" 2>/dev/null)"
  if [ -n "$search_results" ]; then
    printf_green "Search results: "
    echo "$search_results" | printf_readline "7"
    exitCode=0
  else
    printf_red "No results found"
    exitCode=1
  fi
  exit $exitCode
  ;;

-)
  shift 1
  if [ ${#} -eq 0 ]; then
    if [ -p "/dev/stdin" ]; then
      message="$(</dev/stdin)"
      __update_notes "$message" "${NOTES_PATH}"
    else
      echo "Type your note, hit control-d when done"
      message="$(</dev/stdin)"
      __update_notes "$message" "${NOTES_PATH}"
    fi
  else
    message="$*"
    __update_notes "$message" "${NOTES_PATH}"
  fi
  ;;

*)
  if [ ${#} -eq 0 ]; then
    if [ -p "/dev/stdin" ]; then
      message="$(</dev/stdin)"
      __update_notes "$message" "${NOTES_PATH}"
    else
      __notes
    fi
  else
    message="$*"
    __update_notes "$message" "${NOTES_PATH}"
  fi
  __run_sync
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
